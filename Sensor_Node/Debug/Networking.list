
Networking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  08009128  08009128  00019128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099ec  080099ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080099ec  080099ec  000199ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099f4  080099f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099f8  080099f8  000199f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080099fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000070  08009a6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08009a6c  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb83  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d41  00000000  00000000  0003ec23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  00042968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  000442f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000057f7  00000000  00000000  00045b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e60e  00000000  00000000  0004b32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8201  00000000  00000000  0006993d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131b3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a78  00000000  00000000  00131b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00139608  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0013962c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009110 	.word	0x08009110

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009110 	.word	0x08009110

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <graph_init>:
#include "graph.h"
#include "prints.h"

extern int PRINT_TIME;

graph_t *graph_init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
    graph_t *graph = malloc(sizeof(graph_t));
 800058a:	200c      	movs	r0, #12
 800058c:	f007 fa22 	bl	80079d4 <malloc>
 8000590:	4603      	mov	r3, r0
 8000592:	607b      	str	r3, [r7, #4]
    graph->head = NULL;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
    graph->tail = NULL;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
    graph->num_vert = 0;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2200      	movs	r2, #0
 80005a4:	811a      	strh	r2, [r3, #8]
    return graph;
 80005a6:	687b      	ldr	r3, [r7, #4]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <graph_add_neighbors>:
        adj_vertex = adj_vertex->next_vert;
    }
    
}

bool graph_add_neighbors(graph_t *net_graph, mixnet_address vert_node, mixnet_address *node_list, uint16_t node_count) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	607a      	str	r2, [r7, #4]
 80005ba:	461a      	mov	r2, r3
 80005bc:	460b      	mov	r3, r1
 80005be:	817b      	strh	r3, [r7, #10]
 80005c0:	4613      	mov	r3, r2
 80005c2:	813b      	strh	r3, [r7, #8]
    adj_vert_t *adj_vertex = get_adj_vertex(net_graph, vert_node);
 80005c4:	897b      	ldrh	r3, [r7, #10]
 80005c6:	4619      	mov	r1, r3
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f000 f878 	bl	80006be <get_adj_vertex>
 80005ce:	61f8      	str	r0, [r7, #28]
    adj_node_t *node;
    adj_node_t *search_node;
    bool node_in_graph = false;
 80005d0:	2300      	movs	r3, #0
 80005d2:	76fb      	strb	r3, [r7, #27]
    bool added = false;
 80005d4:	2300      	movs	r3, #0
 80005d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for(uint16_t node_idx=0; node_idx < node_count; node_idx++){
 80005da:	2300      	movs	r3, #0
 80005dc:	843b      	strh	r3, [r7, #32]
 80005de:	e042      	b.n	8000666 <graph_add_neighbors+0xb6>
        node_in_graph = adj_list_has_node(net_graph, adj_vertex, node_list[node_idx]);
 80005e0:	8c3b      	ldrh	r3, [r7, #32]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	69f9      	ldr	r1, [r7, #28]
 80005ee:	68f8      	ldr	r0, [r7, #12]
 80005f0:	f000 f843 	bl	800067a <adj_list_has_node>
 80005f4:	4603      	mov	r3, r0
 80005f6:	76fb      	strb	r3, [r7, #27]
        
        if(!node_in_graph) {
 80005f8:	7efb      	ldrb	r3, [r7, #27]
 80005fa:	f083 0301 	eor.w	r3, r3, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d02d      	beq.n	8000660 <graph_add_neighbors+0xb0>
            adj_vertex->num_children += 1;
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	891b      	ldrh	r3, [r3, #8]
 8000608:	3301      	adds	r3, #1
 800060a:	b29a      	uxth	r2, r3
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	811a      	strh	r2, [r3, #8]
            added = true;
 8000610:	2301      	movs	r3, #1
 8000612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            node = malloc(sizeof(adj_node_t));
 8000616:	2008      	movs	r0, #8
 8000618:	f007 f9dc 	bl	80079d4 <malloc>
 800061c:	4603      	mov	r3, r0
 800061e:	617b      	str	r3, [r7, #20]
            node->addr = node_list[node_idx];
 8000620:	8c3b      	ldrh	r3, [r7, #32]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4413      	add	r3, r2
 8000628:	881a      	ldrh	r2, [r3, #0]
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	801a      	strh	r2, [r3, #0]
            node->next = NULL;
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]

            // Insert neighbour at start of vertex adjacency list
            if(adj_vertex->adj_list == NULL){
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d103      	bne.n	8000644 <graph_add_neighbors+0x94>
                adj_vertex->adj_list = node;
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	e00d      	b.n	8000660 <graph_add_neighbors+0xb0>

            // Insert neighbour at end of vertex adjacency list
            }else{
                search_node = adj_vertex->adj_list;
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
                while(search_node->next != NULL){
 800064a:	e002      	b.n	8000652 <graph_add_neighbors+0xa2>
                    search_node = search_node->next;
 800064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
                while(search_node->next != NULL){
 8000652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1f8      	bne.n	800064c <graph_add_neighbors+0x9c>
                }

                search_node->next = node;
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	605a      	str	r2, [r3, #4]
    for(uint16_t node_idx=0; node_idx < node_count; node_idx++){
 8000660:	8c3b      	ldrh	r3, [r7, #32]
 8000662:	3301      	adds	r3, #1
 8000664:	843b      	strh	r3, [r7, #32]
 8000666:	8c3a      	ldrh	r2, [r7, #32]
 8000668:	893b      	ldrh	r3, [r7, #8]
 800066a:	429a      	cmp	r2, r3
 800066c:	d3b8      	bcc.n	80005e0 <graph_add_neighbors+0x30>
            }
        }
    }
    return added;
 800066e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000672:	4618      	mov	r0, r3
 8000674:	3728      	adds	r7, #40	; 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <adj_list_has_node>:

bool adj_list_has_node(graph_t *net_graph, adj_vert_t *adj_vertex, mixnet_address node_addr) {
 800067a:	b480      	push	{r7}
 800067c:	b087      	sub	sp, #28
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	4613      	mov	r3, r2
 8000686:	80fb      	strh	r3, [r7, #6]
    adj_node_t *search_node;
    search_node = adj_vertex->adj_list;
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	617b      	str	r3, [r7, #20]
    bool found_node = false;
 800068e:	2300      	movs	r3, #0
 8000690:	74fb      	strb	r3, [r7, #19]

    while(search_node != NULL) {
 8000692:	e00a      	b.n	80006aa <adj_list_has_node+0x30>
        if(search_node->addr == node_addr) {
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	88fa      	ldrh	r2, [r7, #6]
 800069a:	429a      	cmp	r2, r3
 800069c:	d102      	bne.n	80006a4 <adj_list_has_node+0x2a>
            found_node = true;
 800069e:	2301      	movs	r3, #1
 80006a0:	74fb      	strb	r3, [r7, #19]
            break;
 80006a2:	e005      	b.n	80006b0 <adj_list_has_node+0x36>
        }
        search_node = search_node->next;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	617b      	str	r3, [r7, #20]
    while(search_node != NULL) {
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f1      	bne.n	8000694 <adj_list_has_node+0x1a>
    }
    
    return found_node;
 80006b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	371c      	adds	r7, #28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <get_adj_vertex>:

adj_vert_t *get_adj_vertex(graph_t *net_graph, mixnet_address vert_node) {
 80006be:	b580      	push	{r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	807b      	strh	r3, [r7, #2]
    adj_vert_t *adj_vertex = NULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
    adj_vert_t *search_vert; 

    // no ele in vert list
    if(net_graph->head == NULL && net_graph->tail == NULL && net_graph->num_vert == 0) {
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d125      	bne.n	8000722 <get_adj_vertex+0x64>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d121      	bne.n	8000722 <get_adj_vertex+0x64>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	891b      	ldrh	r3, [r3, #8]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d11d      	bne.n	8000722 <get_adj_vertex+0x64>
        adj_vertex = malloc(sizeof(adj_vert_t));
 80006e6:	2010      	movs	r0, #16
 80006e8:	f007 f974 	bl	80079d4 <malloc>
 80006ec:	4603      	mov	r3, r0
 80006ee:	60fb      	str	r3, [r7, #12]
        adj_vertex->addr = vert_node;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	887a      	ldrh	r2, [r7, #2]
 80006f4:	801a      	strh	r2, [r3, #0]
        adj_vertex->num_children = 0;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2200      	movs	r2, #0
 80006fa:	811a      	strh	r2, [r3, #8]
        adj_vertex->adj_list = NULL;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
        adj_vertex->next_vert = NULL;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]

        net_graph->head = adj_vertex;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	601a      	str	r2, [r3, #0]
        net_graph->tail = adj_vertex;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	605a      	str	r2, [r3, #4]
        net_graph->num_vert++;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	891b      	ldrh	r3, [r3, #8]
 8000718:	3301      	adds	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	811a      	strh	r2, [r3, #8]
 8000720:	e061      	b.n	80007e6 <get_adj_vertex+0x128>

    // one ele in vert list
    }else if(net_graph->head == net_graph->tail && net_graph->num_vert == 1) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	429a      	cmp	r2, r3
 800072c:	d12c      	bne.n	8000788 <get_adj_vertex+0xca>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	891b      	ldrh	r3, [r3, #8]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d128      	bne.n	8000788 <get_adj_vertex+0xca>

        // is the vertex we're looking for, the only one that is in the vertex list?
        if(net_graph->head->addr == vert_node) {
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	887a      	ldrh	r2, [r7, #2]
 800073e:	429a      	cmp	r2, r3
 8000740:	d103      	bne.n	800074a <get_adj_vertex+0x8c>
            adj_vertex = net_graph->head;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	60fb      	str	r3, [r7, #12]
        if(net_graph->head->addr == vert_node) {
 8000748:	e04d      	b.n	80007e6 <get_adj_vertex+0x128>

        }else{
            adj_vertex = malloc(sizeof(adj_vert_t));
 800074a:	2010      	movs	r0, #16
 800074c:	f007 f942 	bl	80079d4 <malloc>
 8000750:	4603      	mov	r3, r0
 8000752:	60fb      	str	r3, [r7, #12]
            adj_vertex->addr = vert_node;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	887a      	ldrh	r2, [r7, #2]
 8000758:	801a      	strh	r2, [r3, #0]
            adj_vertex->num_children = 0;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2200      	movs	r2, #0
 800075e:	811a      	strh	r2, [r3, #8]
            adj_vertex->adj_list = NULL;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
            adj_vertex->next_vert = NULL;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
            
            net_graph->tail = adj_vertex;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	605a      	str	r2, [r3, #4]
            net_graph->head->next_vert = adj_vertex;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	60da      	str	r2, [r3, #12]
            net_graph->num_vert++;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	891b      	ldrh	r3, [r3, #8]
 800077e:	3301      	adds	r3, #1
 8000780:	b29a      	uxth	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	811a      	strh	r2, [r3, #8]
        if(net_graph->head->addr == vert_node) {
 8000786:	e02e      	b.n	80007e6 <get_adj_vertex+0x128>
        }
        
    // two or more ele in vert list
    }else{
        search_vert = find_vertex(net_graph, vert_node);
 8000788:	887b      	ldrh	r3, [r7, #2]
 800078a:	4619      	mov	r1, r3
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 f82f 	bl	80007f0 <find_vertex>
 8000792:	60b8      	str	r0, [r7, #8]
        if(search_vert != NULL && search_vert->addr == vert_node) {
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d007      	beq.n	80007aa <get_adj_vertex+0xec>
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	887a      	ldrh	r2, [r7, #2]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d102      	bne.n	80007aa <get_adj_vertex+0xec>
            adj_vertex = search_vert;
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	e01d      	b.n	80007e6 <get_adj_vertex+0x128>
        }else{
            adj_vertex = malloc(sizeof(adj_vert_t));
 80007aa:	2010      	movs	r0, #16
 80007ac:	f007 f912 	bl	80079d4 <malloc>
 80007b0:	4603      	mov	r3, r0
 80007b2:	60fb      	str	r3, [r7, #12]
            adj_vertex->addr = vert_node;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	887a      	ldrh	r2, [r7, #2]
 80007b8:	801a      	strh	r2, [r3, #0]
            adj_vertex->num_children = 0;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2200      	movs	r2, #0
 80007be:	811a      	strh	r2, [r3, #8]
            adj_vertex->adj_list = NULL;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
            adj_vertex->next_vert = NULL;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]

            net_graph->tail->next_vert = adj_vertex;        
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	60da      	str	r2, [r3, #12]
            net_graph->tail = adj_vertex;  
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	605a      	str	r2, [r3, #4]
            net_graph->num_vert++;      
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	891b      	ldrh	r3, [r3, #8]
 80007de:	3301      	adds	r3, #1
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	811a      	strh	r2, [r3, #8]
        }
    }
    return adj_vertex;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <find_vertex>:

adj_vert_t *find_vertex(graph_t *net_graph, mixnet_address vert_node) {
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	807b      	strh	r3, [r7, #2]
    adj_vert_t *search_vert = net_graph->head;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	60fb      	str	r3, [r7, #12]

    while(search_vert != NULL){
 8000802:	e009      	b.n	8000818 <find_vertex+0x28>
        if(search_vert->addr == vert_node) {
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	887a      	ldrh	r2, [r7, #2]
 800080a:	429a      	cmp	r2, r3
 800080c:	d101      	bne.n	8000812 <find_vertex+0x22>
            return search_vert;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	e006      	b.n	8000820 <find_vertex+0x30>
        }
        search_vert = search_vert->next_vert;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	60fb      	str	r3, [r7, #12]
    while(search_vert != NULL){
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f2      	bne.n	8000804 <find_vertex+0x14>
    }
    return NULL;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <readline_LORA>:
    }

    HAL_printf("\n\n");
}

int readline_LORA(char *recv_buf, recv_mode_t recv_mode, uint32_t timeout) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	460b      	mov	r3, r1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	72fb      	strb	r3, [r7, #11]
    int recvd_msg_len = -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	617b      	str	r3, [r7, #20]
    uint32_t start_time = tim2_tick_count;
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <readline_LORA+0xbc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	613b      	str	r3, [r7, #16]

    lora.copying_bytes = false;
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <readline_LORA+0xc0>)
 8000848:	2200      	movs	r2, #0
 800084a:	729a      	strb	r2, [r3, #10]
    lora.msg_end = false;
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <readline_LORA+0xc0>)
 800084e:	2200      	movs	r2, #0
 8000850:	721a      	strb	r2, [r3, #8]
    lora.buf_idx = 0;
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <readline_LORA+0xc0>)
 8000854:	2200      	movs	r2, #0
 8000856:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    lora.msg_len = 0;
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <readline_LORA+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]

  	HAL_UART_Receive_IT(&huart1, &lora.byte, 1);
 8000860:	2201      	movs	r2, #1
 8000862:	4922      	ldr	r1, [pc, #136]	; (80008ec <readline_LORA+0xc0>)
 8000864:	4822      	ldr	r0, [pc, #136]	; (80008f0 <readline_LORA+0xc4>)
 8000866:	f005 fd4f 	bl	8006308 <HAL_UART_Receive_IT>

    if(recv_mode == BLOCKING){
 800086a:	7afb      	ldrb	r3, [r7, #11]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d108      	bne.n	8000882 <readline_LORA+0x56>
        while(!lora.msg_end);
 8000870:	bf00      	nop
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <readline_LORA+0xc0>)
 8000874:	7a1b      	ldrb	r3, [r3, #8]
 8000876:	f083 0301 	eor.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1f8      	bne.n	8000872 <readline_LORA+0x46>
 8000880:	e010      	b.n	80008a4 <readline_LORA+0x78>

    }else if(recv_mode == NON_BLOCKING){
 8000882:	7afb      	ldrb	r3, [r7, #11]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d10d      	bne.n	80008a4 <readline_LORA+0x78>
        while((tim2_tick_count - start_time) < timeout){
 8000888:	e003      	b.n	8000892 <readline_LORA+0x66>
            if(lora.msg_end) break;
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <readline_LORA+0xc0>)
 800088c:	7a1b      	ldrb	r3, [r3, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d107      	bne.n	80008a2 <readline_LORA+0x76>
        while((tim2_tick_count - start_time) < timeout){
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <readline_LORA+0xbc>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f4      	bhi.n	800088a <readline_LORA+0x5e>
 80008a0:	e000      	b.n	80008a4 <readline_LORA+0x78>
            if(lora.msg_end) break;
 80008a2:	bf00      	nop
        }
    }

    // messages are defined as +..\r\n
    if(lora.msg_end && lora.copying_bytes){
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <readline_LORA+0xc0>)
 80008a6:	7a1b      	ldrb	r3, [r3, #8]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d017      	beq.n	80008dc <readline_LORA+0xb0>
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <readline_LORA+0xc0>)
 80008ae:	7a9b      	ldrb	r3, [r3, #10]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d013      	beq.n	80008dc <readline_LORA+0xb0>
        lora.buf[lora.msg_len] = '\0';
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <readline_LORA+0xc0>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <readline_LORA+0xc0>)
 80008ba:	4413      	add	r3, r2
 80008bc:	2200      	movs	r2, #0
 80008be:	72da      	strb	r2, [r3, #11]
        HAL_printf("%s", lora.buf);
 80008c0:	490c      	ldr	r1, [pc, #48]	; (80008f4 <readline_LORA+0xc8>)
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <readline_LORA+0xcc>)
 80008c4:	f001 f91c 	bl	8001b00 <HAL_printf>

        memcpy(recv_buf, lora.buf, lora.msg_len);
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <readline_LORA+0xc0>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4909      	ldr	r1, [pc, #36]	; (80008f4 <readline_LORA+0xc8>)
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f007 f89f 	bl	8007a14 <memcpy>
        recvd_msg_len = lora.msg_len;
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <readline_LORA+0xc0>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	617b      	str	r3, [r7, #20]
    }

    return recvd_msg_len;
 80008dc:	697b      	ldr	r3, [r7, #20]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200003c0 	.word	0x200003c0
 80008ec:	200002bc 	.word	0x200002bc
 80008f0:	200001b4 	.word	0x200001b4
 80008f4:	200002c7 	.word	0x200002c7
 80008f8:	08009134 	.word	0x08009134

080008fc <LORA_cmd>:

int LORA_cmd(UART_HandleTypeDef * lora_huart, UART_HandleTypeDef * serial_huart, 
            uint8_t *in_cmd, uint8_t cmd_len, char *response, int rx_timeout, int tx_timeout) {
 80008fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000900:	b09f      	sub	sp, #124	; 0x7c
 8000902:	af00      	add	r7, sp, #0
 8000904:	61f8      	str	r0, [r7, #28]
 8000906:	61b9      	str	r1, [r7, #24]
 8000908:	617a      	str	r2, [r7, #20]
 800090a:	74fb      	strb	r3, [r7, #19]
 800090c:	466b      	mov	r3, sp
 800090e:	461e      	mov	r6, r3
    int resp_len = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	677b      	str	r3, [r7, #116]	; 0x74
    uint8_t exp_resp_len = strlen(response);
 8000914:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8000918:	f7ff fc5a 	bl	80001d0 <strlen>
 800091c:	4603      	mov	r3, r0
 800091e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	char recv_buf[20];
    char printf_buf[MAX_PKT_SZ];
 8000922:	4ba4      	ldr	r3, [pc, #656]	; (8000bb4 <LORA_cmd+0x2b8>)
 8000924:	6819      	ldr	r1, [r3, #0]
 8000926:	1e4b      	subs	r3, r1, #1
 8000928:	667b      	str	r3, [r7, #100]	; 0x64
 800092a:	460a      	mov	r2, r1
 800092c:	2300      	movs	r3, #0
 800092e:	60ba      	str	r2, [r7, #8]
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	f04f 0200 	mov.w	r2, #0
 8000936:	f04f 0300 	mov.w	r3, #0
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	00c3      	lsls	r3, r0, #3
 800093e:	68b8      	ldr	r0, [r7, #8]
 8000940:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000944:	68b8      	ldr	r0, [r7, #8]
 8000946:	00c2      	lsls	r2, r0, #3
 8000948:	460a      	mov	r2, r1
 800094a:	2300      	movs	r3, #0
 800094c:	4692      	mov	sl, r2
 800094e:	469b      	mov	fp, r3
 8000950:	f04f 0200 	mov.w	r2, #0
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800095c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000964:	460b      	mov	r3, r1
 8000966:	3307      	adds	r3, #7
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	ebad 0d03 	sub.w	sp, sp, r3
 8000970:	466b      	mov	r3, sp
 8000972:	3300      	adds	r3, #0
 8000974:	663b      	str	r3, [r7, #96]	; 0x60
    int ret_val = -1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	66fb      	str	r3, [r7, #108]	; 0x6c

    uint8_t cmd[MAX_PKT_SZ];
 800097c:	4b8d      	ldr	r3, [pc, #564]	; (8000bb4 <LORA_cmd+0x2b8>)
 800097e:	6819      	ldr	r1, [r3, #0]
 8000980:	1e4b      	subs	r3, r1, #1
 8000982:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000984:	460a      	mov	r2, r1
 8000986:	2300      	movs	r3, #0
 8000988:	4690      	mov	r8, r2
 800098a:	4699      	mov	r9, r3
 800098c:	f04f 0200 	mov.w	r2, #0
 8000990:	f04f 0300 	mov.w	r3, #0
 8000994:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000998:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800099c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009a0:	460a      	mov	r2, r1
 80009a2:	2300      	movs	r3, #0
 80009a4:	4614      	mov	r4, r2
 80009a6:	461d      	mov	r5, r3
 80009a8:	f04f 0200 	mov.w	r2, #0
 80009ac:	f04f 0300 	mov.w	r3, #0
 80009b0:	00eb      	lsls	r3, r5, #3
 80009b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009b6:	00e2      	lsls	r2, r4, #3
 80009b8:	460b      	mov	r3, r1
 80009ba:	3307      	adds	r3, #7
 80009bc:	08db      	lsrs	r3, r3, #3
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	ebad 0d03 	sub.w	sp, sp, r3
 80009c4:	466b      	mov	r3, sp
 80009c6:	3300      	adds	r3, #0
 80009c8:	65bb      	str	r3, [r7, #88]	; 0x58
    memcpy(cmd, in_cmd, cmd_len);
 80009ca:	7cfb      	ldrb	r3, [r7, #19]
 80009cc:	461a      	mov	r2, r3
 80009ce:	6979      	ldr	r1, [r7, #20]
 80009d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80009d2:	f007 f81f 	bl	8007a14 <memcpy>
    cmd[cmd_len++] = '\r';
 80009d6:	7cfb      	ldrb	r3, [r7, #19]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	74fa      	strb	r2, [r7, #19]
 80009dc:	461a      	mov	r2, r3
 80009de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009e0:	210d      	movs	r1, #13
 80009e2:	5499      	strb	r1, [r3, r2]
    cmd[cmd_len++] = '\n';
 80009e4:	7cfb      	ldrb	r3, [r7, #19]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	74fa      	strb	r2, [r7, #19]
 80009ea:	461a      	mov	r2, r3
 80009ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009ee:	210a      	movs	r1, #10
 80009f0:	5499      	strb	r1, [r3, r2]

    // snprintf(printf_buf, 40, "sending %u bytes: %s\n", cmd_len, cmd);
    // HAL_printf("%s", printf_buf);

    HAL_UART_Transmit_IT(&huart1, (uint8_t*)cmd, cmd_len);
 80009f2:	7cfb      	ldrb	r3, [r7, #19]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80009fa:	486f      	ldr	r0, [pc, #444]	; (8000bb8 <LORA_cmd+0x2bc>)
 80009fc:	f005 fc16 	bl	800622c <HAL_UART_Transmit_IT>

    uint64_t start_time = tim2_tick_count;
 8000a00:	4b6e      	ldr	r3, [pc, #440]	; (8000bbc <LORA_cmd+0x2c0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2200      	movs	r2, #0
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000a0e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    
    if((strncmp((char*)in_cmd, "AT+RESET", 8) == 0) ){
 8000a12:	2208      	movs	r2, #8
 8000a14:	496a      	ldr	r1, [pc, #424]	; (8000bc0 <LORA_cmd+0x2c4>)
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f007 fcca 	bl	80083b0 <strncmp>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d12a      	bne.n	8000a78 <LORA_cmd+0x17c>
        resp_len = readline_LORA(recv_buf, NON_BLOCKING, rx_timeout);
 8000a22:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000a26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fefd 	bl	800082c <readline_LORA>
 8000a32:	6778      	str	r0, [r7, #116]	; 0x74
        if((strncmp((char*)recv_buf, response, 6) == 0) && (strncmp((char*)&recv_buf[9], &response[9], 6) == 0)) {
 8000a34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a38:	2206      	movs	r2, #6
 8000a3a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f007 fcb6 	bl	80083b0 <strncmp>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10f      	bne.n	8000a6a <LORA_cmd+0x16e>
 8000a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000a4e:	f103 0109 	add.w	r1, r3, #9
 8000a52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a56:	3309      	adds	r3, #9
 8000a58:	2206      	movs	r2, #6
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f007 fca8 	bl	80083b0 <strncmp>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <LORA_cmd+0x16e>
            ret_val = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	66fb      	str	r3, [r7, #108]	; 0x6c
        }
        HAL_printf("response: %s\n", recv_buf);
 8000a6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4854      	ldr	r0, [pc, #336]	; (8000bc4 <LORA_cmd+0x2c8>)
 8000a72:	f001 f845 	bl	8001b00 <HAL_printf>
 8000a76:	e095      	b.n	8000ba4 <LORA_cmd+0x2a8>
        // wait_ms(PRINT_TIME);
    }else if(strncmp((char*)in_cmd, "AT+ADDRESS", 10) == 0){
 8000a78:	220a      	movs	r2, #10
 8000a7a:	4953      	ldr	r1, [pc, #332]	; (8000bc8 <LORA_cmd+0x2cc>)
 8000a7c:	6978      	ldr	r0, [r7, #20]
 8000a7e:	f007 fc97 	bl	80083b0 <strncmp>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d123      	bne.n	8000ad0 <LORA_cmd+0x1d4>
        resp_len = readline_LORA(recv_buf, NON_BLOCKING, rx_timeout);
 8000a88:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000a8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a90:	2101      	movs	r1, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff feca 	bl	800082c <readline_LORA>
 8000a98:	6778      	str	r0, [r7, #116]	; 0x74
        if((resp_len != -1) && strncmp((char*)recv_buf, response, resp_len) == 0) {
 8000a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa0:	d00c      	beq.n	8000abc <LORA_cmd+0x1c0>
 8000aa2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000aa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aa8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f007 fc7f 	bl	80083b0 <strncmp>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d101      	bne.n	8000abc <LORA_cmd+0x1c0>
            ret_val = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	66fb      	str	r3, [r7, #108]	; 0x6c
        }
        recv_buf[3] = '\0';
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        HAL_printf("response: %s\n", recv_buf);
 8000ac2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	483e      	ldr	r0, [pc, #248]	; (8000bc4 <LORA_cmd+0x2c8>)
 8000aca:	f001 f819 	bl	8001b00 <HAL_printf>
 8000ace:	e069      	b.n	8000ba4 <LORA_cmd+0x2a8>
        // wait_ms(PRINT_TIME);

    }else if(strncmp((char*)in_cmd, "AT+SEND", 7) == 0) {
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	493e      	ldr	r1, [pc, #248]	; (8000bcc <LORA_cmd+0x2d0>)
 8000ad4:	6978      	ldr	r0, [r7, #20]
 8000ad6:	f007 fc6b 	bl	80083b0 <strncmp>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d13d      	bne.n	8000b5c <LORA_cmd+0x260>
        resp_len = readline_LORA(recv_buf, BLOCKING, 0);
 8000ae0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe9f 	bl	800082c <readline_LORA>
 8000aee:	6778      	str	r0, [r7, #116]	; 0x74

        char lora_msg[20];
        int lora_msg_len = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
        int idx=0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	64bb      	str	r3, [r7, #72]	; 0x48
        for(int i=0; i < resp_len; i++){
 8000af8:	2300      	movs	r3, #0
 8000afa:	673b      	str	r3, [r7, #112]	; 0x70
 8000afc:	e029      	b.n	8000b52 <LORA_cmd+0x256>
            if(memcmp(&recv_buf[i], "+OK\r\n", 5) == 0){
 8000afe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b04:	4413      	add	r3, r2
 8000b06:	2205      	movs	r2, #5
 8000b08:	4931      	ldr	r1, [pc, #196]	; (8000bd0 <LORA_cmd+0x2d4>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f006 ff72 	bl	80079f4 <memcmp>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10e      	bne.n	8000b34 <LORA_cmd+0x238>
                memcpy(lora_msg, &recv_buf[i], 5);
 8000b16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b1c:	18d1      	adds	r1, r2, r3
 8000b1e:	f107 0320 	add.w	r3, r7, #32
 8000b22:	2205      	movs	r2, #5
 8000b24:	4618      	mov	r0, r3
 8000b26:	f006 ff75 	bl	8007a14 <memcpy>
                lora_msg_len = 5;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
                ret_val = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	66fb      	str	r3, [r7, #108]	; 0x6c
                break;
 8000b32:	e037      	b.n	8000ba4 <LORA_cmd+0x2a8>

            } else if((memcmp(&recv_buf[i], "+ERR", 4) == 0)) {
 8000b34:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b3a:	4413      	add	r3, r2
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	4925      	ldr	r1, [pc, #148]	; (8000bd4 <LORA_cmd+0x2d8>)
 8000b40:	4618      	mov	r0, r3
 8000b42:	f006 ff57 	bl	80079f4 <memcmp>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d02a      	beq.n	8000ba2 <LORA_cmd+0x2a6>
        for(int i=0; i < resp_len; i++){
 8000b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b4e:	3301      	adds	r3, #1
 8000b50:	673b      	str	r3, [r7, #112]	; 0x70
 8000b52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b56:	429a      	cmp	r2, r3
 8000b58:	dbd1      	blt.n	8000afe <LORA_cmd+0x202>
 8000b5a:	e023      	b.n	8000ba4 <LORA_cmd+0x2a8>
        // in_cmd[8] = '\0';
        // recv_buf[3] = '\0';
        // HAL_printf("%s...%s\n", in_cmd, recv_buf);

    }else{
        resp_len = readline_LORA(recv_buf, BLOCKING, 0);
 8000b5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe61 	bl	800082c <readline_LORA>
 8000b6a:	6778      	str	r0, [r7, #116]	; 0x74
        if((resp_len != -1) && strncmp((char*)recv_buf, response, resp_len) == 0) {
 8000b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b72:	d00c      	beq.n	8000b8e <LORA_cmd+0x292>
 8000b74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000b76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b7a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f007 fc16 	bl	80083b0 <strncmp>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <LORA_cmd+0x292>
            ret_val = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
        }
        recv_buf[3] = '\0';
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        HAL_printf("%s\n", recv_buf);
 8000b94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <LORA_cmd+0x2dc>)
 8000b9c:	f000 ffb0 	bl	8001b00 <HAL_printf>
 8000ba0:	e000      	b.n	8000ba4 <LORA_cmd+0x2a8>
                break; 
 8000ba2:	bf00      	nop
        // wait_ms(PRINT_TIME);
    }

    return ret_val;
 8000ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ba6:	46b5      	mov	sp, r6
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	377c      	adds	r7, #124	; 0x7c
 8000bac:	46bd      	mov	sp, r7
 8000bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bb2:	bf00      	nop
 8000bb4:	08009728 	.word	0x08009728
 8000bb8:	200001b4 	.word	0x200001b4
 8000bbc:	200003c0 	.word	0x200003c0
 8000bc0:	08009138 	.word	0x08009138
 8000bc4:	08009144 	.word	0x08009144
 8000bc8:	08009154 	.word	0x08009154
 8000bcc:	08009160 	.word	0x08009160
 8000bd0:	08009168 	.word	0x08009168
 8000bd4:	08009170 	.word	0x08009170
 8000bd8:	08009178 	.word	0x08009178

08000bdc <config_LORA>:

int config_LORA(UART_HandleTypeDef * lora_huart, UART_HandleTypeDef * serial_huart, uint16_t address) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0a2      	sub	sp, #136	; 0x88
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	4613      	mov	r3, r2
 8000be8:	80fb      	strh	r3, [r7, #6]
    int ret_val= 0, resp_len=0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	677b      	str	r3, [r7, #116]	; 0x74
 8000bee:	2300      	movs	r3, #0
 8000bf0:	673b      	str	r3, [r7, #112]	; 0x70
    char addr_cmd[30];
    char recv_buf[30];
    char ready_buf[30];
    sprintf(addr_cmd, "AT+ADDRESS=%u", address);
 8000bf2:	88fa      	ldrh	r2, [r7, #6]
 8000bf4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bf8:	491e      	ldr	r1, [pc, #120]	; (8000c74 <config_LORA+0x98>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f007 fbb8 	bl	8008370 <siprintf>

    HAL_printf("AT+RESET\n");
 8000c00:	481d      	ldr	r0, [pc, #116]	; (8000c78 <config_LORA+0x9c>)
 8000c02:	f000 ff7d 	bl	8001b00 <HAL_printf>
    HAL_UART_Transmit_IT(lora_huart, "AT+RESET\r\n", 10);
 8000c06:	220a      	movs	r2, #10
 8000c08:	491c      	ldr	r1, [pc, #112]	; (8000c7c <config_LORA+0xa0>)
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f005 fb0e 	bl	800622c <HAL_UART_Transmit_IT>
    HAL_UART_Receive_IT(lora_huart, &lora.byte, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	491b      	ldr	r1, [pc, #108]	; (8000c80 <config_LORA+0xa4>)
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f005 fb77 	bl	8006308 <HAL_UART_Receive_IT>
    wait_ms(1000);
 8000c1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1e:	f000 ff97 	bl	8001b50 <wait_ms>

    HAL_printf("%s\n",addr_cmd);
 8000c22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c26:	4619      	mov	r1, r3
 8000c28:	4816      	ldr	r0, [pc, #88]	; (8000c84 <config_LORA+0xa8>)
 8000c2a:	f000 ff69 	bl	8001b00 <HAL_printf>
    while((ret_val=LORA_cmd(lora_huart, serial_huart, addr_cmd, strlen(addr_cmd), "+OK\r\n", 1000, 1000)) < 0){
 8000c2e:	e002      	b.n	8000c36 <config_LORA+0x5a>
        wait_ms(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f000 ff8d 	bl	8001b50 <wait_ms>
    while((ret_val=LORA_cmd(lora_huart, serial_huart, addr_cmd, strlen(addr_cmd), "+OK\r\n", 1000, 1000)) < 0){
 8000c36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fac8 	bl	80001d0 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c4c:	9102      	str	r1, [sp, #8]
 8000c4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c52:	9101      	str	r1, [sp, #4]
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <config_LORA+0xac>)
 8000c56:	9100      	str	r1, [sp, #0]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff fe4e 	bl	80008fc <LORA_cmd>
 8000c60:	6778      	str	r0, [r7, #116]	; 0x74
 8000c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dbe3      	blt.n	8000c30 <config_LORA+0x54>
    }

        
    return ret_val;
 8000c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3778      	adds	r7, #120	; 0x78
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	0800917c 	.word	0x0800917c
 8000c78:	0800918c 	.word	0x0800918c
 8000c7c:	08009198 	.word	0x08009198
 8000c80:	200002bc 	.word	0x200002bc
 8000c84:	08009178 	.word	0x08009178
 8000c88:	08009168 	.word	0x08009168

08000c8c <init_LORA>:
    HAL_printf("%s\n",sleep_cmd);
    LORA_cmd(&huart1, &huart2, (uint8_t*)sleep_cmd, strlen(sleep_cmd), "+OK\r\n", 100, 100);
    return 0;
}

int init_LORA(UART_HandleTypeDef * lora_huart, UART_HandleTypeDef * serial_huart) {
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b0a9      	sub	sp, #164	; 0xa4
 8000c90:	af04      	add	r7, sp, #16
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
    int ret_val= 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int num_cmds = 4;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    char cmds[4][MAX_CMD_LEN] = { 
 8000ca2:	4a29      	ldr	r2, [pc, #164]	; (8000d48 <init_LORA+0xbc>)
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	4611      	mov	r1, r2
 8000caa:	2278      	movs	r2, #120	; 0x78
 8000cac:	4618      	mov	r0, r3
 8000cae:	f006 feb1 	bl	8007a14 <memcpy>
        "AT+MODE=0",
    };

    // settings NOT stored in EEPROM, required every initialization
    // ret_val |= LORA_cmd(lora_huart, serial_huart, (uint8_t*)"AT+RESET", 8, "+RESET\r\n +READY\r\n", 2000, 100);
    for(int i=0; i<num_cmds; i++){
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000cb8:	e039      	b.n	8000d2e <init_LORA+0xa2>
        HAL_printf("%s\n",cmds[i]);
 8000cba:	f107 010c 	add.w	r1, r7, #12
 8000cbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	1a9b      	subs	r3, r3, r2
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	440b      	add	r3, r1
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481f      	ldr	r0, [pc, #124]	; (8000d4c <init_LORA+0xc0>)
 8000cd0:	f000 ff16 	bl	8001b00 <HAL_printf>
        ret_val |= LORA_cmd(lora_huart, serial_huart, (uint8_t*)cmds[i], strlen(cmds[i]), "+OK\r\n", 100, 100);
 8000cd4:	f107 010c 	add.w	r1, r7, #12
 8000cd8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000cdc:	4613      	mov	r3, r2
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	18cc      	adds	r4, r1, r3
 8000ce6:	f107 010c 	add.w	r1, r7, #12
 8000cea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000cee:	4613      	mov	r3, r2
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	440b      	add	r3, r1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fa69 	bl	80001d0 <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2264      	movs	r2, #100	; 0x64
 8000d04:	9202      	str	r2, [sp, #8]
 8000d06:	2264      	movs	r2, #100	; 0x64
 8000d08:	9201      	str	r2, [sp, #4]
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <init_LORA+0xc4>)
 8000d0c:	9200      	str	r2, [sp, #0]
 8000d0e:	4622      	mov	r2, r4
 8000d10:	6839      	ldr	r1, [r7, #0]
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff fdf2 	bl	80008fc <LORA_cmd>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for(int i=0; i<num_cmds; i++){
 8000d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000d2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d36:	429a      	cmp	r2, r3
 8000d38:	dbbf      	blt.n	8000cba <init_LORA+0x2e>
    }

    return ret_val;
 8000d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3794      	adds	r7, #148	; 0x94
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	080091c4 	.word	0x080091c4
 8000d4c:	08009178 	.word	0x08009178
 8000d50:	08009168 	.word	0x08009168

08000d54 <LORA_send_packet>:

int LORA_send_packet(UART_HandleTypeDef * lora_huart, UART_HandleTypeDef * serial_huart, mixnet_packet_t *pkt) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b098      	sub	sp, #96	; 0x60
 8000d58:	af04      	add	r7, sp, #16
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
    char printf_buf[40];
	uint8_t *packet = malloc(MAX_PKT_SZ);
 8000d60:	4b45      	ldr	r3, [pc, #276]	; (8000e78 <LORA_send_packet+0x124>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f006 fe35 	bl	80079d4 <malloc>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	64bb      	str	r3, [r7, #72]	; 0x48
    char *filler = calloc(NET_PKT_SZ, 1);
 8000d6e:	23b4      	movs	r3, #180	; 0xb4
 8000d70:	2101      	movs	r1, #1
 8000d72:	4618      	mov	r0, r3
 8000d74:	f006 fdd6 	bl	8007924 <calloc>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	647b      	str	r3, [r7, #68]	; 0x44
    for(int i=0; i<NET_PKT_SZ; i++){
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d80:	e007      	b.n	8000d92 <LORA_send_packet+0x3e>
        filler[i] = 'A';
 8000d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d86:	4413      	add	r3, r2
 8000d88:	2241      	movs	r2, #65	; 0x41
 8000d8a:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<NET_PKT_SZ; i++){
 8000d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d8e:	3301      	adds	r3, #1
 8000d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d92:	22b4      	movs	r2, #180	; 0xb4
 8000d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d96:	4293      	cmp	r3, r2
 8000d98:	dbf3      	blt.n	8000d82 <LORA_send_packet+0x2e>
    }

    uint16_t packet_size = pkt->payload_size + sizeof(mixnet_packet_t);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7a9b      	ldrb	r3, [r3, #10]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	330c      	adds	r3, #12
 8000da2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    mixnet_address dst_addr = pkt->dst_address;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	885b      	ldrh	r3, [r3, #2]
 8000daa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    int ret_val= -1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(packet_size > MAX_PAYLOAD_SZ){
 8000db4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000db8:	2bd4      	cmp	r3, #212	; 0xd4
 8000dba:	d905      	bls.n	8000dc8 <LORA_send_packet+0x74>
        HAL_printf("packet too big!\n");
 8000dbc:	482f      	ldr	r0, [pc, #188]	; (8000e7c <LORA_send_packet+0x128>)
 8000dbe:	f000 fe9f 	bl	8001b00 <HAL_printf>
        return -1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e052      	b.n	8000e6e <LORA_send_packet+0x11a>
    }

    // any packet sent must have a payload of less that NET_PKT_SZ bytes
    uint16_t bytes_written = (uint16_t)sprintf((char*)packet,"AT+SEND=%u,%u,", dst_addr, NET_PKT_SZ);
 8000dc8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000dcc:	23b4      	movs	r3, #180	; 0xb4
 8000dce:	492c      	ldr	r1, [pc, #176]	; (8000e80 <LORA_send_packet+0x12c>)
 8000dd0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000dd2:	f007 facd 	bl	8008370 <siprintf>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	877b      	strh	r3, [r7, #58]	; 0x3a
    memcpy(&packet[bytes_written], pkt, packet_size);
 8000dda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000dde:	4413      	add	r3, r2
 8000de0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f006 fe14 	bl	8007a14 <memcpy>
    assert((NET_PKT_SZ - packet_size) > 0);
 8000dec:	22b4      	movs	r2, #180	; 0xb4
 8000dee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dc05      	bgt.n	8000e04 <LORA_send_packet+0xb0>
 8000df8:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <LORA_send_packet+0x130>)
 8000dfa:	4a23      	ldr	r2, [pc, #140]	; (8000e88 <LORA_send_packet+0x134>)
 8000dfc:	21ed      	movs	r1, #237	; 0xed
 8000dfe:	4823      	ldr	r0, [pc, #140]	; (8000e8c <LORA_send_packet+0x138>)
 8000e00:	f006 fd6e 	bl	80078e0 <__assert_func>
    memcpy((char*)(&packet[bytes_written]) + packet_size, filler, (NET_PKT_SZ - packet_size));
 8000e04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e08:	441a      	add	r2, r3
 8000e0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000e0e:	18d0      	adds	r0, r2, r3
 8000e10:	22b4      	movs	r2, #180	; 0xb4
 8000e12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e1c:	f006 fdfa 	bl	8007a14 <memcpy>

    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	481a      	ldr	r0, [pc, #104]	; (8000e90 <LORA_send_packet+0x13c>)
 8000e26:	f003 faeb 	bl	8004400 <HAL_GPIO_WritePin>

    // Blocks until we get a +OK (however long that takes)
    while((ret_val=LORA_cmd(lora_huart, serial_huart, packet, (NET_PKT_SZ + bytes_written), "+OK\r\n", 0, 0)) < 0){
 8000e2a:	e002      	b.n	8000e32 <LORA_send_packet+0xde>
        wait_ms(10);
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f000 fe8f 	bl	8001b50 <wait_ms>
    while((ret_val=LORA_cmd(lora_huart, serial_huart, packet, (NET_PKT_SZ + bytes_written), "+OK\r\n", 0, 0)) < 0){
 8000e32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	23b4      	movs	r3, #180	; 0xb4
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2200      	movs	r2, #0
 8000e40:	9202      	str	r2, [sp, #8]
 8000e42:	2200      	movs	r2, #0
 8000e44:	9201      	str	r2, [sp, #4]
 8000e46:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <LORA_send_packet+0x140>)
 8000e48:	9200      	str	r2, [sp, #0]
 8000e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f7ff fd54 	bl	80008fc <LORA_cmd>
 8000e54:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	dbe7      	blt.n	8000e2c <LORA_send_packet+0xd8>
    }

    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <LORA_send_packet+0x13c>)
 8000e62:	f003 facd 	bl	8004400 <HAL_GPIO_WritePin>

    free(packet);
 8000e66:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000e68:	f006 fdbc 	bl	80079e4 <free>
    return ret_val;
 8000e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3750      	adds	r7, #80	; 0x50
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	08009728 	.word	0x08009728
 8000e7c:	0800923c 	.word	0x0800923c
 8000e80:	08009250 	.word	0x08009250
 8000e84:	08009260 	.word	0x08009260
 8000e88:	08009710 	.word	0x08009710
 8000e8c:	08009280 	.word	0x08009280
 8000e90:	48000400 	.word	0x48000400
 8000e94:	08009168 	.word	0x08009168

08000e98 <lora_recv_data>:


// can handle channel errors here, they are detected and 
// packets are re-transmitted in all phases after STP; for STP, we do not recover from errors such as CRC errors
char *lora_recv_data(UART_HandleTypeDef * lora_huart, UART_HandleTypeDef * serial_huart, 
                    uint64_t start_time, uint64_t timeout, recv_mode_t recv_mode, err_code_t *err_code) {
 8000e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e9c:	b0a1      	sub	sp, #132	; 0x84
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6178      	str	r0, [r7, #20]
 8000ea2:	6139      	str	r1, [r7, #16]
 8000ea4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000ea8:	466b      	mov	r3, sp
 8000eaa:	461e      	mov	r6, r3
    char recv_buf[MAX_PKT_SZ];
 8000eac:	4b8b      	ldr	r3, [pc, #556]	; (80010dc <lora_recv_data+0x244>)
 8000eae:	6819      	ldr	r1, [r3, #0]
 8000eb0:	1e4b      	subs	r3, r1, #1
 8000eb2:	673b      	str	r3, [r7, #112]	; 0x70
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603a      	str	r2, [r7, #0]
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	00c3      	lsls	r3, r0, #3
 8000ec8:	6838      	ldr	r0, [r7, #0]
 8000eca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ece:	6838      	ldr	r0, [r7, #0]
 8000ed0:	00c2      	lsls	r2, r0, #3
 8000ed2:	460a      	mov	r2, r1
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4692      	mov	sl, r2
 8000ed8:	469b      	mov	fp, r3
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000ee6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000eea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000eee:	460b      	mov	r3, r1
 8000ef0:	3307      	adds	r3, #7
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	ebad 0d03 	sub.w	sp, sp, r3
 8000efa:	466b      	mov	r3, sp
 8000efc:	3300      	adds	r3, #0
 8000efe:	66fb      	str	r3, [r7, #108]	; 0x6c
    char lora_msg[MAX_PKT_SZ];
 8000f00:	4b76      	ldr	r3, [pc, #472]	; (80010dc <lora_recv_data+0x244>)
 8000f02:	6819      	ldr	r1, [r3, #0]
 8000f04:	1e4b      	subs	r3, r1, #1
 8000f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f08:	460a      	mov	r2, r1
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	4690      	mov	r8, r2
 8000f0e:	4699      	mov	r9, r3
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f24:	460a      	mov	r2, r1
 8000f26:	2300      	movs	r3, #0
 8000f28:	4614      	mov	r4, r2
 8000f2a:	461d      	mov	r5, r3
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	00eb      	lsls	r3, r5, #3
 8000f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f3a:	00e2      	lsls	r2, r4, #3
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	3307      	adds	r3, #7
 8000f40:	08db      	lsrs	r3, r3, #3
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	ebad 0d03 	sub.w	sp, sp, r3
 8000f48:	466b      	mov	r3, sp
 8000f4a:	3300      	adds	r3, #0
 8000f4c:	667b      	str	r3, [r7, #100]	; 0x64
    int lora_msg_len = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	663b      	str	r3, [r7, #96]	; 0x60
    int recvd_msg_size = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	65fb      	str	r3, [r7, #92]	; 0x5c
    int elapsed_time = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	65bb      	str	r3, [r7, #88]	; 0x58

    int packet_size;
    char printf_buf[40];

    int num_tok=0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	677b      	str	r3, [r7, #116]	; 0x74
    char *packet = NULL; 
 8000f5e:	2300      	movs	r3, #0
 8000f60:	67bb      	str	r3, [r7, #120]	; 0x78
    *err_code = PKT_ERROR;
 8000f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
    (void)start_time;

    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	485c      	ldr	r0, [pc, #368]	; (80010e0 <lora_recv_data+0x248>)
 8000f70:	f003 fa46 	bl	8004400 <HAL_GPIO_WritePin>

    // must check that a \r\n are received at the end of +RCV=...\r\n
    int lora_pkt_msg_len = 20 + NET_PKT_SZ;
 8000f74:	23b4      	movs	r3, #180	; 0xb4
 8000f76:	3314      	adds	r3, #20
 8000f78:	657b      	str	r3, [r7, #84]	; 0x54
    if((recvd_msg_size = readline_LORA(recv_buf, recv_mode, timeout)) < 0){
 8000f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000f7e:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8000f82:	4619      	mov	r1, r3
 8000f84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000f86:	f7ff fc51 	bl	800082c <readline_LORA>
 8000f8a:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da0a      	bge.n	8000fa8 <lora_recv_data+0x110>
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2101      	movs	r1, #1
 8000f96:	4852      	ldr	r0, [pc, #328]	; (80010e0 <lora_recv_data+0x248>)
 8000f98:	f003 fa32 	bl	8004400 <HAL_GPIO_WritePin>
        *err_code = NO_ERROR;
 8000f9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
        return NULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e093      	b.n	80010d0 <lora_recv_data+0x238>
    }

    for(int i=0; i < recvd_msg_size; i++){
 8000fa8:	2300      	movs	r3, #0
 8000faa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fac:	e042      	b.n	8001034 <lora_recv_data+0x19c>
        if(memcmp(&recv_buf[i], "+RCV", 4) == 0){
 8000fae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000fb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb2:	4413      	add	r3, r2
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	494b      	ldr	r1, [pc, #300]	; (80010e4 <lora_recv_data+0x24c>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fd1b 	bl	80079f4 <memcmp>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10a      	bne.n	8000fda <lora_recv_data+0x142>
            memcpy(lora_msg, &recv_buf[i], lora_pkt_msg_len);
 8000fc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fc8:	4413      	add	r3, r2
 8000fca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000fcc:	4619      	mov	r1, r3
 8000fce:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000fd0:	f006 fd20 	bl	8007a14 <memcpy>
            lora_msg_len = lora_pkt_msg_len;
 8000fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd6:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 8000fd8:	e030      	b.n	800103c <lora_recv_data+0x1a4>

        } else if((memcmp(&recv_buf[i], "+ERR", 4) == 0)) {
 8000fda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fde:	4413      	add	r3, r2
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	4941      	ldr	r1, [pc, #260]	; (80010e8 <lora_recv_data+0x250>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f006 fd05 	bl	80079f4 <memcmp>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d11e      	bne.n	800102e <lora_recv_data+0x196>
            HAL_printf("%s",recv_buf);
 8000ff0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000ff2:	483e      	ldr	r0, [pc, #248]	; (80010ec <lora_recv_data+0x254>)
 8000ff4:	f000 fd84 	bl	8001b00 <HAL_printf>
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4838      	ldr	r0, [pc, #224]	; (80010e0 <lora_recv_data+0x248>)
 8000ffe:	f003 f9ff 	bl	8004400 <HAL_GPIO_WritePin>

            if(memcmp(&recv_buf[i], "+ERR=12", 7) == 0){
 8001002:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001006:	4413      	add	r3, r2
 8001008:	2207      	movs	r2, #7
 800100a:	4939      	ldr	r1, [pc, #228]	; (80010f0 <lora_recv_data+0x258>)
 800100c:	4618      	mov	r0, r3
 800100e:	f006 fcf1 	bl	80079f4 <memcmp>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d104      	bne.n	8001022 <lora_recv_data+0x18a>
                *err_code = PKT_ERROR_CRC;
 8001018:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800101c:	2202      	movs	r2, #2
 800101e:	701a      	strb	r2, [r3, #0]
 8001020:	e003      	b.n	800102a <lora_recv_data+0x192>
            }else{
                *err_code = PKT_ERROR_UNK;
 8001022:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001026:	2203      	movs	r2, #3
 8001028:	701a      	strb	r2, [r3, #0]
            }

            return NULL;
 800102a:	2300      	movs	r3, #0
 800102c:	e050      	b.n	80010d0 <lora_recv_data+0x238>
    for(int i=0; i < recvd_msg_size; i++){
 800102e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001030:	3301      	adds	r3, #1
 8001032:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001034:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001038:	429a      	cmp	r2, r3
 800103a:	dbb8      	blt.n	8000fae <lora_recv_data+0x116>
        }
    }

    // print_bytes(lora_msg, lora_msg_len);

    if((strncmp((char*)lora_msg, "+RCV", 4) == 0)){
 800103c:	2204      	movs	r2, #4
 800103e:	4929      	ldr	r1, [pc, #164]	; (80010e4 <lora_recv_data+0x24c>)
 8001040:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001042:	f007 f9b5 	bl	80083b0 <strncmp>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d13c      	bne.n	80010c6 <lora_recv_data+0x22e>
        char *lora_ele;
        char *lora_ele_remainder = (char*)lora_msg;
 800104c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800104e:	61fb      	str	r3, [r7, #28]
        packet = malloc(sizeof(char) * MAX_PKT_SZ);
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <lora_recv_data+0x244>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f006 fcbd 	bl	80079d4 <malloc>
 800105a:	4603      	mov	r3, r0
 800105c:	67bb      	str	r3, [r7, #120]	; 0x78
        while((lora_ele = strtok_r(lora_ele_remainder , ",", &lora_ele_remainder))) {
 800105e:	e00a      	b.n	8001076 <lora_recv_data+0x1de>

            if(num_tok == 1) {
 8001060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001062:	2b01      	cmp	r3, #1
 8001064:	d104      	bne.n	8001070 <lora_recv_data+0x1d8>
                packet_size = atoi(lora_ele);
 8001066:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001068:	f006 fc58 	bl	800791c <atoi>
 800106c:	64f8      	str	r0, [r7, #76]	; 0x4c
                break;
 800106e:	e00d      	b.n	800108c <lora_recv_data+0x1f4>
            }

            num_tok++;    
 8001070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001072:	3301      	adds	r3, #1
 8001074:	677b      	str	r3, [r7, #116]	; 0x74
        while((lora_ele = strtok_r(lora_ele_remainder , ",", &lora_ele_remainder))) {
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f107 021c 	add.w	r2, r7, #28
 800107c:	491d      	ldr	r1, [pc, #116]	; (80010f4 <lora_recv_data+0x25c>)
 800107e:	4618      	mov	r0, r3
 8001080:	f007 f9d2 	bl	8008428 <strtok_r>
 8001084:	6538      	str	r0, [r7, #80]	; 0x50
 8001086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e9      	bne.n	8001060 <lora_recv_data+0x1c8>
        }
        (void)packet_size;

        // copy the header
        mixnet_packet_t *pkt;
        memcpy(packet, lora_ele_remainder, sizeof(mixnet_packet_t));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	220c      	movs	r2, #12
 8001090:	4619      	mov	r1, r3
 8001092:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001094:	f006 fcbe 	bl	8007a14 <memcpy>
        pkt = (mixnet_packet_t*)packet;
 8001098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800109a:	64bb      	str	r3, [r7, #72]	; 0x48

        // copy payload size bytes
        memcpy((char*)packet + sizeof(mixnet_packet_t), (char*)lora_ele_remainder + sizeof(mixnet_packet_t), pkt->payload_size);
 800109c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800109e:	f103 000c 	add.w	r0, r3, #12
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	f103 010c 	add.w	r1, r3, #12
 80010a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010aa:	7a9b      	ldrb	r3, [r3, #10]
 80010ac:	461a      	mov	r2, r3
 80010ae:	f006 fcb1 	bl	8007a14 <memcpy>

        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2101      	movs	r1, #1
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <lora_recv_data+0x248>)
 80010b8:	f003 f9a2 	bl	8004400 <HAL_GPIO_WritePin>

        *err_code = NO_ERROR;
 80010bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e003      	b.n	80010ce <lora_recv_data+0x236>
        //     *err_code = PKT_ERROR;
        //     return NULL;
        // }
        /*TESTING end */
    }else{
        HAL_printf("received something else: %s\n", recv_buf);
 80010c6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80010c8:	480b      	ldr	r0, [pc, #44]	; (80010f8 <lora_recv_data+0x260>)
 80010ca:	f000 fd19 	bl	8001b00 <HAL_printf>
    } 

    return packet;
 80010ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010d0:	46b5      	mov	sp, r6
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3784      	adds	r7, #132	; 0x84
 80010d6:	46bd      	mov	sp, r7
 80010d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010dc:	08009728 	.word	0x08009728
 80010e0:	48000400 	.word	0x48000400
 80010e4:	08009294 	.word	0x08009294
 80010e8:	08009170 	.word	0x08009170
 80010ec:	08009134 	.word	0x08009134
 80010f0:	0800929c 	.word	0x0800929c
 80010f4:	080092a4 	.word	0x080092a4
 80010f8:	080092a8 	.word	0x080092a8

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0be      	sub	sp, #248	; 0xf8
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f001 fe50 	bl	8002da6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f000 f9fb 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f000 fbf3 	bl	80018f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800110e:	f000 fb73 	bl	80017f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001112:	f000 fbbf 	bl	8001894 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001116:	f000 faf9 	bl	800170c <MX_TIM2_Init>
  MX_RTC_Init();
 800111a:	f000 fabf 	bl	800169c <MX_RTC_Init>
  MX_TIM16_Init();
 800111e:	f000 fb43 	bl	80017a8 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001122:	f000 fa45 	bl	80015b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    char printf_buf[80];
    int err=0;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    HAL_TIM_Base_Start_IT(&htim2);
 800112c:	48d0      	ldr	r0, [pc, #832]	; (8001470 <main+0x374>)
 800112e:	f004 fc49 	bl	80059c4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim16); 
 8001132:	48d0      	ldr	r0, [pc, #832]	; (8001474 <main+0x378>)
 8001134:	f004 fc46 	bl	80059c4 <HAL_TIM_Base_Start_IT>
    uint32_t start_time, end_time, elapsed_time;
    srand(time(NULL));
 8001138:	2000      	movs	r0, #0
 800113a:	f007 fa05 	bl	8008548 <time>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4613      	mov	r3, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f007 f8d5 	bl	80082f4 <srand>

    // configure initial mesh topology
    mixnet_node_config_t config;
    config.node_addr = NODE_ADDR;
 800114a:	2302      	movs	r3, #2
 800114c:	b29b      	uxth	r3, r3
 800114e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    set_topology(&config, NUM_NODES, NETWORK_TOPOLOGY);
 8001152:	2309      	movs	r3, #9
 8001154:	b299      	uxth	r1, r3
 8001156:	2204      	movs	r2, #4
 8001158:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800115c:	4618      	mov	r0, r3
 800115e:	f001 f80f 	bl	8002180 <set_topology>
    
    /* STP variables */
    int initial_stp_timeout = config.node_addr * STP_TS; // initial timeout to receive updates before transmitting your STP advertisement
 8001162:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001166:	461a      	mov	r2, r3
 8001168:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    int stp_timeout, stp_remaining_time;
    int stp_iter = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    stp_route_t stp_route_db;
    stp_route_db.root_address = config.node_addr;
 800117a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800117e:	86bb      	strh	r3, [r7, #52]	; 0x34
    stp_route_db.path_length = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	86fb      	strh	r3, [r7, #54]	; 0x36
    stp_route_db.next_hop_address = config.node_addr;
 8001184:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001188:	873b      	strh	r3, [r7, #56]	; 0x38
    stp_route_db.stp_ports = calloc(config.num_neighbors, 1);
 800118a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800118e:	2101      	movs	r1, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f006 fbc7 	bl	8007924 <calloc>
 8001196:	4603      	mov	r3, r0
 8001198:	643b      	str	r3, [r7, #64]	; 0x40
    activate_all_ports(stp_route_db.stp_ports, config.num_neighbors);
 800119a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800119c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 f88a 	bl	80022bc <activate_all_ports>
    stp_route_db.stp_parent_addr = -1;
 80011a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ac:	877b      	strh	r3, [r7, #58]	; 0x3a
    stp_route_db.stp_parent_path_length = -1;
 80011ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    mixnet_packet_stp_t *recvd_stp_pkt;
    bool stp_txen = false;              // whether the node will transmit in the half-cycle of the STP
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    uint8_t *recvd_from_ports = calloc(config.num_neighbors, 1);
 80011ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80011be:	2101      	movs	r1, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f006 fbaf 	bl	8007924 <calloc>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    /* LSA variables */
    uint8_t parent_port = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    uint8_t num_tree_children = 0; 
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
    mixnet_packet_lsa_t *recvd_lsa_pkt;
    graph_t *net_graph = graph_init();
 80011d8:	f7ff f9d4 	bl	8000584 <graph_init>
 80011dc:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
    (void)graph_add_neighbors(net_graph, config.node_addr, config.neighbor_addrs, config.num_neighbors);
 80011e0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80011e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80011ea:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80011ee:	f7ff f9df 	bl	80005b0 <graph_add_neighbors>

    /* SCH variables */
    schedule_t node_sch;
    data_sch_config_t sch_config;
    packet_sch_t *recvd_sch_pkt;
    init_sch(&node_sch);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fa68 	bl	80026cc <init_sch>
    init_sch_config(&sch_config);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fcf7 	bl	8001bf4 <init_sch_config>
    uint64_t delay_to_phase4 = 0;
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

    /* DATA variables */
    data_config_t sensor_db;
    packet_data_t *recvd_data_pkt;
    init_sensor_db(&config, &sensor_db);
 8001212:	1d3a      	adds	r2, r7, #4
 8001214:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fd08 	bl	8001c30 <init_sensor_db>

    HAL_printf("[Node %d]\n", config.node_addr);
 8001220:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001224:	4619      	mov	r1, r3
 8001226:	4894      	ldr	r0, [pc, #592]	; (8001478 <main+0x37c>)
 8001228:	f000 fc6a 	bl	8001b00 <HAL_printf>

    // initialize transcievers
    start_time = tim2_tick_count;
 800122c:	4b93      	ldr	r3, [pc, #588]	; (800147c <main+0x380>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2101      	movs	r1, #1
 8001238:	4891      	ldr	r0, [pc, #580]	; (8001480 <main+0x384>)
 800123a:	f003 f8e1 	bl	8004400 <HAL_GPIO_WritePin>
    #if RESET_NODE
    if((err=config_LORA(&huart1, &huart2, config.node_addr))<0){
 800123e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001242:	461a      	mov	r2, r3
 8001244:	498f      	ldr	r1, [pc, #572]	; (8001484 <main+0x388>)
 8001246:	4890      	ldr	r0, [pc, #576]	; (8001488 <main+0x38c>)
 8001248:	f7ff fcc8 	bl	8000bdc <config_LORA>
 800124c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8001250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001254:	2b00      	cmp	r3, #0
 8001256:	da05      	bge.n	8001264 <main+0x168>
        HAL_printf("Configuration error\n");
 8001258:	488c      	ldr	r0, [pc, #560]	; (800148c <main+0x390>)
 800125a:	f000 fc51 	bl	8001b00 <HAL_printf>
        exit(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f006 fb6e 	bl	8007940 <exit>
    }    
    HAL_printf("[configuration done]\n");
 8001264:	488a      	ldr	r0, [pc, #552]	; (8001490 <main+0x394>)
 8001266:	f000 fc4b 	bl	8001b00 <HAL_printf>
    wait_ms(PRINT_TIME);
 800126a:	2328      	movs	r3, #40	; 0x28
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fc6f 	bl	8001b50 <wait_ms>
    #endif
    wait_ms(PRINT_TIME);
 8001272:	2328      	movs	r3, #40	; 0x28
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fc6b 	bl	8001b50 <wait_ms>
    if((err=init_LORA(&huart1, &huart2))<0){
 800127a:	4982      	ldr	r1, [pc, #520]	; (8001484 <main+0x388>)
 800127c:	4882      	ldr	r0, [pc, #520]	; (8001488 <main+0x38c>)
 800127e:	f7ff fd05 	bl	8000c8c <init_LORA>
 8001282:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8001286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800128a:	2b00      	cmp	r3, #0
 800128c:	da05      	bge.n	800129a <main+0x19e>
        HAL_printf("Initialization error\n");
 800128e:	4881      	ldr	r0, [pc, #516]	; (8001494 <main+0x398>)
 8001290:	f000 fc36 	bl	8001b00 <HAL_printf>
        exit(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f006 fb53 	bl	8007940 <exit>
    }
    end_time = tim2_tick_count;
 800129a:	4b78      	ldr	r3, [pc, #480]	; (800147c <main+0x380>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_printf("[initialization done]\n");
 80012a2:	487d      	ldr	r0, [pc, #500]	; (8001498 <main+0x39c>)
 80012a4:	f000 fc2c 	bl	8001b00 <HAL_printf>
    wait_ms(PRINT_TIME);
 80012a8:	2328      	movs	r3, #40	; 0x28
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fc50 	bl	8001b50 <wait_ms>
    HAL_printf("time: %u\n", tim2_tick_count);
 80012b0:	4b72      	ldr	r3, [pc, #456]	; (800147c <main+0x380>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	4879      	ldr	r0, [pc, #484]	; (800149c <main+0x3a0>)
 80012b8:	f000 fc22 	bl	8001b00 <HAL_printf>
    wait_ms(PRINT_TIME);
 80012bc:	2328      	movs	r3, #40	; 0x28
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fc46 	bl	8001b50 <wait_ms>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2101      	movs	r1, #1
 80012c8:	486d      	ldr	r0, [pc, #436]	; (8001480 <main+0x384>)
 80012ca:	f003 f899 	bl	8004400 <HAL_GPIO_WritePin>

    char *raw_packet;
    mixnet_packet_t *recvd_packet;
    int recv_port = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    err_code_t err_code;
    bool goto_next_proto_iter = false;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    
    /* Testing reliable data transfer, and channel conditions */
    #if TEST_MODEM
    int iter = 1;
 80012da:	2301      	movs	r3, #1
 80012dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    start_time = tim2_tick_count;
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <main+0x380>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    while(1){
        if(config.node_addr == 2) {
 80012e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d151      	bne.n	8001394 <main+0x298>
            HAL_printf("[%d] Receiving 3 packets..\n", config.node_addr);
 80012f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80012f4:	4619      	mov	r1, r3
 80012f6:	486a      	ldr	r0, [pc, #424]	; (80014a0 <main+0x3a4>)
 80012f8:	f000 fc02 	bl	8001b00 <HAL_printf>
            for(int i=0; i<3; i++) {
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001302:	e026      	b.n	8001352 <main+0x256>
                raw_packet = rdt_recv_pkt(&huart1, &huart2, &config);
 8001304:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001308:	461a      	mov	r2, r3
 800130a:	495e      	ldr	r1, [pc, #376]	; (8001484 <main+0x388>)
 800130c:	485e      	ldr	r0, [pc, #376]	; (8001488 <main+0x38c>)
 800130e:	f001 f903 	bl	8002518 <rdt_recv_pkt>
 8001312:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
                assert(raw_packet != NULL);
 8001316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <main+0x22e>
 800131e:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <main+0x3a8>)
 8001320:	4a61      	ldr	r2, [pc, #388]	; (80014a8 <main+0x3ac>)
 8001322:	21f7      	movs	r1, #247	; 0xf7
 8001324:	4861      	ldr	r0, [pc, #388]	; (80014ac <main+0x3b0>)
 8001326:	f006 fadb 	bl	80078e0 <__assert_func>
                recvd_packet = (mixnet_packet_t*)raw_packet;
 800132a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800132e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                HAL_printf("Application received packet [SEQ %u] from %u\n", recvd_packet->seqnum, recvd_packet->src_address);
 8001332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001336:	88db      	ldrh	r3, [r3, #6]
 8001338:	4619      	mov	r1, r3
 800133a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	485b      	ldr	r0, [pc, #364]	; (80014b0 <main+0x3b4>)
 8001344:	f000 fbdc 	bl	8001b00 <HAL_printf>
            for(int i=0; i<3; i++) {
 8001348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800134c:	3301      	adds	r3, #1
 800134e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001356:	2b02      	cmp	r3, #2
 8001358:	ddd4      	ble.n	8001304 <main+0x208>
            }

            wait_ms(1000);
 800135a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800135e:	f000 fbf7 	bl	8001b50 <wait_ms>

            HAL_printf("[%d] Sending 3 packets...\n", config.node_addr);
 8001362:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001366:	4619      	mov	r1, r3
 8001368:	4852      	ldr	r0, [pc, #328]	; (80014b4 <main+0x3b8>)
 800136a:	f000 fbc9 	bl	8001b00 <HAL_printf>
            for(int i=0; i<3; i++){
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001374:	e00a      	b.n	800138c <main+0x290>
                send_lsa_req(&config, 1);
 8001376:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800137a:	2101      	movs	r1, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fbff 	bl	8001b80 <send_lsa_req>
            for(int i=0; i<3; i++){
 8001382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001386:	3301      	adds	r3, #1
 8001388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800138c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001390:	2b02      	cmp	r3, #2
 8001392:	ddf0      	ble.n	8001376 <main+0x27a>
            }
        }

        if(config.node_addr == 1) {
 8001394:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001398:	2b01      	cmp	r3, #1
 800139a:	d152      	bne.n	8001442 <main+0x346>
            HAL_printf("[%d] Sending 3 packets...\n", config.node_addr);
 800139c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80013a0:	4619      	mov	r1, r3
 80013a2:	4844      	ldr	r0, [pc, #272]	; (80014b4 <main+0x3b8>)
 80013a4:	f000 fbac 	bl	8001b00 <HAL_printf>
            for(int i=0; i<3; i++){
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80013ae:	e00a      	b.n	80013c6 <main+0x2ca>
                send_lsa_req(&config, 2);
 80013b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013b4:	2102      	movs	r1, #2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fbe2 	bl	8001b80 <send_lsa_req>
            for(int i=0; i<3; i++){
 80013bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80013c0:	3301      	adds	r3, #1
 80013c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80013c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	ddf0      	ble.n	80013b0 <main+0x2b4>
            }

            wait_ms(1000);
 80013ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d2:	f000 fbbd 	bl	8001b50 <wait_ms>

            HAL_printf("[%d] Receiving 3 packets..\n", config.node_addr);
 80013d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80013da:	4619      	mov	r1, r3
 80013dc:	4830      	ldr	r0, [pc, #192]	; (80014a0 <main+0x3a4>)
 80013de:	f000 fb8f 	bl	8001b00 <HAL_printf>
            for(int i=0; i<3; i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80013e8:	e027      	b.n	800143a <main+0x33e>
                raw_packet = rdt_recv_pkt(&huart1, &huart2, &config);
 80013ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013ee:	461a      	mov	r2, r3
 80013f0:	4924      	ldr	r1, [pc, #144]	; (8001484 <main+0x388>)
 80013f2:	4825      	ldr	r0, [pc, #148]	; (8001488 <main+0x38c>)
 80013f4:	f001 f890 	bl	8002518 <rdt_recv_pkt>
 80013f8:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
                assert(raw_packet != NULL);
 80013fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d106      	bne.n	8001412 <main+0x316>
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <main+0x3a8>)
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <main+0x3ac>)
 8001408:	f240 110f 	movw	r1, #271	; 0x10f
 800140c:	4827      	ldr	r0, [pc, #156]	; (80014ac <main+0x3b0>)
 800140e:	f006 fa67 	bl	80078e0 <__assert_func>
                recvd_packet = (mixnet_packet_t*)raw_packet;
 8001412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                HAL_printf("Application received packet [SEQ %u] from %u\n", recvd_packet->seqnum, recvd_packet->src_address);
 800141a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800141e:	88db      	ldrh	r3, [r3, #6]
 8001420:	4619      	mov	r1, r3
 8001422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4821      	ldr	r0, [pc, #132]	; (80014b0 <main+0x3b4>)
 800142c:	f000 fb68 	bl	8001b00 <HAL_printf>
            for(int i=0; i<3; i++) {
 8001430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001434:	3301      	adds	r3, #1
 8001436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800143a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800143e:	2b02      	cmp	r3, #2
 8001440:	ddd3      	ble.n	80013ea <main+0x2ee>
            }
        }

        elapsed_time = tim2_tick_count - start_time;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <main+0x380>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        HAL_printf("[%d] (%u) cycle done in %lu ms\n\n", iter++, tim2_tick_count, elapsed_time);
 8001450:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001454:	1c4b      	adds	r3, r1, #1
 8001456:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <main+0x380>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001462:	4815      	ldr	r0, [pc, #84]	; (80014b8 <main+0x3bc>)
 8001464:	f000 fb4c 	bl	8001b00 <HAL_printf>

        for(int i=0; i<iter; i++){
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800146e:	e038      	b.n	80014e2 <main+0x3e6>
 8001470:	2000011c 	.word	0x2000011c
 8001474:	20000168 	.word	0x20000168
 8001478:	080092c8 	.word	0x080092c8
 800147c:	200003c0 	.word	0x200003c0
 8001480:	48000400 	.word	0x48000400
 8001484:	20000238 	.word	0x20000238
 8001488:	200001b4 	.word	0x200001b4
 800148c:	080092d4 	.word	0x080092d4
 8001490:	080092ec 	.word	0x080092ec
 8001494:	08009304 	.word	0x08009304
 8001498:	0800931c 	.word	0x0800931c
 800149c:	08009334 	.word	0x08009334
 80014a0:	08009340 	.word	0x08009340
 80014a4:	0800935c 	.word	0x0800935c
 80014a8:	08009734 	.word	0x08009734
 80014ac:	08009370 	.word	0x08009370
 80014b0:	08009384 	.word	0x08009384
 80014b4:	080093b4 	.word	0x080093b4
 80014b8:	080093d0 	.word	0x080093d0
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	2108      	movs	r1, #8
 80014c0:	480e      	ldr	r0, [pc, #56]	; (80014fc <main+0x400>)
 80014c2:	f002 ff9d 	bl	8004400 <HAL_GPIO_WritePin>
            wait_ms(500);
 80014c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ca:	f000 fb41 	bl	8001b50 <wait_ms>
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2108      	movs	r1, #8
 80014d2:	480a      	ldr	r0, [pc, #40]	; (80014fc <main+0x400>)
 80014d4:	f002 ff94 	bl	8004400 <HAL_GPIO_WritePin>
        for(int i=0; i<iter; i++){
 80014d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014dc:	3301      	adds	r3, #1
 80014de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80014e2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80014e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dbe6      	blt.n	80014bc <main+0x3c0>
        }

        iter++;
 80014ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80014f2:	3301      	adds	r3, #1
 80014f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        if(config.node_addr == 2) {
 80014f8:	e6f6      	b.n	80012e8 <main+0x1ec>
 80014fa:	bf00      	nop
 80014fc:	48000400 	.word	0x48000400

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b096      	sub	sp, #88	; 0x58
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	2244      	movs	r2, #68	; 0x44
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f006 fa8e 	bl	8007a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	463b      	mov	r3, r7
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001522:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001526:	f002 ffa1 	bl	800446c <HAL_PWREx_ControlVoltageScaling>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001530:	f000 fae0 	bl	8001af4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001534:	f002 ff7c 	bl	8004430 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <SystemClock_Config+0xac>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <SystemClock_Config+0xac>)
 8001540:	f023 0318 	bic.w	r3, r3, #24
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001548:	231c      	movs	r3, #28
 800154a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800154c:	2301      	movs	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001550:	2301      	movs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001554:	2301      	movs	r3, #1
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800155c:	23a0      	movs	r3, #160	; 0xa0
 800155e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001560:	2300      	movs	r3, #0
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4618      	mov	r0, r3
 800156a:	f002 ffd5 	bl	8004518 <HAL_RCC_OscConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001574:	f000 fabe 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001578:	230f      	movs	r3, #15
 800157a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	2101      	movs	r1, #1
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fc23 	bl	8004ddc <HAL_RCC_ClockConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800159c:	f000 faaa 	bl	8001af4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015a0:	f003 ffc6 	bl	8005530 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015a4:	bf00      	nop
 80015a6:	3758      	adds	r7, #88	; 0x58
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000

080015b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015d2:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <MX_ADC1_Init+0xe0>)
 80015d4:	4a2f      	ldr	r2, [pc, #188]	; (8001694 <MX_ADC1_Init+0xe4>)
 80015d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <MX_ADC1_Init+0xe0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015de:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_ADC1_Init+0xe0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <MX_ADC1_Init+0xe0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015ea:	4b29      	ldr	r3, [pc, #164]	; (8001690 <MX_ADC1_Init+0xe0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <MX_ADC1_Init+0xe0>)
 80015f2:	2204      	movs	r2, #4
 80015f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_ADC1_Init+0xe0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <MX_ADC1_Init+0xe0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <MX_ADC1_Init+0xe0>)
 8001604:	2201      	movs	r2, #1
 8001606:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MX_ADC1_Init+0xe0>)
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_ADC1_Init+0xe0>)
 8001612:	2200      	movs	r2, #0
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_ADC1_Init+0xe0>)
 8001618:	2200      	movs	r2, #0
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_ADC1_Init+0xe0>)
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_ADC1_Init+0xe0>)
 8001626:	2200      	movs	r2, #0
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_ADC1_Init+0xe0>)
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001632:	4817      	ldr	r0, [pc, #92]	; (8001690 <MX_ADC1_Init+0xe0>)
 8001634:	f001 fdcc 	bl	80031d0 <HAL_ADC_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800163e:	f000 fa59 	bl	8001af4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <MX_ADC1_Init+0xe0>)
 800164e:	f002 fb31 	bl	8003cb4 <HAL_ADCEx_MultiModeConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001658:	f000 fa4c 	bl	8001af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_ADC1_Init+0xe8>)
 800165e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001660:	2306      	movs	r3, #6
 8001662:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001668:	237f      	movs	r3, #127	; 0x7f
 800166a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800166c:	2304      	movs	r3, #4
 800166e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_ADC1_Init+0xe0>)
 800167a:	f001 fef9 	bl	8003470 <HAL_ADC_ConfigChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001684:	f000 fa36 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000008c 	.word	0x2000008c
 8001694:	50040000 	.word	0x50040000
 8001698:	19200040 	.word	0x19200040

0800169c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_RTC_Init+0x68>)
 80016a2:	4a19      	ldr	r2, [pc, #100]	; (8001708 <MX_RTC_Init+0x6c>)
 80016a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_RTC_Init+0x68>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <MX_RTC_Init+0x68>)
 80016ae:	227f      	movs	r2, #127	; 0x7f
 80016b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_RTC_Init+0x68>)
 80016b4:	22ff      	movs	r2, #255	; 0xff
 80016b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_RTC_Init+0x68>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_RTC_Init+0x68>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_RTC_Init+0x68>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_RTC_Init+0x68>)
 80016cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_RTC_Init+0x68>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016d8:	480a      	ldr	r0, [pc, #40]	; (8001704 <MX_RTC_Init+0x68>)
 80016da:	f003 ff39 	bl	8005550 <HAL_RTC_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80016e4:	f000 fa06 	bl	8001af4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 80016e8:	2300      	movs	r3, #0
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_RTC_Init+0x68>)
 80016f0:	f004 f84a 	bl	8005788 <HAL_RTCEx_SetWakeUpTimer_IT>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80016fa:	f000 f9fb 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000f0 	.word	0x200000f0
 8001708:	40002800 	.word	0x40002800

0800170c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_TIM2_Init+0x98>)
 800172c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32 - 1;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001734:	221f      	movs	r2, #31
 8001736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_TIM2_Init+0x98>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001740:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_TIM2_Init+0x98>)
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001752:	4814      	ldr	r0, [pc, #80]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001754:	f004 f8de 	bl	8005914 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800175e:	f000 f9c9 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4619      	mov	r1, r3
 800176e:	480d      	ldr	r0, [pc, #52]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001770:	f004 fa9b 	bl	8005caa <HAL_TIM_ConfigClockSource>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800177a:	f000 f9bb 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_TIM2_Init+0x98>)
 800178c:	f004 fc7c 	bl	8006088 <HAL_TIMEx_MasterConfigSynchronization>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001796:	f000 f9ad 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000011c 	.word	0x2000011c

080017a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <MX_TIM16_Init+0x48>)
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <MX_TIM16_Init+0x4c>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32000-1;
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_TIM16_Init+0x48>)
 80017b4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80017b8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <MX_TIM16_Init+0x48>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_TIM16_Init+0x48>)
 80017c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017c6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_TIM16_Init+0x48>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_TIM16_Init+0x48>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_TIM16_Init+0x48>)
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_TIM16_Init+0x48>)
 80017dc:	f004 f89a 	bl	8005914 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80017e6:	f000 f985 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000168 	.word	0x20000168
 80017f4:	40014400 	.word	0x40014400

080017f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 80017fe:	2307      	movs	r3, #7
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]

  // PA9 is UART1 TX
  GPIO_InitStructure.Pin = GPIO_PIN_9;
 800180a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f002 fc7e 	bl	800411c <HAL_GPIO_Init>
  
  // PA10 is UART1 RX
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001824:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001826:	2312      	movs	r3, #18
 8001828:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001832:	f002 fc73 	bl	800411c <HAL_GPIO_Init>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_USART1_UART_Init+0x94>)
 8001838:	4a15      	ldr	r2, [pc, #84]	; (8001890 <MX_USART1_UART_Init+0x98>)
 800183a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_USART1_UART_Init+0x94>)
 800183e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001842:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_USART1_UART_Init+0x94>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_USART1_UART_Init+0x94>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_USART1_UART_Init+0x94>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <MX_USART1_UART_Init+0x94>)
 8001858:	220c      	movs	r2, #12
 800185a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_USART1_UART_Init+0x94>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <MX_USART1_UART_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_USART1_UART_Init+0x94>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <MX_USART1_UART_Init+0x94>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_USART1_UART_Init+0x94>)
 8001876:	f004 fc8b 	bl	8006190 <HAL_UART_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001880:	f000 f938 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200001b4 	.word	0x200001b4
 8001890:	40013800 	.word	0x40013800

08001894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_USART2_UART_Init+0x58>)
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 800189c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018d8:	f004 fc5a 	bl	8006190 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018e2:	f000 f907 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000238 	.word	0x20000238
 80018f0:	40004400 	.word	0x40004400

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_GPIO_Init+0x8c>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a16      	ldr	r2, [pc, #88]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_GPIO_Init+0x8c>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LD3_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	2189      	movs	r1, #137	; 0x89
 8001956:	480b      	ldr	r0, [pc, #44]	; (8001984 <MX_GPIO_Init+0x90>)
 8001958:	f002 fd52 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LD3_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LD3_Pin|LED_GREEN_Pin;
 800195c:	2389      	movs	r3, #137	; 0x89
 800195e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_GPIO_Init+0x90>)
 8001974:	f002 fbd2 	bl	800411c <HAL_GPIO_Init>

}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000
 8001984:	48000400 	.word	0x48000400

08001988 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    if(htim == &htim2) {
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d104      	bne.n	80019a2 <HAL_TIM_PeriodElapsedCallback+0x1a>
        tim2_tick_count++;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80019a0:	6013      	str	r3, [r2, #0]
    }

    if((htim == &htim16)) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d102      	bne.n	80019b0 <HAL_TIM_PeriodElapsedCallback+0x28>
        ts_interrupt = true;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
    }
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	2000011c 	.word	0x2000011c
 80019c0:	200003c0 	.word	0x200003c0
 80019c4:	20000168 	.word	0x20000168
 80019c8:	200003bc 	.word	0x200003bc

080019cc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    if(huart == &huart1) {
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_UART_TxCpltCallback+0x54>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d10d      	bne.n	80019f8 <HAL_UART_TxCpltCallback+0x2c>
        lora.copying_bytes = false;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_UART_TxCpltCallback+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	729a      	strb	r2, [r3, #10]
        lora.msg_end = false;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_UART_TxCpltCallback+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	721a      	strb	r2, [r3, #8]
        lora.buf_idx = 0;
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_UART_TxCpltCallback+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        lora.msg_len = 0;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_UART_TxCpltCallback+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
        if(lora.echo_resp){
            lora.echo_resp = false;
            lora.msg_end = true;
        }
    }
}
 80019f6:	e00d      	b.n	8001a14 <HAL_UART_TxCpltCallback+0x48>
    }else if(huart == &huart2) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_UART_TxCpltCallback+0x5c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d109      	bne.n	8001a14 <HAL_UART_TxCpltCallback+0x48>
        if(lora.echo_resp){
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_UART_TxCpltCallback+0x58>)
 8001a02:	7a5b      	ldrb	r3, [r3, #9]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_UART_TxCpltCallback+0x48>
            lora.echo_resp = false;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_UART_TxCpltCallback+0x58>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	725a      	strb	r2, [r3, #9]
            lora.msg_end = true;
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_UART_TxCpltCallback+0x58>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	721a      	strb	r2, [r3, #8]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	200001b4 	.word	0x200001b4
 8001a24:	200002bc 	.word	0x200002bc
 8001a28:	20000238 	.word	0x20000238

08001a2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    if(huart == &huart1){
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a2a      	ldr	r2, [pc, #168]	; (8001ae0 <HAL_UART_RxCpltCallback+0xb4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d14d      	bne.n	8001ad8 <HAL_UART_RxCpltCallback+0xac>
        if(lora.byte == '+'){
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b2b      	cmp	r3, #43	; 0x2b
 8001a42:	d102      	bne.n	8001a4a <HAL_UART_RxCpltCallback+0x1e>
            lora.copying_bytes = true;
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	729a      	strb	r2, [r3, #10]
        }

        if(lora.copying_bytes && !lora.msg_end){
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a4c:	7a9b      	ldrb	r3, [r3, #10]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d01b      	beq.n	8001a8a <HAL_UART_RxCpltCallback+0x5e>
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a54:	7a1b      	ldrb	r3, [r3, #8]
 8001a56:	f083 0301 	eor.w	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d014      	beq.n	8001a8a <HAL_UART_RxCpltCallback+0x5e>
            lora.buf[lora.buf_idx]=lora.byte;
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a62:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001a66:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a68:	7811      	ldrb	r1, [r2, #0]
 8001a6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a6c:	4413      	add	r3, r2
 8001a6e:	460a      	mov	r2, r1
 8001a70:	72da      	strb	r2, [r3, #11]
            lora.buf_idx++;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a74:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001a78:	3301      	adds	r3, #1
 8001a7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a7c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

            HAL_UART_Receive_IT(&huart1, &lora.byte, 1);
 8001a80:	2201      	movs	r2, #1
 8001a82:	4918      	ldr	r1, [pc, #96]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a84:	4816      	ldr	r0, [pc, #88]	; (8001ae0 <HAL_UART_RxCpltCallback+0xb4>)
 8001a86:	f004 fc3f 	bl	8006308 <HAL_UART_Receive_IT>
        }

        if(lora.copying_bytes && lora.byte == '\n' && lora.prev_byte == '\r'){
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a8c:	7a9b      	ldrb	r3, [r3, #10]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01e      	beq.n	8001ad0 <HAL_UART_RxCpltCallback+0xa4>
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b0a      	cmp	r3, #10
 8001a98:	d11a      	bne.n	8001ad0 <HAL_UART_RxCpltCallback+0xa4>
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	2b0d      	cmp	r3, #13
 8001aa0:	d116      	bne.n	8001ad0 <HAL_UART_RxCpltCallback+0xa4>
            lora.msg_len = lora.buf_idx;
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001aa4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001aaa:	6053      	str	r3, [r2, #4]
            // lora.msg_end = true;
            memcpy(lora_echo_buf, lora.buf, lora.msg_len);
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <HAL_UART_RxCpltCallback+0xbc>)
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <HAL_UART_RxCpltCallback+0xc0>)
 8001ab6:	f005 ffad 	bl	8007a14 <memcpy>
            lora.echo_resp = true;
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	725a      	strb	r2, [r3, #9]
            HAL_UART_Transmit_IT(&huart2, lora_echo_buf, lora.msg_len);
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4908      	ldr	r1, [pc, #32]	; (8001aec <HAL_UART_RxCpltCallback+0xc0>)
 8001aca:	4809      	ldr	r0, [pc, #36]	; (8001af0 <HAL_UART_RxCpltCallback+0xc4>)
 8001acc:	f004 fbae 	bl	800622c <HAL_UART_Transmit_IT>
        }

        lora.prev_byte = lora.byte;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_UART_RxCpltCallback+0xb8>)
 8001ad6:	705a      	strb	r2, [r3, #1]
    }
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200001b4 	.word	0x200001b4
 8001ae4:	200002bc 	.word	0x200002bc
 8001ae8:	200002c7 	.word	0x200002c7
 8001aec:	200003c4 	.word	0x200003c4
 8001af0:	20000238 	.word	0x20000238

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	e7fe      	b.n	8001afc <Error_Handler+0x8>
	...

08001b00 <HAL_printf>:

/** Custom printf function, only translate to va_list arg HAL_UART.
 * @param *fmt String to print
 * @param ... Data
 */
void HAL_printf(const char *fmt, ...) {
 8001b00:	b40f      	push	{r0, r1, r2, r3}
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b0be      	sub	sp, #248	; 0xf8
 8001b06:	af00      	add	r7, sp, #0
  char string[PRINT_BUFFER_SIZE];
  va_list argp;
  va_start(argp, fmt);
 8001b08:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001b0c:	607b      	str	r3, [r7, #4]
  vsprintf(string, fmt, argp);
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f006 fd45 	bl	80085a8 <vsiprintf>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)string, strlen(string));
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fb54 	bl	80001d0 <strlen>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4619      	mov	r1, r3
 8001b32:	4806      	ldr	r0, [pc, #24]	; (8001b4c <HAL_printf+0x4c>)
 8001b34:	f004 fb7a 	bl	800622c <HAL_UART_Transmit_IT>
  va_end(argp);
  wait_ms(10);
 8001b38:	200a      	movs	r0, #10
 8001b3a:	f000 f809 	bl	8001b50 <wait_ms>
}
 8001b3e:	bf00      	nop
 8001b40:	37f8      	adds	r7, #248	; 0xf8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b48:	b004      	add	sp, #16
 8001b4a:	4770      	bx	lr
 8001b4c:	20000238 	.word	0x20000238

08001b50 <wait_ms>:

void wait_ms(uint32_t timeout) {
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
    uint32_t start_time = tim2_tick_count;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <wait_ms+0x2c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
    while((tim2_tick_count - start_time) < timeout);
 8001b5e:	bf00      	nop
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <wait_ms+0x2c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d8f8      	bhi.n	8001b60 <wait_ms+0x10>
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	200003c0 	.word	0x200003c0

08001b80 <send_lsa_req>:
                        config->node_addr, stp_route_db->root_address, stp_route_db->path_length, config->node_addr);
}


/* LSA Functions */
int send_lsa_req(mixnet_node_config_t *config, mixnet_address dst_addr) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
    int ret_val = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
    mixnet_packet_t *pkt = malloc(sizeof(mixnet_packet_t) + sizeof(mixnet_packet_lsa_t));
 8001b90:	2011      	movs	r0, #17
 8001b92:	f005 ff1f 	bl	80079d4 <malloc>
 8001b96:	4603      	mov	r3, r0
 8001b98:	613b      	str	r3, [r7, #16]
    mixnet_packet_lsa_t lsa_payload;

    pkt->src_address = config->node_addr;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	881a      	ldrh	r2, [r3, #0]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	801a      	strh	r2, [r3, #0]
    pkt->dst_address = dst_addr;
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	887a      	ldrh	r2, [r7, #2]
 8001ba6:	805a      	strh	r2, [r3, #2]
    pkt->type = PACKET_TYPE_LSA;
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2201      	movs	r2, #1
 8001bac:	711a      	strb	r2, [r3, #4]
    pkt->payload_size = sizeof(mixnet_packet_lsa_t);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	729a      	strb	r2, [r3, #10]

    lsa_payload.flags = LSA_REQ;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	733b      	strb	r3, [r7, #12]
    lsa_payload.node_address = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	813b      	strh	r3, [r7, #8]
    lsa_payload.neighbor_count = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	817b      	strh	r3, [r7, #10]
    memcpy(pkt->payload, &lsa_payload, sizeof(mixnet_packet_lsa_t));
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	330b      	adds	r3, #11
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	6010      	str	r0, [r2, #0]
 8001bce:	791b      	ldrb	r3, [r3, #4]
 8001bd0:	7113      	strb	r3, [r2, #4]

    ret_val = rdt_send_pkt(&huart1, &huart2, config, pkt);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4905      	ldr	r1, [pc, #20]	; (8001bec <send_lsa_req+0x6c>)
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <send_lsa_req+0x70>)
 8001bda:	f000 fbdb 	bl	8002394 <rdt_send_pkt>
 8001bde:	6178      	str	r0, [r7, #20]
    return ret_val;
 8001be0:	697b      	ldr	r3, [r7, #20]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000238 	.word	0x20000238
 8001bf0:	200001b4 	.word	0x200001b4

08001bf4 <init_sch_config>:
    memcpy(local_sch->sch_recv_order, recv_order, (recvd_sch_pkt->total_ts * sizeof(timeslot_t)));

    local_sch->total_ts = recvd_sch_pkt->total_ts;
}

void init_sch_config(data_sch_config_t *sch_config) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    sch_config->rx_ts = malloc(sizeof(timeslot_t) * NUM_NODES);
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <init_sch_config+0x38>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4618      	mov	r0, r3
 8001c04:	f005 fee6 	bl	80079d4 <malloc>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
    sch_config->tx_ts = 0;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	805a      	strh	r2, [r3, #2]
    sch_config->num_ts_sleep = 0;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	819a      	strh	r2, [r3, #12]
    sch_config->num_rx_ts = 0;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	809a      	strh	r2, [r3, #4]
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	08009724 	.word	0x08009724

08001c30 <init_sensor_db>:
    }
    HAL_printf("]\n");
    
}

void init_sensor_db(mixnet_node_config_t *config, data_config_t *sensor_db) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
    sensor_db->num_nodes_on_fire = 0;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	801a      	strh	r2, [r3, #0]
    sensor_db->nodes_on_fire = malloc(sizeof(mixnet_address) * (NUM_NODES - 1));
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <init_sensor_db+0x54>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f005 fec3 	bl	80079d4 <malloc>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	605a      	str	r2, [r3, #4]

    sensor_db->num_resp_nodes = 1;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	811a      	strh	r2, [r3, #8]
    sensor_db->resp_nodes = malloc(sizeof(mixnet_address) * (NUM_NODES - 1));
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <init_sensor_db+0x54>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 feb5 	bl	80079d4 <malloc>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	60da      	str	r2, [r3, #12]
    sensor_db->resp_nodes[0] = config->node_addr;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	8812      	ldrh	r2, [r2, #0]
 8001c7a:	801a      	strh	r2, [r3, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	08009724 	.word	0x08009724

08001c88 <set_topology_mesh_7>:


/* Network Helper Functions */
void set_topology_mesh_7(mixnet_node_config_t *config) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
    switch (config->node_addr) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	f200 80d0 	bhi.w	8001e3c <set_topology_mesh_7+0x1b4>
 8001c9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <set_topology_mesh_7+0x1c>)
 8001c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca2:	bf00      	nop
 8001ca4:	08001cc1 	.word	0x08001cc1
 8001ca8:	08001cf3 	.word	0x08001cf3
 8001cac:	08001d25 	.word	0x08001d25
 8001cb0:	08001d75 	.word	0x08001d75
 8001cb4:	08001da7 	.word	0x08001da7
 8001cb8:	08001dd9 	.word	0x08001dd9
 8001cbc:	08001e0b 	.word	0x08001e0b
        case 1: {
            config->num_neighbors = 3;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 8001cc6:	2006      	movs	r0, #6
 8001cc8:	f005 fe84 	bl	80079d4 <malloc>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 2;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 3;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 4;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	3304      	adds	r3, #4
 8001cec:	2204      	movs	r2, #4
 8001cee:	801a      	strh	r2, [r3, #0]
        } break;
 8001cf0:	e0aa      	b.n	8001e48 <set_topology_mesh_7+0x1c0>

        case 2: {
            config->num_neighbors = 3;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 8001cf8:	2006      	movs	r0, #6
 8001cfa:	f005 fe6b 	bl	80079d4 <malloc>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 3;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	3302      	adds	r3, #2
 8001d14:	2203      	movs	r2, #3
 8001d16:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 5;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2205      	movs	r2, #5
 8001d20:	801a      	strh	r2, [r3, #0]
        } break;
 8001d22:	e091      	b.n	8001e48 <set_topology_mesh_7+0x1c0>

        case 3: {
            config->num_neighbors = 6;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2206      	movs	r2, #6
 8001d28:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 6);
 8001d2a:	200c      	movs	r0, #12
 8001d2c:	f005 fe52 	bl	80079d4 <malloc>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 1;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 2;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	3302      	adds	r3, #2
 8001d46:	2202      	movs	r2, #2
 8001d48:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 4;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	2204      	movs	r2, #4
 8001d52:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[3] = 5;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	3306      	adds	r3, #6
 8001d5a:	2205      	movs	r2, #5
 8001d5c:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[4] = 6;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	3308      	adds	r3, #8
 8001d64:	2206      	movs	r2, #6
 8001d66:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[5] = 7;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	330a      	adds	r3, #10
 8001d6e:	2207      	movs	r2, #7
 8001d70:	801a      	strh	r2, [r3, #0]
        } break;
 8001d72:	e069      	b.n	8001e48 <set_topology_mesh_7+0x1c0>

        case 4: {
            config->num_neighbors = 3;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2203      	movs	r2, #3
 8001d78:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 8001d7a:	2006      	movs	r0, #6
 8001d7c:	f005 fe2a 	bl	80079d4 <malloc>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 1;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 3;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	3302      	adds	r3, #2
 8001d96:	2203      	movs	r2, #3
 8001d98:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 7;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	2207      	movs	r2, #7
 8001da2:	801a      	strh	r2, [r3, #0]
        } break;
 8001da4:	e050      	b.n	8001e48 <set_topology_mesh_7+0x1c0>

        case 5: {
            config->num_neighbors = 3;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2203      	movs	r2, #3
 8001daa:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 8001dac:	2006      	movs	r0, #6
 8001dae:	f005 fe11 	bl	80079d4 <malloc>
 8001db2:	4603      	mov	r3, r0
 8001db4:	461a      	mov	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 3;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	2203      	movs	r2, #3
 8001dca:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 6;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2206      	movs	r2, #6
 8001dd4:	801a      	strh	r2, [r3, #0]
        } break;
 8001dd6:	e037      	b.n	8001e48 <set_topology_mesh_7+0x1c0>

        case 6: {
            config->num_neighbors = 3;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 8001dde:	2006      	movs	r0, #6
 8001de0:	f005 fdf8 	bl	80079d4 <malloc>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 3;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2203      	movs	r2, #3
 8001df2:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 5;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	3302      	adds	r3, #2
 8001dfa:	2205      	movs	r2, #5
 8001dfc:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 7;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	3304      	adds	r3, #4
 8001e04:	2207      	movs	r2, #7
 8001e06:	801a      	strh	r2, [r3, #0]
        } break;
 8001e08:	e01e      	b.n	8001e48 <set_topology_mesh_7+0x1c0>

        case 7: {
            config->num_neighbors = 3;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 8001e10:	2006      	movs	r0, #6
 8001e12:	f005 fddf 	bl	80079d4 <malloc>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 3;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2203      	movs	r2, #3
 8001e24:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 4;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 6;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2206      	movs	r2, #6
 8001e38:	801a      	strh	r2, [r3, #0]
        } break;
 8001e3a:	e005      	b.n	8001e48 <set_topology_mesh_7+0x1c0>

        default:
            printf("INVALID Node Address\n");
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <set_topology_mesh_7+0x1c8>)
 8001e3e:	f006 fa51 	bl	80082e4 <puts>
            exit(1);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f005 fd7c 	bl	8007940 <exit>
        break;
    }
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	0800957c 	.word	0x0800957c

08001e54 <set_topology_mesh_9>:

void set_topology_mesh_9(mixnet_node_config_t *config) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    switch(config->node_addr){
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	f200 811a 	bhi.w	800209c <set_topology_mesh_9+0x248>
 8001e68:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <set_topology_mesh_9+0x1c>)
 8001e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6e:	bf00      	nop
 8001e70:	08001e95 	.word	0x08001e95
 8001e74:	08001ec7 	.word	0x08001ec7
 8001e78:	08001ef9 	.word	0x08001ef9
 8001e7c:	08001f49 	.word	0x08001f49
 8001e80:	08001f7b 	.word	0x08001f7b
 8001e84:	08001fb7 	.word	0x08001fb7
 8001e88:	08001ffd 	.word	0x08001ffd
 8001e8c:	08002039 	.word	0x08002039
 8001e90:	0800206b 	.word	0x0800206b
        case 1:{
            config->num_neighbors = 3;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2203      	movs	r2, #3
 8001e98:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 8001e9a:	2006      	movs	r0, #6
 8001e9c:	f005 fd9a 	bl	80079d4 <malloc>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 2;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2202      	movs	r2, #2
 8001eae:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 3;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 4;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	801a      	strh	r2, [r3, #0]
        } break;
 8001ec4:	e0f0      	b.n	80020a8 <set_topology_mesh_9+0x254>

        case 2:{
            config->num_neighbors = 3;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 8001ecc:	2006      	movs	r0, #6
 8001ece:	f005 fd81 	bl	80079d4 <malloc>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 3;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	2203      	movs	r2, #3
 8001eea:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 5;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2205      	movs	r2, #5
 8001ef4:	801a      	strh	r2, [r3, #0]
        } break;
 8001ef6:	e0d7      	b.n	80020a8 <set_topology_mesh_9+0x254>

        case 3:{
            config->num_neighbors = 6;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2206      	movs	r2, #6
 8001efc:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 6);
 8001efe:	200c      	movs	r0, #12
 8001f00:	f005 fd68 	bl	80079d4 <malloc>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 1;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	3302      	adds	r3, #2
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 4;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	3304      	adds	r3, #4
 8001f24:	2204      	movs	r2, #4
 8001f26:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[3] = 5;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	3306      	adds	r3, #6
 8001f2e:	2205      	movs	r2, #5
 8001f30:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[4] = 6;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	3308      	adds	r3, #8
 8001f38:	2206      	movs	r2, #6
 8001f3a:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[5] = 7;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	330a      	adds	r3, #10
 8001f42:	2207      	movs	r2, #7
 8001f44:	801a      	strh	r2, [r3, #0]
        } break;
 8001f46:	e0af      	b.n	80020a8 <set_topology_mesh_9+0x254>

        case 4:{
            config->num_neighbors = 3;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 8001f4e:	2006      	movs	r0, #6
 8001f50:	f005 fd40 	bl	80079d4 <malloc>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 1;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 3;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	3302      	adds	r3, #2
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 7;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	2207      	movs	r2, #7
 8001f76:	801a      	strh	r2, [r3, #0]
        } break;
 8001f78:	e096      	b.n	80020a8 <set_topology_mesh_9+0x254>

        case 5:{
            config->num_neighbors = 4;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 4);
 8001f80:	2008      	movs	r0, #8
 8001f82:	f005 fd27 	bl	80079d4 <malloc>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 3;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 6;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2206      	movs	r2, #6
 8001fa8:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[3] = 8;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	3306      	adds	r3, #6
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	801a      	strh	r2, [r3, #0]
        } break;
 8001fb4:	e078      	b.n	80020a8 <set_topology_mesh_9+0x254>

        case 6:{
            config->num_neighbors = 5;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2205      	movs	r2, #5
 8001fba:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 5);
 8001fbc:	200a      	movs	r0, #10
 8001fbe:	f005 fd09 	bl	80079d4 <malloc>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 5;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2205      	movs	r2, #5
 8001fd0:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 3;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	2203      	movs	r2, #3
 8001fda:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 7;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[3] = 8;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	3306      	adds	r3, #6
 8001fec:	2208      	movs	r2, #8
 8001fee:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[4] = 9;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	3308      	adds	r3, #8
 8001ff6:	2209      	movs	r2, #9
 8001ff8:	801a      	strh	r2, [r3, #0]
        } break;
 8001ffa:	e055      	b.n	80020a8 <set_topology_mesh_9+0x254>

        case 7:{
            config->num_neighbors = 4;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2204      	movs	r2, #4
 8002000:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 4);
 8002002:	2008      	movs	r0, #8
 8002004:	f005 fce6 	bl	80079d4 <malloc>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 4;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2204      	movs	r2, #4
 8002016:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 3;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	3302      	adds	r3, #2
 800201e:	2203      	movs	r2, #3
 8002020:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 6;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	3304      	adds	r3, #4
 8002028:	2206      	movs	r2, #6
 800202a:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[3] = 9;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	3306      	adds	r3, #6
 8002032:	2209      	movs	r2, #9
 8002034:	801a      	strh	r2, [r3, #0]
        } break;
 8002036:	e037      	b.n	80020a8 <set_topology_mesh_9+0x254>

        case 8:{
            config->num_neighbors = 3;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2203      	movs	r2, #3
 800203c:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 800203e:	2006      	movs	r0, #6
 8002040:	f005 fcc8 	bl	80079d4 <malloc>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 5;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2205      	movs	r2, #5
 8002052:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 6;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	3302      	adds	r3, #2
 800205a:	2206      	movs	r2, #6
 800205c:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 9;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	3304      	adds	r3, #4
 8002064:	2209      	movs	r2, #9
 8002066:	801a      	strh	r2, [r3, #0]
        } break;
 8002068:	e01e      	b.n	80020a8 <set_topology_mesh_9+0x254>

        case 9:{
            config->num_neighbors = 3;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 8002070:	2006      	movs	r0, #6
 8002072:	f005 fcaf 	bl	80079d4 <malloc>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 8;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2208      	movs	r2, #8
 8002084:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 6;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	3302      	adds	r3, #2
 800208c:	2206      	movs	r2, #6
 800208e:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 7;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	2207      	movs	r2, #7
 8002098:	801a      	strh	r2, [r3, #0]
        } break;
 800209a:	e005      	b.n	80020a8 <set_topology_mesh_9+0x254>

        default:
            printf("INVALID Node Address\n");
 800209c:	4804      	ldr	r0, [pc, #16]	; (80020b0 <set_topology_mesh_9+0x25c>)
 800209e:	f006 f921 	bl	80082e4 <puts>
            exit(1);
 80020a2:	2001      	movs	r0, #1
 80020a4:	f005 fc4c 	bl	8007940 <exit>
        break;
    }
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	0800957c 	.word	0x0800957c

080020b4 <set_topology_tree_4>:

void set_topology_tree_4(mixnet_node_config_t *config) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    switch(config->node_addr){
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d850      	bhi.n	8002168 <set_topology_tree_4+0xb4>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <set_topology_tree_4+0x18>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	080020dd 	.word	0x080020dd
 80020d0:	080020fb 	.word	0x080020fb
 80020d4:	0800212d 	.word	0x0800212d
 80020d8:	0800214b 	.word	0x0800214b
        case 1:{
            config->num_neighbors = 1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address));
 80020e2:	2002      	movs	r0, #2
 80020e4:	f005 fc76 	bl	80079d4 <malloc>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 2;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	801a      	strh	r2, [r3, #0]
        } break;
 80020f8:	e03c      	b.n	8002174 <set_topology_tree_4+0xc0>

        case 2: {
            config->num_neighbors = 3;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2203      	movs	r2, #3
 80020fe:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * 3);
 8002100:	2006      	movs	r0, #6
 8002102:	f005 fc67 	bl	80079d4 <malloc>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[1] = 3;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	3302      	adds	r3, #2
 800211c:	2203      	movs	r2, #3
 800211e:	801a      	strh	r2, [r3, #0]
            config->neighbor_addrs[2] = 4;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	3304      	adds	r3, #4
 8002126:	2204      	movs	r2, #4
 8002128:	801a      	strh	r2, [r3, #0]
        } break;
 800212a:	e023      	b.n	8002174 <set_topology_tree_4+0xc0>

        case 3: {
            config->num_neighbors = 1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address));
 8002132:	2002      	movs	r0, #2
 8002134:	f005 fc4e 	bl	80079d4 <malloc>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 2;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	801a      	strh	r2, [r3, #0]
        } break;
 8002148:	e014      	b.n	8002174 <set_topology_tree_4+0xc0>

        case 4: {
            config->num_neighbors = 1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address));
 8002150:	2002      	movs	r0, #2
 8002152:	f005 fc3f 	bl	80079d4 <malloc>
 8002156:	4603      	mov	r3, r0
 8002158:	461a      	mov	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	605a      	str	r2, [r3, #4]
            config->neighbor_addrs[0] = 2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	801a      	strh	r2, [r3, #0]
        } break;
 8002166:	e005      	b.n	8002174 <set_topology_tree_4+0xc0>

        default:
            UART2_tx("INVALID Node Address\n");
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <set_topology_tree_4+0xc8>)
 800216a:	f000 fdd5 	bl	8002d18 <UART2_tx>
            exit(1);
 800216e:	2001      	movs	r0, #1
 8002170:	f005 fbe6 	bl	8007940 <exit>
        break;
    }
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	08009594 	.word	0x08009594

08002180 <set_topology>:

// requires node_address be set in the configuration
void set_topology(mixnet_node_config_t *config, uint16_t num_nodes, enum topology_t topology) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
 800218c:	4613      	mov	r3, r2
 800218e:	707b      	strb	r3, [r7, #1]
    switch(topology) {
 8002190:	787b      	ldrb	r3, [r7, #1]
 8002192:	2b04      	cmp	r3, #4
 8002194:	f200 808a 	bhi.w	80022ac <set_topology+0x12c>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <set_topology+0x20>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021b5 	.word	0x080021b5
 80021a4:	0800223b 	.word	0x0800223b
 80021a8:	08002295 	.word	0x08002295
 80021ac:	0800229d 	.word	0x0800229d
 80021b0:	080022a5 	.word	0x080022a5
        case LINE: {
            if(config->node_addr == 1) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d10e      	bne.n	80021da <set_topology+0x5a>
                config->num_neighbors = 1;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	805a      	strh	r2, [r3, #2]
                config->neighbor_addrs = malloc(sizeof(mixnet_address));
 80021c2:	2002      	movs	r0, #2
 80021c4:	f005 fc06 	bl	80079d4 <malloc>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	605a      	str	r2, [r3, #4]
                config->neighbor_addrs[0] = 2;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	801a      	strh	r2, [r3, #0]
                config->num_neighbors = 2;
                config->neighbor_addrs = malloc(sizeof(mixnet_address) * 2);
                config->neighbor_addrs[0] = config->node_addr - 1;
                config->neighbor_addrs[1] = config->node_addr + 1;
            }
        } break;
 80021d8:	e06b      	b.n	80022b2 <set_topology+0x132>
            }else if(config->node_addr == num_nodes) {
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d110      	bne.n	8002206 <set_topology+0x86>
                config->num_neighbors = 1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	805a      	strh	r2, [r3, #2]
                config->neighbor_addrs = malloc(sizeof(mixnet_address));
 80021ea:	2002      	movs	r0, #2
 80021ec:	f005 fbf2 	bl	80079d4 <malloc>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	605a      	str	r2, [r3, #4]
                config->neighbor_addrs[0] = num_nodes - 1;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	887a      	ldrh	r2, [r7, #2]
 80021fe:	3a01      	subs	r2, #1
 8002200:	b292      	uxth	r2, r2
 8002202:	801a      	strh	r2, [r3, #0]
        } break;
 8002204:	e055      	b.n	80022b2 <set_topology+0x132>
                config->num_neighbors = 2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	805a      	strh	r2, [r3, #2]
                config->neighbor_addrs = malloc(sizeof(mixnet_address) * 2);
 800220c:	2004      	movs	r0, #4
 800220e:	f005 fbe1 	bl	80079d4 <malloc>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	605a      	str	r2, [r3, #4]
                config->neighbor_addrs[0] = config->node_addr - 1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	881a      	ldrh	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	3a01      	subs	r2, #1
 8002224:	b292      	uxth	r2, r2
 8002226:	801a      	strh	r2, [r3, #0]
                config->neighbor_addrs[1] = config->node_addr + 1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	881a      	ldrh	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	3302      	adds	r3, #2
 8002232:	3201      	adds	r2, #1
 8002234:	b292      	uxth	r2, r2
 8002236:	801a      	strh	r2, [r3, #0]
        } break;
 8002238:	e03b      	b.n	80022b2 <set_topology+0x132>

        case FULLY_CONNECTED: {
            config->num_neighbors = num_nodes - 1;
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	805a      	strh	r2, [r3, #2]
            config->neighbor_addrs = malloc(sizeof(mixnet_address) * (num_nodes-1));
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	3b01      	subs	r3, #1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f005 fbc2 	bl	80079d4 <malloc>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	605a      	str	r2, [r3, #4]
            int j=0;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
            for(int i=1; i<=num_nodes; i++){
 800225c:	2301      	movs	r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	e013      	b.n	800228a <set_topology+0x10a>
                if(i != config->node_addr){
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4293      	cmp	r3, r2
 800226c:	d00a      	beq.n	8002284 <set_topology+0x104>
                    config->neighbor_addrs[j] = i;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	b292      	uxth	r2, r2
 800227c:	801a      	strh	r2, [r3, #0]
                    j++;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3301      	adds	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
            for(int i=1; i<=num_nodes; i++){
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	3301      	adds	r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	dde7      	ble.n	8002262 <set_topology+0xe2>
                }
            }
        } break;
 8002292:	e00e      	b.n	80022b2 <set_topology+0x132>

        case TREE_4: {
            set_topology_tree_4(config);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff0d 	bl	80020b4 <set_topology_tree_4>
        } break;
 800229a:	e00a      	b.n	80022b2 <set_topology+0x132>

        case MESH_7: {
            set_topology_mesh_7(config);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fcf3 	bl	8001c88 <set_topology_mesh_7>
        } break;
 80022a2:	e006      	b.n	80022b2 <set_topology+0x132>

        case MESH_9: {
            set_topology_mesh_9(config);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff fdd5 	bl	8001e54 <set_topology_mesh_9>
        } break;
 80022aa:	e002      	b.n	80022b2 <set_topology+0x132>

        default:
            exit(1);
 80022ac:	2001      	movs	r0, #1
 80022ae:	f005 fb47 	bl	8007940 <exit>
        break;
    }
}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop

080022bc <activate_all_ports>:
            break;
        }
    } 
}

void activate_all_ports(uint8_t *ports, int port_len) {
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
    for(int i=0; i<port_len; i++) {
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	e007      	b.n	80022dc <activate_all_ports+0x20>
        ports[i] = 1;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<port_len; i++) {
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3301      	adds	r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	dbf3      	blt.n	80022cc <activate_all_ports+0x10>
    }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <get_port>:
        HAL_printf("%u ", ports[nid]);
    } 
    HAL_printf("]\n");
}

int get_port(mixnet_address *arr, size_t arr_len, mixnet_address data) {
 80022f2:	b480      	push	{r7}
 80022f4:	b087      	sub	sp, #28
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	4613      	mov	r3, r2
 80022fe:	80fb      	strh	r3, [r7, #6]
    int result = -1;
 8002300:	f04f 33ff 	mov.w	r3, #4294967295
 8002304:	617b      	str	r3, [r7, #20]
    for(int i=0; i<arr_len; i++) {
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e00c      	b.n	8002326 <get_port+0x34>
        if(arr[i] == data) {
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	88fa      	ldrh	r2, [r7, #6]
 8002318:	429a      	cmp	r2, r3
 800231a:	d101      	bne.n	8002320 <get_port+0x2e>
        result = i;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	617b      	str	r3, [r7, #20]
    for(int i=0; i<arr_len; i++) {
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	3301      	adds	r3, #1
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	d8ee      	bhi.n	800230c <get_port+0x1a>
        }
    }
    return result;
 800232e:	697b      	ldr	r3, [r7, #20]
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <send_ack_pkt>:
        default:
        break;
    }
}

void send_ack_pkt(mixnet_node_config_t *config, UART_HandleTypeDef * lora_huart, UART_HandleTypeDef * serial_huart, mixnet_address dst_addr, uint16_t acknum) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	807b      	strh	r3, [r7, #2]
    mixnet_packet_t *pkt = malloc(sizeof(mixnet_packet_t) + sizeof(mixnet_packet_stp_t));
 800234a:	2012      	movs	r0, #18
 800234c:	f005 fb42 	bl	80079d4 <malloc>
 8002350:	4603      	mov	r3, r0
 8002352:	617b      	str	r3, [r7, #20]
    pkt->src_address = config->node_addr;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	801a      	strh	r2, [r3, #0]
    pkt->dst_address = dst_addr;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	805a      	strh	r2, [r3, #2]
    pkt->type = PACKET_TYPE_ACK;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2204      	movs	r2, #4
 8002366:	711a      	strb	r2, [r3, #4]
    pkt->payload_size = 0;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2200      	movs	r2, #0
 800236c:	729a      	strb	r2, [r3, #10]
    pkt->seqnum = 0;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2200      	movs	r2, #0
 8002372:	80da      	strh	r2, [r3, #6]
    pkt->acknum = acknum;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	8c3a      	ldrh	r2, [r7, #32]
 8002378:	811a      	strh	r2, [r3, #8]

    LORA_send_packet(lora_huart, serial_huart, pkt);
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	68b8      	ldr	r0, [r7, #8]
 8002380:	f7fe fce8 	bl	8000d54 <LORA_send_packet>

    free(pkt);
 8002384:	6978      	ldr	r0, [r7, #20]
 8002386:	f005 fb2d 	bl	80079e4 <free>
}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <rdt_send_pkt>:
    }
    iter_count++;
}

// note: these are not for broadcast packets
int rdt_send_pkt(UART_HandleTypeDef * lora_huart, UART_HandleTypeDef * serial_huart, mixnet_node_config_t *config, mixnet_packet_t *pkt){
 8002394:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002398:	b092      	sub	sp, #72	; 0x48
 800239a:	af04      	add	r7, sp, #16
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
    static uint16_t seqnum=0;
    char *raw_packet;
    mixnet_packet_t *recvd_packet;
    int recv_port = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
    bool recvd_ack = false;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    err_code_t err_code;
    bool reset_exp_backoff = true;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int retx_attempts = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
    int ret_val = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint32_t start_time, end_time, send_time, elapsed_time;

    while(1) {
        start_time = tim2_tick_count;
 80023bc:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <rdt_send_pkt+0x160>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	623b      	str	r3, [r7, #32]
        recvd_ack = false;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        #if DBG_RDT
        HAL_printf("[%u] Transmitting packet [SEQ %u] to %u...\n", config->node_addr, seqnum, pkt->dst_address);
        #endif

        pkt->seqnum= seqnum;
 80023c8:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <rdt_send_pkt+0x164>)
 80023ca:	881a      	ldrh	r2, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	80da      	strh	r2, [r3, #6]
        pkt->acknum= 0;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2200      	movs	r2, #0
 80023d4:	811a      	strh	r2, [r3, #8]
        LORA_send_packet(&huart1, &huart2, pkt);
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4948      	ldr	r1, [pc, #288]	; (80024fc <rdt_send_pkt+0x168>)
 80023da:	4849      	ldr	r0, [pc, #292]	; (8002500 <rdt_send_pkt+0x16c>)
 80023dc:	f7fe fcba 	bl	8000d54 <LORA_send_packet>

        send_time = tim2_tick_count - start_time;
 80023e0:	4b44      	ldr	r3, [pc, #272]	; (80024f4 <rdt_send_pkt+0x160>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	61fb      	str	r3, [r7, #28]

        #if DBG_RDT
        HAL_printf("send time: %u\n", send_time);
        #endif

        start_time = tim2_tick_count;
 80023ea:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <rdt_send_pkt+0x160>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	623b      	str	r3, [r7, #32]

        #if DBG_RDT
        HAL_printf("Waiting for [ACK %u] from %u...\n", pkt->seqnum, pkt->dst_address);
        #endif
        raw_packet = lora_recv_data(&huart1, &huart2, start_time, (LORA_TOA + TIME_BUF), NON_BLOCKING, &err_code);
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	2200      	movs	r2, #0
 80023f4:	4698      	mov	r8, r3
 80023f6:	4691      	mov	r9, r2
 80023f8:	4b42      	ldr	r3, [pc, #264]	; (8002504 <rdt_send_pkt+0x170>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b42      	ldr	r3, [pc, #264]	; (8002508 <rdt_send_pkt+0x174>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4413      	add	r3, r2
 8002402:	17da      	asrs	r2, r3, #31
 8002404:	461c      	mov	r4, r3
 8002406:	4615      	mov	r5, r2
 8002408:	f107 0313 	add.w	r3, r7, #19
 800240c:	9303      	str	r3, [sp, #12]
 800240e:	2301      	movs	r3, #1
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	e9cd 4500 	strd	r4, r5, [sp]
 8002416:	4642      	mov	r2, r8
 8002418:	464b      	mov	r3, r9
 800241a:	4938      	ldr	r1, [pc, #224]	; (80024fc <rdt_send_pkt+0x168>)
 800241c:	4838      	ldr	r0, [pc, #224]	; (8002500 <rdt_send_pkt+0x16c>)
 800241e:	f7fe fd3b 	bl	8000e98 <lora_recv_data>
 8002422:	61b8      	str	r0, [r7, #24]

        if(raw_packet != NULL){
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d031      	beq.n	800248e <rdt_send_pkt+0xfa>
            recvd_packet = (mixnet_packet_t*)raw_packet;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	617b      	str	r3, [r7, #20]
            assert(recvd_packet->dst_address == config->node_addr); // was the packet actually destined to you (not just broadcast)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	885a      	ldrh	r2, [r3, #2]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d006      	beq.n	8002448 <rdt_send_pkt+0xb4>
 800243a:	4b34      	ldr	r3, [pc, #208]	; (800250c <rdt_send_pkt+0x178>)
 800243c:	4a34      	ldr	r2, [pc, #208]	; (8002510 <rdt_send_pkt+0x17c>)
 800243e:	f240 31ed 	movw	r1, #1005	; 0x3ed
 8002442:	4834      	ldr	r0, [pc, #208]	; (8002514 <rdt_send_pkt+0x180>)
 8002444:	f005 fa4c 	bl	80078e0 <__assert_func>

            recv_port = get_port(config->neighbor_addrs, config->num_neighbors, recvd_packet->src_address);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6858      	ldr	r0, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	885b      	ldrh	r3, [r3, #2]
 8002450:	4619      	mov	r1, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	f7ff ff4b 	bl	80022f2 <get_port>
 800245c:	62b8      	str	r0, [r7, #40]	; 0x28
            if(recv_port != -1){
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d01c      	beq.n	80024a0 <rdt_send_pkt+0x10c>
                if(recvd_packet->type == PACKET_TYPE_ACK) {
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	791b      	ldrb	r3, [r3, #4]
 800246a:	2b04      	cmp	r3, #4
 800246c:	d118      	bne.n	80024a0 <rdt_send_pkt+0x10c>
                    if((recvd_packet->src_address == pkt->dst_address) && 
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	881a      	ldrh	r2, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	885b      	ldrh	r3, [r3, #2]
 8002476:	429a      	cmp	r2, r3
 8002478:	d112      	bne.n	80024a0 <rdt_send_pkt+0x10c>
                        (recvd_packet->acknum == pkt->seqnum)) {
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	891a      	ldrh	r2, [r3, #8]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	88db      	ldrh	r3, [r3, #6]
                    if((recvd_packet->src_address == pkt->dst_address) && 
 8002482:	429a      	cmp	r2, r3
 8002484:	d10c      	bne.n	80024a0 <rdt_send_pkt+0x10c>
                            #if DBG_RDT
                            HAL_printf("Packet [SEQ %u] was acknoweldged [ACK %u]\n", pkt->seqnum, recvd_packet->acknum);
                            #endif
                            recvd_ack = true;
 8002486:	2301      	movs	r3, #1
 8002488:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800248c:	e008      	b.n	80024a0 <rdt_send_pkt+0x10c>
                }
            }
        
        // either the packet had a CRC error, or the ACK was never received
        }else{
            if(err_code == NO_ERROR){ // case 2: we do NOT receive an ACK - complete timeout, restart checking
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <rdt_send_pkt+0x10c>
                #if DBG_RDT
                HAL_printf("Packet %u timed out after %d retransmissions\n", seqnum, retx_attempts);
                #endif

            }else if(err_code == PKT_ERROR){
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d002      	beq.n	80024a0 <rdt_send_pkt+0x10c>
                HAL_printf("Packet Error in expected ACK after %d retransmissions\n", retx_attempts);
                #endif
                // wait_random(reset_exp_backoff); // random exponential backoff
                // reset_exp_backoff = false;

            }else if(err_code == PKT_ERROR_CRC){
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d019      	beq.n	80024d4 <rdt_send_pkt+0x140>
                HAL_printf("Uknown error\n");
                #endif
            }
        }

        if(recvd_ack){
 80024a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <rdt_send_pkt+0x128>
            wait_ms((LORA_TOA * 2) + TIME_BUF);
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <rdt_send_pkt+0x170>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	005a      	lsls	r2, r3, #1
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <rdt_send_pkt+0x174>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fb4b 	bl	8001b50 <wait_ms>
            break;
 80024ba:	e00c      	b.n	80024d6 <rdt_send_pkt+0x142>
        }

        if(retx_attempts > MAX_RETX_ATTEMPTS){
 80024bc:	2203      	movs	r2, #3
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	4293      	cmp	r3, r2
 80024c2:	dd03      	ble.n	80024cc <rdt_send_pkt+0x138>
            ret_val = -1;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80024ca:	e004      	b.n	80024d6 <rdt_send_pkt+0x142>
        }
        retx_attempts++;
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	3301      	adds	r3, #1
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
        start_time = tim2_tick_count;
 80024d2:	e773      	b.n	80023bc <rdt_send_pkt+0x28>
                break;
 80024d4:	bf00      	nop
    #if DBG_RDT
    HAL_printf("ack time: %u\n", tim2_tick_count - start_time);
    #endif


    free(pkt);
 80024d6:	6838      	ldr	r0, [r7, #0]
 80024d8:	f005 fa84 	bl	80079e4 <free>
    seqnum++;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <rdt_send_pkt+0x164>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <rdt_send_pkt+0x164>)
 80024e6:	801a      	strh	r2, [r3, #0]
    return ret_val;
 80024e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3738      	adds	r7, #56	; 0x38
 80024ee:	46bd      	mov	sp, r7
 80024f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024f4:	200003c0 	.word	0x200003c0
 80024f8:	200004b4 	.word	0x200004b4
 80024fc:	20000238 	.word	0x20000238
 8002500:	200001b4 	.word	0x200001b4
 8002504:	0800972c 	.word	0x0800972c
 8002508:	08009730 	.word	0x08009730
 800250c:	080095e8 	.word	0x080095e8
 8002510:	0800973c 	.word	0x0800973c
 8002514:	08009618 	.word	0x08009618

08002518 <rdt_recv_pkt>:

char *rdt_recv_pkt(UART_HandleTypeDef * lora_huart, UART_HandleTypeDef * serial_huart, mixnet_node_config_t *config) {
 8002518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800251c:	b090      	sub	sp, #64	; 0x40
 800251e:	af04      	add	r7, sp, #16
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
    char *raw_packet;
    mixnet_packet_t *recvd_packet;
    mixnet_packet_t *recorded_packet = NULL;
 8002526:	2300      	movs	r3, #0
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
    int recv_port = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t start_time, elapsed_time;
    err_code_t err_code;
    bool is_packet_retx = false;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t prev_seqnum;
    mixnet_address prev_src_addr;

    // block until you receive a packet WITHOUT errors
    while(1) {
        start_time = tim2_tick_count;
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <rdt_recv_pkt+0x184>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	623b      	str	r3, [r7, #32]
        #if DBG_RDT
        HAL_printf("[%u] Waiting for any packet...\n", config->node_addr);
        #endif
        
        raw_packet = lora_recv_data(&huart1, &huart2, 0, 0, BLOCKING, &err_code);
 800253a:	f107 0313 	add.w	r3, r7, #19
 800253e:	9303      	str	r3, [sp, #12]
 8002540:	2300      	movs	r3, #0
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	e9cd 2300 	strd	r2, r3, [sp]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	4951      	ldr	r1, [pc, #324]	; (80026a0 <rdt_recv_pkt+0x188>)
 800255a:	4852      	ldr	r0, [pc, #328]	; (80026a4 <rdt_recv_pkt+0x18c>)
 800255c:	f7fe fc9c 	bl	8000e98 <lora_recv_data>
 8002560:	61f8      	str	r0, [r7, #28]

        if(raw_packet != NULL){
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0e5      	beq.n	8002534 <rdt_recv_pkt+0x1c>
            start_time = tim2_tick_count;
 8002568:	4b4c      	ldr	r3, [pc, #304]	; (800269c <rdt_recv_pkt+0x184>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	623b      	str	r3, [r7, #32]
            recvd_packet = (mixnet_packet_t*)raw_packet;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	61bb      	str	r3, [r7, #24]

            recv_port  = get_port(config->neighbor_addrs, config->num_neighbors, recvd_packet->src_address);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6858      	ldr	r0, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	885b      	ldrh	r3, [r3, #2]
 800257a:	4619      	mov	r1, r3
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	f7ff feb6 	bl	80022f2 <get_port>
 8002586:	62b8      	str	r0, [r7, #40]	; 0x28
            if(recv_port != -1) {
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d0d1      	beq.n	8002534 <rdt_recv_pkt+0x1c>
                prev_seqnum = recvd_packet->seqnum;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	88db      	ldrh	r3, [r3, #6]
 8002594:	82fb      	strh	r3, [r7, #22]
                prev_src_addr = recvd_packet->src_address;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	82bb      	strh	r3, [r7, #20]
                recorded_packet = recvd_packet;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 80025a0:	bf00      	nop
            }
        }
    }   

    // at this point, a packet was received without errors
    assert((raw_packet != NULL) && (err_code == NO_ERROR));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <rdt_recv_pkt+0x96>
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <rdt_recv_pkt+0xa4>
 80025ae:	4b3e      	ldr	r3, [pc, #248]	; (80026a8 <rdt_recv_pkt+0x190>)
 80025b0:	4a3e      	ldr	r2, [pc, #248]	; (80026ac <rdt_recv_pkt+0x194>)
 80025b2:	f44f 618c 	mov.w	r1, #1120	; 0x460
 80025b6:	483e      	ldr	r0, [pc, #248]	; (80026b0 <rdt_recv_pkt+0x198>)
 80025b8:	f005 f992 	bl	80078e0 <__assert_func>

    #if DBG_RDT
    HAL_printf("recv time: %u\n", start_time);
    #endif

    send_ack_pkt(config, &huart1, &huart2, recvd_packet->src_address, recvd_packet->seqnum);
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	881a      	ldrh	r2, [r3, #0]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	88db      	ldrh	r3, [r3, #6]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	4613      	mov	r3, r2
 80025c8:	4a35      	ldr	r2, [pc, #212]	; (80026a0 <rdt_recv_pkt+0x188>)
 80025ca:	4936      	ldr	r1, [pc, #216]	; (80026a4 <rdt_recv_pkt+0x18c>)
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff feb5 	bl	800233c <send_ack_pkt>

    /* WAIT AND ACK */
    start_time = tim2_tick_count;
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <rdt_recv_pkt+0x184>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	623b      	str	r3, [r7, #32]
    HAL_printf("Checking for retransmissions\n");
 80025d8:	4836      	ldr	r0, [pc, #216]	; (80026b4 <rdt_recv_pkt+0x19c>)
 80025da:	f7ff fa91 	bl	8001b00 <HAL_printf>
    raw_packet = lora_recv_data(&huart1, &huart2, start_time, (LORA_TOA + TIME_BUF), NON_BLOCKING, &err_code);
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	2200      	movs	r2, #0
 80025e2:	4698      	mov	r8, r3
 80025e4:	4691      	mov	r9, r2
 80025e6:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <rdt_recv_pkt+0x1a0>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b34      	ldr	r3, [pc, #208]	; (80026bc <rdt_recv_pkt+0x1a4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	17da      	asrs	r2, r3, #31
 80025f2:	461c      	mov	r4, r3
 80025f4:	4615      	mov	r5, r2
 80025f6:	f107 0313 	add.w	r3, r7, #19
 80025fa:	9303      	str	r3, [sp, #12]
 80025fc:	2301      	movs	r3, #1
 80025fe:	9302      	str	r3, [sp, #8]
 8002600:	e9cd 4500 	strd	r4, r5, [sp]
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	4925      	ldr	r1, [pc, #148]	; (80026a0 <rdt_recv_pkt+0x188>)
 800260a:	4826      	ldr	r0, [pc, #152]	; (80026a4 <rdt_recv_pkt+0x18c>)
 800260c:	f7fe fc44 	bl	8000e98 <lora_recv_data>
 8002610:	61f8      	str	r0, [r7, #28]
    if(raw_packet != NULL){
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d029      	beq.n	800266c <rdt_recv_pkt+0x154>
        recvd_packet = (mixnet_packet_t*)raw_packet;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	61bb      	str	r3, [r7, #24]

        recv_port  = get_port(config->neighbor_addrs, config->num_neighbors, recvd_packet->src_address);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6858      	ldr	r0, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	885b      	ldrh	r3, [r3, #2]
 8002624:	4619      	mov	r1, r3
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	f7ff fe61 	bl	80022f2 <get_port>
 8002630:	62b8      	str	r0, [r7, #40]	; 0x28
        if(recv_port != -1) {
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d029      	beq.n	800268e <rdt_recv_pkt+0x176>
            if(recvd_packet->src_address == prev_src_addr && recvd_packet->seqnum == prev_seqnum){
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	8aba      	ldrh	r2, [r7, #20]
 8002640:	429a      	cmp	r2, r3
 8002642:	d124      	bne.n	800268e <rdt_recv_pkt+0x176>
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	88db      	ldrh	r3, [r3, #6]
 8002648:	8afa      	ldrh	r2, [r7, #22]
 800264a:	429a      	cmp	r2, r3
 800264c:	d11f      	bne.n	800268e <rdt_recv_pkt+0x176>
                HAL_printf("ACK'ing the re-transmission\n");
 800264e:	481c      	ldr	r0, [pc, #112]	; (80026c0 <rdt_recv_pkt+0x1a8>)
 8002650:	f7ff fa56 	bl	8001b00 <HAL_printf>
                send_ack_pkt(config, &huart1, &huart2, recvd_packet->src_address, recvd_packet->seqnum);
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	881a      	ldrh	r2, [r3, #0]
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	88db      	ldrh	r3, [r3, #6]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <rdt_recv_pkt+0x188>)
 8002662:	4910      	ldr	r1, [pc, #64]	; (80026a4 <rdt_recv_pkt+0x18c>)
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff fe69 	bl	800233c <send_ack_pkt>
 800266a:	e010      	b.n	800268e <rdt_recv_pkt+0x176>
            }
        }
    }else{
        if(err_code == NO_ERROR){
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <rdt_recv_pkt+0x162>
            HAL_printf("No retransmissions detected\n");
 8002672:	4814      	ldr	r0, [pc, #80]	; (80026c4 <rdt_recv_pkt+0x1ac>)
 8002674:	f7ff fa44 	bl	8001b00 <HAL_printf>
 8002678:	e004      	b.n	8002684 <rdt_recv_pkt+0x16c>
        }else{
            HAL_printf("Error %u in retransmission\n", err_code);
 800267a:	7cfb      	ldrb	r3, [r7, #19]
 800267c:	4619      	mov	r1, r3
 800267e:	4812      	ldr	r0, [pc, #72]	; (80026c8 <rdt_recv_pkt+0x1b0>)
 8002680:	f7ff fa3e 	bl	8001b00 <HAL_printf>
        }
        wait_ms(LORA_TOA);
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <rdt_recv_pkt+0x1a0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fa61 	bl	8001b50 <wait_ms>

    #if DBG_RDT
    HAL_printf("send ack time: %u\n", tim2_tick_count - start_time);
    #endif

    return (char*)recorded_packet;
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002690:	4618      	mov	r0, r3
 8002692:	3730      	adds	r7, #48	; 0x30
 8002694:	46bd      	mov	sp, r7
 8002696:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800269a:	bf00      	nop
 800269c:	200003c0 	.word	0x200003c0
 80026a0:	20000238 	.word	0x20000238
 80026a4:	200001b4 	.word	0x200001b4
 80026a8:	08009630 	.word	0x08009630
 80026ac:	0800974c 	.word	0x0800974c
 80026b0:	08009618 	.word	0x08009618
 80026b4:	08009660 	.word	0x08009660
 80026b8:	0800972c 	.word	0x0800972c
 80026bc:	08009730 	.word	0x08009730
 80026c0:	08009680 	.word	0x08009680
 80026c4:	080096a0 	.word	0x080096a0
 80026c8:	080096c0 	.word	0x080096c0

080026cc <init_sch>:
    }
    free(visited);
    free(to_visit);
}

void init_sch(schedule_t *sch){
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
    sch->total_ts = NUM_NODES - 1;
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <init_sch+0x60>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	801a      	strh	r2, [r3, #0]
    sch->rx_list = calloc((NUM_NODES - 1), sizeof(mixnet_address));
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <init_sch+0x60>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	2102      	movs	r1, #2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f005 f91a 	bl	8007924 <calloc>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	609a      	str	r2, [r3, #8]
    sch->tx_list = calloc((NUM_NODES - 1), sizeof(mixnet_address));
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <init_sch+0x60>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	2102      	movs	r1, #2
 8002700:	4618      	mov	r0, r3
 8002702:	f005 f90f 	bl	8007924 <calloc>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	605a      	str	r2, [r3, #4]
    sch->sch_recv_order = calloc((NUM_NODES - 1), sizeof(mixnet_address));
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <init_sch+0x60>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3b01      	subs	r3, #1
 8002714:	2102      	movs	r1, #2
 8002716:	4618      	mov	r0, r3
 8002718:	f005 f904 	bl	8007924 <calloc>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	60da      	str	r2, [r3, #12]
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	08009724 	.word	0x08009724

08002730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_MspInit+0x44>)
 8002738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273a:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <HAL_MspInit+0x44>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6613      	str	r3, [r2, #96]	; 0x60
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_MspInit+0x44>)
 8002744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_MspInit+0x44>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <HAL_MspInit+0x44>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_MspInit+0x44>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a15      	ldr	r2, [pc, #84]	; (80027ec <HAL_ADC_MspInit+0x74>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d124      	bne.n	80027e4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 80027a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = TEMP_SENSOR_Pin;
 80027ca:	2302      	movs	r3, #2
 80027cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80027ce:	230b      	movs	r3, #11
 80027d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMP_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e0:	f001 fc9c 	bl	800411c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027e4:	bf00      	nop
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	50040000 	.word	0x50040000
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b090      	sub	sp, #64	; 0x40
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	2234      	movs	r2, #52	; 0x34
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f005 f913 	bl	8007a30 <memset>
  if(hrtc->Instance==RTC)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <HAL_RTC_MspInit+0x68>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d11f      	bne.n	8002854 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002818:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800281a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800281e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	4618      	mov	r0, r3
 8002826:	f002 fcfd 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002830:	f7ff f960 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_RTC_MspInit+0x6c>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_RTC_MspInit+0x6c>)
 800283c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	2003      	movs	r0, #3
 800284a:	f001 fbb2 	bl	8003fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800284e:	2003      	movs	r0, #3
 8002850:	f001 fbcb 	bl	8003fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002854:	bf00      	nop
 8002856:	3740      	adds	r7, #64	; 0x40
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40002800 	.word	0x40002800
 8002860:	40021000 	.word	0x40021000

08002864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d114      	bne.n	80028a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_TIM_Base_MspInit+0x78>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	4a18      	ldr	r2, [pc, #96]	; (80028dc <HAL_TIM_Base_MspInit+0x78>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6593      	str	r3, [r2, #88]	; 0x58
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <HAL_TIM_Base_MspInit+0x78>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2101      	movs	r1, #1
 8002892:	201c      	movs	r0, #28
 8002894:	f001 fb8d 	bl	8003fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002898:	201c      	movs	r0, #28
 800289a:	f001 fba6 	bl	8003fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800289e:	e018      	b.n	80028d2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_TIM_Base_MspInit+0x7c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d113      	bne.n	80028d2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_TIM_Base_MspInit+0x78>)
 80028ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ae:	4a0b      	ldr	r2, [pc, #44]	; (80028dc <HAL_TIM_Base_MspInit+0x78>)
 80028b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b4:	6613      	str	r3, [r2, #96]	; 0x60
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_TIM_Base_MspInit+0x78>)
 80028b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	2019      	movs	r0, #25
 80028c8:	f001 fb73 	bl	8003fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80028cc:	2019      	movs	r0, #25
 80028ce:	f001 fb8c 	bl	8003fea <HAL_NVIC_EnableIRQ>
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40014400 	.word	0x40014400

080028e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b098      	sub	sp, #96	; 0x60
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028fc:	f107 0318 	add.w	r3, r7, #24
 8002900:	2234      	movs	r2, #52	; 0x34
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f005 f893 	bl	8007a30 <memset>
  if(huart->Instance==USART1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <HAL_UART_MspInit+0x18c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d152      	bne.n	80029ba <HAL_UART_MspInit+0xd6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002914:	2301      	movs	r3, #1
 8002916:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800291c:	f107 0318 	add.w	r3, r7, #24
 8002920:	4618      	mov	r0, r3
 8002922:	f002 fc7f 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800292c:	f7ff f8e2 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002930:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <HAL_UART_MspInit+0x190>)
 8002932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002934:	4a4f      	ldr	r2, [pc, #316]	; (8002a74 <HAL_UART_MspInit+0x190>)
 8002936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293a:	6613      	str	r3, [r2, #96]	; 0x60
 800293c:	4b4d      	ldr	r3, [pc, #308]	; (8002a74 <HAL_UART_MspInit+0x190>)
 800293e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002948:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <HAL_UART_MspInit+0x190>)
 800294a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294c:	4a49      	ldr	r2, [pc, #292]	; (8002a74 <HAL_UART_MspInit+0x190>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002954:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_UART_MspInit+0x190>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002964:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002972:	2307      	movs	r3, #7
 8002974:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800297a:	4619      	mov	r1, r3
 800297c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002980:	f001 fbcc 	bl	800411c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002988:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298a:	2312      	movs	r3, #18
 800298c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002996:	2307      	movs	r3, #7
 8002998:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a4:	f001 fbba 	bl	800411c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2102      	movs	r1, #2
 80029ac:	2025      	movs	r0, #37	; 0x25
 80029ae:	f001 fb00 	bl	8003fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029b2:	2025      	movs	r0, #37	; 0x25
 80029b4:	f001 fb19 	bl	8003fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029b8:	e055      	b.n	8002a66 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <HAL_UART_MspInit+0x194>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d150      	bne.n	8002a66 <HAL_UART_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029c4:	2302      	movs	r3, #2
 80029c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029c8:	2300      	movs	r3, #0
 80029ca:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029cc:	f107 0318 	add.w	r3, r7, #24
 80029d0:	4618      	mov	r0, r3
 80029d2:	f002 fc27 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 80029dc:	f7ff f88a 	bl	8001af4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029e0:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <HAL_UART_MspInit+0x190>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	4a23      	ldr	r2, [pc, #140]	; (8002a74 <HAL_UART_MspInit+0x190>)
 80029e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ea:	6593      	str	r3, [r2, #88]	; 0x58
 80029ec:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <HAL_UART_MspInit+0x190>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <HAL_UART_MspInit+0x190>)
 80029fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fc:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <HAL_UART_MspInit+0x190>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_UART_MspInit+0x190>)
 8002a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002a10:	2304      	movs	r3, #4
 8002a12:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a20:	2307      	movs	r3, #7
 8002a22:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002a24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2e:	f001 fb75 	bl	800411c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a36:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002a44:	2303      	movs	r3, #3
 8002a46:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a52:	f001 fb63 	bl	800411c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2103      	movs	r1, #3
 8002a5a:	2026      	movs	r0, #38	; 0x26
 8002a5c:	f001 faa9 	bl	8003fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a60:	2026      	movs	r0, #38	; 0x26
 8002a62:	f001 fac2 	bl	8003fea <HAL_NVIC_EnableIRQ>
}
 8002a66:	bf00      	nop
 8002a68:	3760      	adds	r7, #96	; 0x60
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40013800 	.word	0x40013800
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40004400 	.word	0x40004400

08002a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <NMI_Handler+0x4>

08002a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <HardFault_Handler+0x4>

08002a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <MemManage_Handler+0x4>

08002a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a92:	e7fe      	b.n	8002a92 <BusFault_Handler+0x4>

08002a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <UsageFault_Handler+0x4>

08002a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac8:	f000 f9c2 	bl	8002e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <RTC_WKUP_IRQHandler+0x10>)
 8002ad6:	f002 fef3 	bl	80058c0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200000f0 	.word	0x200000f0

08002ae4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002aea:	f002 ffbf 	bl	8005a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000168 	.word	0x20000168

08002af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <TIM2_IRQHandler+0x10>)
 8002afe:	f002 ffb5 	bl	8005a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000011c 	.word	0x2000011c

08002b0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <USART1_IRQHandler+0x10>)
 8002b12:	f003 fc4f 	bl	80063b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200001b4 	.word	0x200001b4

08002b20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <USART2_IRQHandler+0x10>)
 8002b26:	f003 fc45 	bl	80063b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000238 	.word	0x20000238

08002b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
	return 1;
 8002b38:	2301      	movs	r3, #1
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <_kill>:

int _kill(int pid, int sig)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b4e:	f004 fef1 	bl	8007934 <__errno>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2216      	movs	r2, #22
 8002b56:	601a      	str	r2, [r3, #0]
	return -1;
 8002b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_exit>:

void _exit (int status)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ffe7 	bl	8002b44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b76:	e7fe      	b.n	8002b76 <_exit+0x12>

08002b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e00a      	b.n	8002ba0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b8a:	f3af 8000 	nop.w
 8002b8e:	4601      	mov	r1, r0
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	60ba      	str	r2, [r7, #8]
 8002b96:	b2ca      	uxtb	r2, r1
 8002b98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	dbf0      	blt.n	8002b8a <_read+0x12>
	}

return len;
 8002ba8:	687b      	ldr	r3, [r7, #4]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e009      	b.n	8002bd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	60ba      	str	r2, [r7, #8]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	dbf1      	blt.n	8002bc4 <_write+0x12>
	}
	return len;
 8002be0:	687b      	ldr	r3, [r7, #4]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <_close>:

int _close(int file)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
	return -1;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c12:	605a      	str	r2, [r3, #4]
	return 0;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <_isatty>:

int _isatty(int file)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
	return 1;
 8002c2a:	2301      	movs	r3, #1
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
	return 0;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c5c:	4a14      	ldr	r2, [pc, #80]	; (8002cb0 <_sbrk+0x5c>)
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <_sbrk+0x60>)
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <_sbrk+0x64>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <_sbrk+0x64>)
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <_sbrk+0x68>)
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <_sbrk+0x64>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d207      	bcs.n	8002c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c84:	f004 fe56 	bl	8007934 <__errno>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c92:	e009      	b.n	8002ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <_sbrk+0x64>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <_sbrk+0x64>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4a05      	ldr	r2, [pc, #20]	; (8002cb8 <_sbrk+0x64>)
 8002ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	2000a000 	.word	0x2000a000
 8002cb4:	00000400 	.word	0x00000400
 8002cb8:	200004b8 	.word	0x200004b8
 8002cbc:	200004d0 	.word	0x200004d0

08002cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <SystemInit+0x20>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <SystemInit+0x20>)
 8002ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <UART2_tx_byte>:
    USART_TypeDef *uart= USART1;
    while(!(uart->ISR & UART_RXNE));
    return (char)uart->RDR;
}

void UART2_tx_byte(char byte) {
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
    USART_TypeDef *uart= USART2;
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <UART2_tx_byte+0x30>)
 8002cf0:	60fb      	str	r3, [r7, #12]
    while(!(uart->ISR & UART_TXE));
 8002cf2:	bf00      	nop
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f9      	beq.n	8002cf4 <UART2_tx_byte+0x10>
    uart->TDR = byte;
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	; 0x28
    return;
 8002d08:	bf00      	nop
}
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40004400 	.word	0x40004400

08002d18 <UART2_tx>:
    USART_TypeDef *uart= USART2;
    while(!(uart->ISR & UART_RXNE));
    return (char)uart->RDR;
}

void UART2_tx(char *data) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
    int i=0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
    char byte;
    while(byte != '\n' && byte != 0) {
 8002d24:	e00b      	b.n	8002d3e <UART2_tx+0x26>
        byte= data[i];
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	72fb      	strb	r3, [r7, #11]
        UART2_tx_byte(byte);
 8002d30:	7afb      	ldrb	r3, [r7, #11]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ffd6 	bl	8002ce4 <UART2_tx_byte>
        i++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
    while(byte != '\n' && byte != 0) {
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
 8002d40:	2b0a      	cmp	r3, #10
 8002d42:	d002      	beq.n	8002d4a <UART2_tx+0x32>
 8002d44:	7afb      	ldrb	r3, [r7, #11]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ed      	bne.n	8002d26 <UART2_tx+0xe>
    }
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d58:	f7ff ffb2 	bl	8002cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d5c:	480c      	ldr	r0, [pc, #48]	; (8002d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d5e:	490d      	ldr	r1, [pc, #52]	; (8002d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d60:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <LoopForever+0xe>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d64:	e002      	b.n	8002d6c <LoopCopyDataInit>

08002d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d6a:	3304      	adds	r3, #4

08002d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d70:	d3f9      	bcc.n	8002d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d74:	4c0a      	ldr	r4, [pc, #40]	; (8002da0 <LoopForever+0x16>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d78:	e001      	b.n	8002d7e <LoopFillZerobss>

08002d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d7c:	3204      	adds	r2, #4

08002d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d80:	d3fb      	bcc.n	8002d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d82:	f004 fe03 	bl	800798c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d86:	f7fe f9b9 	bl	80010fc <main>

08002d8a <LoopForever>:

LoopForever:
    b LoopForever
 8002d8a:	e7fe      	b.n	8002d8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d8c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002d98:	080099fc 	.word	0x080099fc
  ldr r2, =_sbss
 8002d9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002da0:	200004d0 	.word	0x200004d0

08002da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002da4:	e7fe      	b.n	8002da4 <ADC1_2_IRQHandler>

08002da6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db0:	2003      	movs	r0, #3
 8002db2:	f001 f8f3 	bl	8003f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002db6:	2000      	movs	r0, #0
 8002db8:	f000 f80e 	bl	8002dd8 <HAL_InitTick>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	71fb      	strb	r3, [r7, #7]
 8002dc6:	e001      	b.n	8002dcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dc8:	f7ff fcb2 	bl	8002730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <HAL_InitTick+0x6c>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d023      	beq.n	8002e34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_InitTick+0x70>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_InitTick+0x6c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	4619      	mov	r1, r3
 8002df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 f8ff 	bl	8004006 <HAL_SYSTICK_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	d809      	bhi.n	8002e28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e14:	2200      	movs	r2, #0
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f001 f8c9 	bl	8003fb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e20:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <HAL_InitTick+0x74>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	e007      	b.n	8002e38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	e004      	b.n	8002e38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e001      	b.n	8002e38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000008 	.word	0x20000008
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	20000004 	.word	0x20000004

08002e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_IncTick+0x20>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_IncTick+0x24>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <HAL_IncTick+0x24>)
 8002e62:	6013      	str	r3, [r2, #0]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000008 	.word	0x20000008
 8002e74:	200004bc 	.word	0x200004bc

08002e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_GetTick+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	200004bc 	.word	0x200004bc

08002e90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3360      	adds	r3, #96	; 0x60
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <LL_ADC_SetOffset+0x44>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f30:	bf00      	nop
 8002f32:	371c      	adds	r7, #28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	03fff000 	.word	0x03fff000

08002f40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3360      	adds	r3, #96	; 0x60
 8002f4e:	461a      	mov	r2, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3360      	adds	r3, #96	; 0x60
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	615a      	str	r2, [r3, #20]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3330      	adds	r3, #48	; 0x30
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	4413      	add	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	211f      	movs	r1, #31
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	0e9b      	lsrs	r3, r3, #26
 8003000:	f003 011f 	and.w	r1, r3, #31
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	431a      	orrs	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3314      	adds	r3, #20
 8003030:	461a      	mov	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	0e5b      	lsrs	r3, r3, #25
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	4413      	add	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	0d1b      	lsrs	r3, r3, #20
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	2107      	movs	r1, #7
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	401a      	ands	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	0d1b      	lsrs	r3, r3, #20
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	431a      	orrs	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003090:	43db      	mvns	r3, r3
 8003092:	401a      	ands	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0318 	and.w	r3, r3, #24
 800309a:	4908      	ldr	r1, [pc, #32]	; (80030bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800309c:	40d9      	lsrs	r1, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	400b      	ands	r3, r1
 80030a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a6:	431a      	orrs	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	0007ffff 	.word	0x0007ffff

080030c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80030d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6093      	str	r3, [r2, #8]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030f8:	d101      	bne.n	80030fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800311c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003120:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003148:	d101      	bne.n	800314e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <LL_ADC_IsEnabled+0x18>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <LL_ADC_IsEnabled+0x1a>
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b04      	cmp	r3, #4
 8003194:	d101      	bne.n	800319a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d101      	bne.n	80031c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b089      	sub	sp, #36	; 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e131      	b.n	800344e <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff fabd 	bl	8002778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff67 	bl	80030e4 <LL_ADC_IsDeepPowerDownEnabled>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff4d 	bl	80030c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff82 	bl	8003134 <LL_ADC_IsInternalRegulatorEnabled>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d115      	bne.n	8003262 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ff66 	bl	800310c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003240:	4b85      	ldr	r3, [pc, #532]	; (8003458 <HAL_ADC_Init+0x288>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	4a85      	ldr	r2, [pc, #532]	; (800345c <HAL_ADC_Init+0x28c>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	099b      	lsrs	r3, r3, #6
 800324e:	3301      	adds	r3, #1
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003254:	e002      	b.n	800325c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	3b01      	subs	r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f9      	bne.n	8003256 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ff64 	bl	8003134 <LL_ADC_IsInternalRegulatorEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10d      	bne.n	800328e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f043 0210 	orr.w	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ff75 	bl	8003182 <LL_ADC_REG_IsConversionOngoing>
 8003298:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 80ca 	bne.w	800343c <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 80c6 	bne.w	800343c <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032b8:	f043 0202 	orr.w	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff49 	bl	800315c <LL_ADC_IsEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d110      	bne.n	80032f2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d0:	4863      	ldr	r0, [pc, #396]	; (8003460 <HAL_ADC_Init+0x290>)
 80032d2:	f7ff ff43 	bl	800315c <LL_ADC_IsEnabled>
 80032d6:	4604      	mov	r4, r0
 80032d8:	4862      	ldr	r0, [pc, #392]	; (8003464 <HAL_ADC_Init+0x294>)
 80032da:	f7ff ff3f 	bl	800315c <LL_ADC_IsEnabled>
 80032de:	4603      	mov	r3, r0
 80032e0:	4323      	orrs	r3, r4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d105      	bne.n	80032f2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4619      	mov	r1, r3
 80032ec:	485e      	ldr	r0, [pc, #376]	; (8003468 <HAL_ADC_Init+0x298>)
 80032ee:	f7ff fdcf 	bl	8002e90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7e5b      	ldrb	r3, [r3, #25]
 80032f6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032fc:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003302:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003308:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003310:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d106      	bne.n	800332e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	3b01      	subs	r3, #1
 8003326:	045b      	lsls	r3, r3, #17
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	4b46      	ldr	r3, [pc, #280]	; (800346c <HAL_ADC_Init+0x29c>)
 8003352:	4013      	ands	r3, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	69b9      	ldr	r1, [r7, #24]
 800335a:	430b      	orrs	r3, r1
 800335c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff0d 	bl	8003182 <LL_ADC_REG_IsConversionOngoing>
 8003368:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff ff1a 	bl	80031a8 <LL_ADC_INJ_IsConversionOngoing>
 8003374:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d13d      	bne.n	80033f8 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d13a      	bne.n	80033f8 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003386:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800338e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800339e:	f023 0302 	bic.w	r3, r3, #2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	69b9      	ldr	r1, [r7, #24]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d118      	bne.n	80033e8 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033cc:	4311      	orrs	r1, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033d2:	4311      	orrs	r1, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033d8:	430a      	orrs	r2, r1
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	611a      	str	r2, [r3, #16]
 80033e6:	e007      	b.n	80033f8 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d10c      	bne.n	800341a <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f023 010f 	bic.w	r1, r3, #15
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	1e5a      	subs	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
 8003418:	e007      	b.n	800342a <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 020f 	bic.w	r2, r2, #15
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	f023 0303 	bic.w	r3, r3, #3
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
 800343a:	e007      	b.n	800344c <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	f043 0210 	orr.w	r2, r3, #16
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800344c:	7ffb      	ldrb	r3, [r7, #31]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3724      	adds	r7, #36	; 0x24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd90      	pop	{r4, r7, pc}
 8003456:	bf00      	nop
 8003458:	20000000 	.word	0x20000000
 800345c:	053e2d63 	.word	0x053e2d63
 8003460:	50040000 	.word	0x50040000
 8003464:	50040100 	.word	0x50040100
 8003468:	50040300 	.word	0x50040300
 800346c:	fff0c007 	.word	0xfff0c007

08003470 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b0b6      	sub	sp, #216	; 0xd8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x22>
 800348e:	2302      	movs	r3, #2
 8003490:	e3d5      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x7ce>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fe6f 	bl	8003182 <LL_ADC_REG_IsConversionOngoing>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 83ba 	bne.w	8003c20 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d824      	bhi.n	80034fe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	3b02      	subs	r3, #2
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d81b      	bhi.n	80034f6 <HAL_ADC_ConfigChannel+0x86>
 80034be:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <HAL_ADC_ConfigChannel+0x54>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080034d5 	.word	0x080034d5
 80034c8:	080034dd 	.word	0x080034dd
 80034cc:	080034e5 	.word	0x080034e5
 80034d0:	080034ed 	.word	0x080034ed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	220c      	movs	r2, #12
 80034d8:	605a      	str	r2, [r3, #4]
          break;
 80034da:	e011      	b.n	8003500 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2212      	movs	r2, #18
 80034e0:	605a      	str	r2, [r3, #4]
          break;
 80034e2:	e00d      	b.n	8003500 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2218      	movs	r2, #24
 80034e8:	605a      	str	r2, [r3, #4]
          break;
 80034ea:	e009      	b.n	8003500 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f2:	605a      	str	r2, [r3, #4]
          break;
 80034f4:	e004      	b.n	8003500 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2206      	movs	r2, #6
 80034fa:	605a      	str	r2, [r3, #4]
          break;
 80034fc:	e000      	b.n	8003500 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80034fe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	f7ff fd5b 	bl	8002fc8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fe33 	bl	8003182 <LL_ADC_REG_IsConversionOngoing>
 800351c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fe3f 	bl	80031a8 <LL_ADC_INJ_IsConversionOngoing>
 800352a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800352e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 81c1 	bne.w	80038ba <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 81bc 	bne.w	80038ba <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800354a:	d10f      	bne.n	800356c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2200      	movs	r2, #0
 8003556:	4619      	mov	r1, r3
 8003558:	f7ff fd62 	bl	8003020 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fd1c 	bl	8002fa2 <LL_ADC_SetSamplingTimeCommonConfig>
 800356a:	e00e      	b.n	800358a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6819      	ldr	r1, [r3, #0]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	461a      	mov	r2, r3
 800357a:	f7ff fd51 	bl	8003020 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fd0c 	bl	8002fa2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	08db      	lsrs	r3, r3, #3
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d00a      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6919      	ldr	r1, [r3, #16]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035bc:	f7ff fc9c 	bl	8002ef8 <LL_ADC_SetOffset>
 80035c0:	e17b      	b.n	80038ba <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fcb9 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x17e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fcae 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 80035e4:	4603      	mov	r3, r0
 80035e6:	0e9b      	lsrs	r3, r3, #26
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	e01e      	b.n	800362c <HAL_ADC_ConfigChannel+0x1bc>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fca3 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800360c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800361c:	2320      	movs	r3, #32
 800361e:	e004      	b.n	800362a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003620:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x1d4>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	0e9b      	lsrs	r3, r3, #26
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	e018      	b.n	8003676 <HAL_ADC_ConfigChannel+0x206>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003650:	fa93 f3a3 	rbit	r3, r3
 8003654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800365c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003668:	2320      	movs	r3, #32
 800366a:	e004      	b.n	8003676 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800366c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003670:	fab3 f383 	clz	r3, r3
 8003674:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003676:	429a      	cmp	r2, r3
 8003678:	d106      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fc72 	bl	8002f6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2101      	movs	r1, #1
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fc56 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 8003694:	4603      	mov	r3, r0
 8003696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x244>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fc4b 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 80036aa:	4603      	mov	r3, r0
 80036ac:	0e9b      	lsrs	r3, r3, #26
 80036ae:	f003 021f 	and.w	r2, r3, #31
 80036b2:	e01e      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x282>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fc40 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80036d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80036da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e004      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80036e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d105      	bne.n	800370a <HAL_ADC_ConfigChannel+0x29a>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0e9b      	lsrs	r3, r3, #26
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	e018      	b.n	800373c <HAL_ADC_ConfigChannel+0x2cc>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800371e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800372e:	2320      	movs	r3, #32
 8003730:	e004      	b.n	800373c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003732:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800373c:	429a      	cmp	r2, r3
 800373e:	d106      	bne.n	800374e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2200      	movs	r2, #0
 8003746:	2101      	movs	r1, #1
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fc0f 	bl	8002f6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2102      	movs	r1, #2
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fbf3 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 800375a:	4603      	mov	r3, r0
 800375c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <HAL_ADC_ConfigChannel+0x30a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2102      	movs	r1, #2
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fbe8 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 8003770:	4603      	mov	r3, r0
 8003772:	0e9b      	lsrs	r3, r3, #26
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	e01e      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x348>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2102      	movs	r1, #2
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fbdd 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 8003786:	4603      	mov	r3, r0
 8003788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800379c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80037a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80037a8:	2320      	movs	r3, #32
 80037aa:	e004      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80037ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x360>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0e9b      	lsrs	r3, r3, #26
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	e016      	b.n	80037fe <HAL_ADC_ConfigChannel+0x38e>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80037e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80037e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80037f0:	2320      	movs	r3, #32
 80037f2:	e004      	b.n	80037fe <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80037f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037f8:	fab3 f383 	clz	r3, r3
 80037fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037fe:	429a      	cmp	r2, r3
 8003800:	d106      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	2102      	movs	r1, #2
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fbae 	bl	8002f6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2103      	movs	r1, #3
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fb92 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 800381c:	4603      	mov	r3, r0
 800381e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <HAL_ADC_ConfigChannel+0x3cc>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2103      	movs	r1, #3
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fb87 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 8003832:	4603      	mov	r3, r0
 8003834:	0e9b      	lsrs	r3, r3, #26
 8003836:	f003 021f 	and.w	r2, r3, #31
 800383a:	e017      	b.n	800386c <HAL_ADC_ConfigChannel+0x3fc>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2103      	movs	r1, #3
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fb7c 	bl	8002f40 <LL_ADC_GetOffsetChannel>
 8003848:	4603      	mov	r3, r0
 800384a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003856:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800385e:	2320      	movs	r3, #32
 8003860:	e003      	b.n	800386a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x414>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	0e9b      	lsrs	r3, r3, #26
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	e011      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x438>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003894:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800389c:	2320      	movs	r3, #32
 800389e:	e003      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80038a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d106      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2200      	movs	r2, #0
 80038b2:	2103      	movs	r1, #3
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fb59 	bl	8002f6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fc4c 	bl	800315c <LL_ADC_IsEnabled>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f040 8140 	bne.w	8003b4c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6819      	ldr	r1, [r3, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	461a      	mov	r2, r3
 80038da:	f7ff fbcd 	bl	8003078 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4a8f      	ldr	r2, [pc, #572]	; (8003b20 <HAL_ADC_ConfigChannel+0x6b0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	f040 8131 	bne.w	8003b4c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x4a2>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	0e9b      	lsrs	r3, r3, #26
 8003900:	3301      	adds	r3, #1
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	2b09      	cmp	r3, #9
 8003908:	bf94      	ite	ls
 800390a:	2301      	movls	r3, #1
 800390c:	2300      	movhi	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	e019      	b.n	8003946 <HAL_ADC_ConfigChannel+0x4d6>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003922:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800392a:	2320      	movs	r3, #32
 800392c:	e003      	b.n	8003936 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800392e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	3301      	adds	r3, #1
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	2b09      	cmp	r3, #9
 800393e:	bf94      	ite	ls
 8003940:	2301      	movls	r3, #1
 8003942:	2300      	movhi	r3, #0
 8003944:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003946:	2b00      	cmp	r3, #0
 8003948:	d079      	beq.n	8003a3e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003952:	2b00      	cmp	r3, #0
 8003954:	d107      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x4f6>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	0e9b      	lsrs	r3, r3, #26
 800395c:	3301      	adds	r3, #1
 800395e:	069b      	lsls	r3, r3, #26
 8003960:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003964:	e015      	b.n	8003992 <HAL_ADC_ConfigChannel+0x522>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003976:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800397e:	2320      	movs	r3, #32
 8003980:	e003      	b.n	800398a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	3301      	adds	r3, #1
 800398c:	069b      	lsls	r3, r3, #26
 800398e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x542>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	0e9b      	lsrs	r3, r3, #26
 80039a4:	3301      	adds	r3, #1
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	2101      	movs	r1, #1
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	e017      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x572>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80039c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80039c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80039ca:	2320      	movs	r3, #32
 80039cc:	e003      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80039ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2101      	movs	r1, #1
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	ea42 0103 	orr.w	r1, r2, r3
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x598>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	0e9b      	lsrs	r3, r3, #26
 80039f8:	3301      	adds	r3, #1
 80039fa:	f003 021f 	and.w	r2, r3, #31
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	051b      	lsls	r3, r3, #20
 8003a06:	e018      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x5ca>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003a20:	2320      	movs	r3, #32
 8003a22:	e003      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f003 021f 	and.w	r2, r3, #31
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	e081      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d107      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x5ea>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	0e9b      	lsrs	r3, r3, #26
 8003a50:	3301      	adds	r3, #1
 8003a52:	069b      	lsls	r3, r3, #26
 8003a54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a58:	e015      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x616>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003a72:	2320      	movs	r3, #32
 8003a74:	e003      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	069b      	lsls	r3, r3, #26
 8003a82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x636>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	0e9b      	lsrs	r3, r3, #26
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa4:	e017      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x666>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	fa93 f3a3 	rbit	r3, r3
 8003ab2:	61fb      	str	r3, [r7, #28]
  return result;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003abe:	2320      	movs	r3, #32
 8003ac0:	e003      	b.n	8003aca <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	fab3 f383 	clz	r3, r3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	ea42 0103 	orr.w	r1, r2, r3
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10d      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x692>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	0e9b      	lsrs	r3, r3, #26
 8003aec:	3301      	adds	r3, #1
 8003aee:	f003 021f 	and.w	r2, r3, #31
 8003af2:	4613      	mov	r3, r2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4413      	add	r3, r2
 8003af8:	3b1e      	subs	r3, #30
 8003afa:	051b      	lsls	r3, r3, #20
 8003afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b00:	e01e      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x6d0>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	613b      	str	r3, [r7, #16]
  return result;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d104      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003b1a:	2320      	movs	r3, #32
 8003b1c:	e006      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x6bc>
 8003b1e:	bf00      	nop
 8003b20:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f003 021f 	and.w	r2, r3, #31
 8003b32:	4613      	mov	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	4413      	add	r3, r2
 8003b38:	3b1e      	subs	r3, #30
 8003b3a:	051b      	lsls	r3, r3, #20
 8003b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b40:	430b      	orrs	r3, r1
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	6892      	ldr	r2, [r2, #8]
 8003b46:	4619      	mov	r1, r3
 8003b48:	f7ff fa6a 	bl	8003020 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b3d      	ldr	r3, [pc, #244]	; (8003c48 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d06c      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b58:	483c      	ldr	r0, [pc, #240]	; (8003c4c <HAL_ADC_ConfigChannel+0x7dc>)
 8003b5a:	f7ff f9bf 	bl	8002edc <LL_ADC_GetCommonPathInternalCh>
 8003b5e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a3a      	ldr	r2, [pc, #232]	; (8003c50 <HAL_ADC_ConfigChannel+0x7e0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d127      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d121      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a35      	ldr	r2, [pc, #212]	; (8003c54 <HAL_ADC_ConfigChannel+0x7e4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d157      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	482f      	ldr	r0, [pc, #188]	; (8003c4c <HAL_ADC_ConfigChannel+0x7dc>)
 8003b8e:	f7ff f992 	bl	8002eb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b92:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <HAL_ADC_ConfigChannel+0x7e8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	4a30      	ldr	r2, [pc, #192]	; (8003c5c <HAL_ADC_ConfigChannel+0x7ec>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bac:	e002      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f9      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bba:	e03a      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a27      	ldr	r2, [pc, #156]	; (8003c60 <HAL_ADC_ConfigChannel+0x7f0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d113      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x77e>
 8003bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1f      	ldr	r2, [pc, #124]	; (8003c54 <HAL_ADC_ConfigChannel+0x7e4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d12a      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be4:	4619      	mov	r1, r3
 8003be6:	4819      	ldr	r0, [pc, #100]	; (8003c4c <HAL_ADC_ConfigChannel+0x7dc>)
 8003be8:	f7ff f965 	bl	8002eb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bec:	e021      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <HAL_ADC_ConfigChannel+0x7f4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d11c      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d116      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <HAL_ADC_ConfigChannel+0x7e4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d111      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c16:	4619      	mov	r1, r3
 8003c18:	480c      	ldr	r0, [pc, #48]	; (8003c4c <HAL_ADC_ConfigChannel+0x7dc>)
 8003c1a:	f7ff f94c 	bl	8002eb6 <LL_ADC_SetCommonPathInternalCh>
 8003c1e:	e008      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	37d8      	adds	r7, #216	; 0xd8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	80080000 	.word	0x80080000
 8003c4c:	50040300 	.word	0x50040300
 8003c50:	c7520000 	.word	0xc7520000
 8003c54:	50040000 	.word	0x50040000
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	053e2d63 	.word	0x053e2d63
 8003c60:	cb840000 	.word	0xcb840000
 8003c64:	80000001 	.word	0x80000001

08003c68 <LL_ADC_IsEnabled>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <LL_ADC_IsEnabled+0x18>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <LL_ADC_IsEnabled+0x1a>
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <LL_ADC_REG_IsConversionOngoing>:
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d101      	bne.n	8003ca6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b09f      	sub	sp, #124	; 0x7c
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e089      	b.n	8003de6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a42      	ldr	r2, [pc, #264]	; (8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d102      	bne.n	8003cf2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cec:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003cee:	60bb      	str	r3, [r7, #8]
 8003cf0:	e001      	b.n	8003cf6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e068      	b.n	8003de6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ffb9 	bl	8003c8e <LL_ADC_REG_IsConversionOngoing>
 8003d1c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff ffb3 	bl	8003c8e <LL_ADC_REG_IsConversionOngoing>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d14a      	bne.n	8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d147      	bne.n	8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d34:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003d36:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d027      	beq.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d52:	035b      	lsls	r3, r3, #13
 8003d54:	430b      	orrs	r3, r1
 8003d56:	431a      	orrs	r2, r3
 8003d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d5c:	4824      	ldr	r0, [pc, #144]	; (8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003d5e:	f7ff ff83 	bl	8003c68 <LL_ADC_IsEnabled>
 8003d62:	4604      	mov	r4, r0
 8003d64:	4823      	ldr	r0, [pc, #140]	; (8003df4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d66:	f7ff ff7f 	bl	8003c68 <LL_ADC_IsEnabled>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4323      	orrs	r3, r4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d132      	bne.n	8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d7a:	f023 030f 	bic.w	r3, r3, #15
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	6811      	ldr	r1, [r2, #0]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	6892      	ldr	r2, [r2, #8]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d8e:	e023      	b.n	8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d9c:	4814      	ldr	r0, [pc, #80]	; (8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003d9e:	f7ff ff63 	bl	8003c68 <LL_ADC_IsEnabled>
 8003da2:	4604      	mov	r4, r0
 8003da4:	4813      	ldr	r0, [pc, #76]	; (8003df4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003da6:	f7ff ff5f 	bl	8003c68 <LL_ADC_IsEnabled>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4323      	orrs	r3, r4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d112      	bne.n	8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003dba:	f023 030f 	bic.w	r3, r3, #15
 8003dbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dc0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dc2:	e009      	b.n	8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003dd6:	e000      	b.n	8003dda <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003de2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	377c      	adds	r7, #124	; 0x7c
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd90      	pop	{r4, r7, pc}
 8003dee:	bf00      	nop
 8003df0:	50040000 	.word	0x50040000
 8003df4:	50040100 	.word	0x50040100
 8003df8:	50040300 	.word	0x50040300

08003dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <__NVIC_SetPriorityGrouping+0x44>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e2e:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <__NVIC_SetPriorityGrouping+0x44>)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	60d3      	str	r3, [r2, #12]
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	e000ed00 	.word	0xe000ed00

08003e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e48:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <__NVIC_GetPriorityGrouping+0x18>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	f003 0307 	and.w	r3, r3, #7
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	db0b      	blt.n	8003e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	4907      	ldr	r1, [pc, #28]	; (8003e98 <__NVIC_EnableIRQ+0x38>)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2001      	movs	r0, #1
 8003e82:	fa00 f202 	lsl.w	r2, r0, r2
 8003e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	e000e100 	.word	0xe000e100

08003e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	6039      	str	r1, [r7, #0]
 8003ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	db0a      	blt.n	8003ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	490c      	ldr	r1, [pc, #48]	; (8003ee8 <__NVIC_SetPriority+0x4c>)
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	0112      	lsls	r2, r2, #4
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ec4:	e00a      	b.n	8003edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	4908      	ldr	r1, [pc, #32]	; (8003eec <__NVIC_SetPriority+0x50>)
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	3b04      	subs	r3, #4
 8003ed4:	0112      	lsls	r2, r2, #4
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	440b      	add	r3, r1
 8003eda:	761a      	strb	r2, [r3, #24]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000e100 	.word	0xe000e100
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b089      	sub	sp, #36	; 0x24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f1c3 0307 	rsb	r3, r3, #7
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	bf28      	it	cs
 8003f0e:	2304      	movcs	r3, #4
 8003f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3304      	adds	r3, #4
 8003f16:	2b06      	cmp	r3, #6
 8003f18:	d902      	bls.n	8003f20 <NVIC_EncodePriority+0x30>
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3b03      	subs	r3, #3
 8003f1e:	e000      	b.n	8003f22 <NVIC_EncodePriority+0x32>
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f24:	f04f 32ff 	mov.w	r2, #4294967295
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	401a      	ands	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f38:	f04f 31ff 	mov.w	r1, #4294967295
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f42:	43d9      	mvns	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f48:	4313      	orrs	r3, r2
         );
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3724      	adds	r7, #36	; 0x24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f68:	d301      	bcc.n	8003f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e00f      	b.n	8003f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <SysTick_Config+0x40>)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f76:	210f      	movs	r1, #15
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	f7ff ff8e 	bl	8003e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <SysTick_Config+0x40>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f86:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <SysTick_Config+0x40>)
 8003f88:	2207      	movs	r2, #7
 8003f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	e000e010 	.word	0xe000e010

08003f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ff29 	bl	8003dfc <__NVIC_SetPriorityGrouping>
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b086      	sub	sp, #24
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	4603      	mov	r3, r0
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fc4:	f7ff ff3e 	bl	8003e44 <__NVIC_GetPriorityGrouping>
 8003fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	6978      	ldr	r0, [r7, #20]
 8003fd0:	f7ff ff8e 	bl	8003ef0 <NVIC_EncodePriority>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff5d 	bl	8003e9c <__NVIC_SetPriority>
}
 8003fe2:	bf00      	nop
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff ff31 	bl	8003e60 <__NVIC_EnableIRQ>
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff ffa2 	bl	8003f58 <SysTick_Config>
 8004014:	4603      	mov	r3, r0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d008      	beq.n	8004048 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2204      	movs	r2, #4
 800403a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e022      	b.n	800408e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 020e 	bic.w	r2, r2, #14
 8004056:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	f003 021c 	and.w	r2, r3, #28
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2101      	movs	r1, #1
 8004076:	fa01 f202 	lsl.w	r2, r1, r2
 800407a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d005      	beq.n	80040be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2204      	movs	r2, #4
 80040b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	e029      	b.n	8004112 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 020e 	bic.w	r2, r2, #14
 80040cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f003 021c 	and.w	r2, r3, #28
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	2101      	movs	r1, #1
 80040ec:	fa01 f202 	lsl.w	r2, r1, r2
 80040f0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
    }
  }
  return status;
 8004112:	7bfb      	ldrb	r3, [r7, #15]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800412a:	e14e      	b.n	80043ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	2101      	movs	r1, #1
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	fa01 f303 	lsl.w	r3, r1, r3
 8004138:	4013      	ands	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8140 	beq.w	80043c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d005      	beq.n	800415c <HAL_GPIO_Init+0x40>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d130      	bne.n	80041be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	2203      	movs	r2, #3
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4013      	ands	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004192:	2201      	movs	r2, #1
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 0201 	and.w	r2, r3, #1
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d017      	beq.n	80041fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	2203      	movs	r2, #3
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43db      	mvns	r3, r3
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4013      	ands	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d123      	bne.n	800424e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	08da      	lsrs	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3208      	adds	r2, #8
 800420e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	220f      	movs	r2, #15
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4013      	ands	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	08da      	lsrs	r2, r3, #3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3208      	adds	r2, #8
 8004248:	6939      	ldr	r1, [r7, #16]
 800424a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	2203      	movs	r2, #3
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43db      	mvns	r3, r3
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4013      	ands	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 0203 	and.w	r2, r3, #3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 809a 	beq.w	80043c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004290:	4b55      	ldr	r3, [pc, #340]	; (80043e8 <HAL_GPIO_Init+0x2cc>)
 8004292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004294:	4a54      	ldr	r2, [pc, #336]	; (80043e8 <HAL_GPIO_Init+0x2cc>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6613      	str	r3, [r2, #96]	; 0x60
 800429c:	4b52      	ldr	r3, [pc, #328]	; (80043e8 <HAL_GPIO_Init+0x2cc>)
 800429e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042a8:	4a50      	ldr	r2, [pc, #320]	; (80043ec <HAL_GPIO_Init+0x2d0>)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	3302      	adds	r3, #2
 80042b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	220f      	movs	r2, #15
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4013      	ands	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042d2:	d013      	beq.n	80042fc <HAL_GPIO_Init+0x1e0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a46      	ldr	r2, [pc, #280]	; (80043f0 <HAL_GPIO_Init+0x2d4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00d      	beq.n	80042f8 <HAL_GPIO_Init+0x1dc>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a45      	ldr	r2, [pc, #276]	; (80043f4 <HAL_GPIO_Init+0x2d8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d007      	beq.n	80042f4 <HAL_GPIO_Init+0x1d8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a44      	ldr	r2, [pc, #272]	; (80043f8 <HAL_GPIO_Init+0x2dc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d101      	bne.n	80042f0 <HAL_GPIO_Init+0x1d4>
 80042ec:	2303      	movs	r3, #3
 80042ee:	e006      	b.n	80042fe <HAL_GPIO_Init+0x1e2>
 80042f0:	2307      	movs	r3, #7
 80042f2:	e004      	b.n	80042fe <HAL_GPIO_Init+0x1e2>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e002      	b.n	80042fe <HAL_GPIO_Init+0x1e2>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_GPIO_Init+0x1e2>
 80042fc:	2300      	movs	r3, #0
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	f002 0203 	and.w	r2, r2, #3
 8004304:	0092      	lsls	r2, r2, #2
 8004306:	4093      	lsls	r3, r2
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800430e:	4937      	ldr	r1, [pc, #220]	; (80043ec <HAL_GPIO_Init+0x2d0>)
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	089b      	lsrs	r3, r3, #2
 8004314:	3302      	adds	r3, #2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800431c:	4b37      	ldr	r3, [pc, #220]	; (80043fc <HAL_GPIO_Init+0x2e0>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	43db      	mvns	r3, r3
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004340:	4a2e      	ldr	r2, [pc, #184]	; (80043fc <HAL_GPIO_Init+0x2e0>)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004346:	4b2d      	ldr	r3, [pc, #180]	; (80043fc <HAL_GPIO_Init+0x2e0>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800436a:	4a24      	ldr	r2, [pc, #144]	; (80043fc <HAL_GPIO_Init+0x2e0>)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004370:	4b22      	ldr	r3, [pc, #136]	; (80043fc <HAL_GPIO_Init+0x2e0>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	43db      	mvns	r3, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4013      	ands	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <HAL_GPIO_Init+0x2e0>)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800439a:	4b18      	ldr	r3, [pc, #96]	; (80043fc <HAL_GPIO_Init+0x2e0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043be:	4a0f      	ldr	r2, [pc, #60]	; (80043fc <HAL_GPIO_Init+0x2e0>)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	3301      	adds	r3, #1
 80043c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f47f aea9 	bne.w	800412c <HAL_GPIO_Init+0x10>
  }
}
 80043da:	bf00      	nop
 80043dc:	bf00      	nop
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40010000 	.word	0x40010000
 80043f0:	48000400 	.word	0x48000400
 80043f4:	48000800 	.word	0x48000800
 80043f8:	48000c00 	.word	0x48000c00
 80043fc:	40010400 	.word	0x40010400

08004400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
 800440c:	4613      	mov	r3, r2
 800440e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004410:	787b      	ldrb	r3, [r7, #1]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800441c:	e002      	b.n	8004424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800441e:	887a      	ldrh	r2, [r7, #2]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800443a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443e:	6013      	str	r3, [r2, #0]
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40007000 	.word	0x40007000

08004450 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <HAL_PWREx_GetVoltageRange+0x18>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40007000 	.word	0x40007000

0800446c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800447a:	d130      	bne.n	80044de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800447c:	4b23      	ldr	r3, [pc, #140]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004488:	d038      	beq.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800448a:	4b20      	ldr	r3, [pc, #128]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004492:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004498:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2232      	movs	r2, #50	; 0x32
 80044a0:	fb02 f303 	mul.w	r3, r2, r3
 80044a4:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	0c9b      	lsrs	r3, r3, #18
 80044ac:	3301      	adds	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b0:	e002      	b.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b8:	4b14      	ldr	r3, [pc, #80]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c4:	d102      	bne.n	80044cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f2      	bne.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d8:	d110      	bne.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e00f      	b.n	80044fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ea:	d007      	beq.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044f4:	4a05      	ldr	r2, [pc, #20]	; (800450c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40007000 	.word	0x40007000
 8004510:	20000000 	.word	0x20000000
 8004514:	431bde83 	.word	0x431bde83

08004518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	; 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d102      	bne.n	800452c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	f000 bc4f 	b.w	8004dca <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800452c:	4b97      	ldr	r3, [pc, #604]	; (800478c <HAL_RCC_OscConfig+0x274>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 030c 	and.w	r3, r3, #12
 8004534:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004536:	4b95      	ldr	r3, [pc, #596]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80e6 	beq.w	800471a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <HAL_RCC_OscConfig+0x4c>
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	2b0c      	cmp	r3, #12
 8004558:	f040 808d 	bne.w	8004676 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b01      	cmp	r3, #1
 8004560:	f040 8089 	bne.w	8004676 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004564:	4b89      	ldr	r3, [pc, #548]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d006      	beq.n	800457e <HAL_RCC_OscConfig+0x66>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f000 bc26 	b.w	8004dca <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004582:	4b82      	ldr	r3, [pc, #520]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <HAL_RCC_OscConfig+0x80>
 800458e:	4b7f      	ldr	r3, [pc, #508]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004596:	e005      	b.n	80045a4 <HAL_RCC_OscConfig+0x8c>
 8004598:	4b7c      	ldr	r3, [pc, #496]	; (800478c <HAL_RCC_OscConfig+0x274>)
 800459a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d224      	bcs.n	80045f2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fdd9 	bl	8005164 <RCC_SetFlashLatencyFromMSIRange>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f000 bc06 	b.w	8004dca <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045be:	4b73      	ldr	r3, [pc, #460]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a72      	ldr	r2, [pc, #456]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80045c4:	f043 0308 	orr.w	r3, r3, #8
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	4b70      	ldr	r3, [pc, #448]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	496d      	ldr	r1, [pc, #436]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045dc:	4b6b      	ldr	r3, [pc, #428]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	4968      	ldr	r1, [pc, #416]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
 80045f0:	e025      	b.n	800463e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f2:	4b66      	ldr	r3, [pc, #408]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a65      	ldr	r2, [pc, #404]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80045f8:	f043 0308 	orr.w	r3, r3, #8
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b63      	ldr	r3, [pc, #396]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	4960      	ldr	r1, [pc, #384]	; (800478c <HAL_RCC_OscConfig+0x274>)
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004610:	4b5e      	ldr	r3, [pc, #376]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	495b      	ldr	r1, [pc, #364]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fd98 	bl	8005164 <RCC_SetFlashLatencyFromMSIRange>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e3c5      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800463e:	f000 fccd 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004642:	4602      	mov	r2, r0
 8004644:	4b51      	ldr	r3, [pc, #324]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	4950      	ldr	r1, [pc, #320]	; (8004790 <HAL_RCC_OscConfig+0x278>)
 8004650:	5ccb      	ldrb	r3, [r1, r3]
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	4a4e      	ldr	r2, [pc, #312]	; (8004794 <HAL_RCC_OscConfig+0x27c>)
 800465c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800465e:	4b4e      	ldr	r3, [pc, #312]	; (8004798 <HAL_RCC_OscConfig+0x280>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fbb8 	bl	8002dd8 <HAL_InitTick>
 8004668:	4603      	mov	r3, r0
 800466a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d052      	beq.n	8004718 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	e3a9      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d032      	beq.n	80046e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800467e:	4b43      	ldr	r3, [pc, #268]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a42      	ldr	r2, [pc, #264]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800468a:	f7fe fbf5 	bl	8002e78 <HAL_GetTick>
 800468e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004692:	f7fe fbf1 	bl	8002e78 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e392      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046a4:	4b39      	ldr	r3, [pc, #228]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b0:	4b36      	ldr	r3, [pc, #216]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a35      	ldr	r2, [pc, #212]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80046b6:	f043 0308 	orr.w	r3, r3, #8
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	4b33      	ldr	r3, [pc, #204]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	4930      	ldr	r1, [pc, #192]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ce:	4b2f      	ldr	r3, [pc, #188]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	492b      	ldr	r1, [pc, #172]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	604b      	str	r3, [r1, #4]
 80046e2:	e01a      	b.n	800471a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046e4:	4b29      	ldr	r3, [pc, #164]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a28      	ldr	r2, [pc, #160]	; (800478c <HAL_RCC_OscConfig+0x274>)
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046f0:	f7fe fbc2 	bl	8002e78 <HAL_GetTick>
 80046f4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046f8:	f7fe fbbe 	bl	8002e78 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e35f      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800470a:	4b20      	ldr	r3, [pc, #128]	; (800478c <HAL_RCC_OscConfig+0x274>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x1e0>
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004718:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d073      	beq.n	800480e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d005      	beq.n	8004738 <HAL_RCC_OscConfig+0x220>
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d10e      	bne.n	8004750 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d10b      	bne.n	8004750 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004738:	4b14      	ldr	r3, [pc, #80]	; (800478c <HAL_RCC_OscConfig+0x274>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d063      	beq.n	800480c <HAL_RCC_OscConfig+0x2f4>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d15f      	bne.n	800480c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e33c      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004758:	d106      	bne.n	8004768 <HAL_RCC_OscConfig+0x250>
 800475a:	4b0c      	ldr	r3, [pc, #48]	; (800478c <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a0b      	ldr	r2, [pc, #44]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e025      	b.n	80047b4 <HAL_RCC_OscConfig+0x29c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004770:	d114      	bne.n	800479c <HAL_RCC_OscConfig+0x284>
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a05      	ldr	r2, [pc, #20]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b03      	ldr	r3, [pc, #12]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a02      	ldr	r2, [pc, #8]	; (800478c <HAL_RCC_OscConfig+0x274>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e013      	b.n	80047b4 <HAL_RCC_OscConfig+0x29c>
 800478c:	40021000 	.word	0x40021000
 8004790:	0800975c 	.word	0x0800975c
 8004794:	20000000 	.word	0x20000000
 8004798:	20000004 	.word	0x20000004
 800479c:	4b8f      	ldr	r3, [pc, #572]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a8e      	ldr	r2, [pc, #568]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80047a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	4b8c      	ldr	r3, [pc, #560]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a8b      	ldr	r2, [pc, #556]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80047ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d013      	beq.n	80047e4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fe fb5c 	bl	8002e78 <HAL_GetTick>
 80047c0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fe fb58 	bl	8002e78 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e2f9      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047d6:	4b81      	ldr	r3, [pc, #516]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x2ac>
 80047e2:	e014      	b.n	800480e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fe fb48 	bl	8002e78 <HAL_GetTick>
 80047e8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ec:	f7fe fb44 	bl	8002e78 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	; 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e2e5      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047fe:	4b77      	ldr	r3, [pc, #476]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x2d4>
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d060      	beq.n	80048dc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d005      	beq.n	800482c <HAL_RCC_OscConfig+0x314>
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	2b0c      	cmp	r3, #12
 8004824:	d119      	bne.n	800485a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d116      	bne.n	800485a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800482c:	4b6b      	ldr	r3, [pc, #428]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_OscConfig+0x32c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e2c2      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004844:	4b65      	ldr	r3, [pc, #404]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	4962      	ldr	r1, [pc, #392]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004858:	e040      	b.n	80048dc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d023      	beq.n	80048aa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004862:	4b5e      	ldr	r3, [pc, #376]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a5d      	ldr	r2, [pc, #372]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486e:	f7fe fb03 	bl	8002e78 <HAL_GetTick>
 8004872:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004876:	f7fe faff 	bl	8002e78 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e2a0      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004888:	4b54      	ldr	r3, [pc, #336]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004894:	4b51      	ldr	r3, [pc, #324]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	494e      	ldr	r1, [pc, #312]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
 80048a8:	e018      	b.n	80048dc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048aa:	4b4c      	ldr	r3, [pc, #304]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a4b      	ldr	r2, [pc, #300]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fe fadf 	bl	8002e78 <HAL_GetTick>
 80048ba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048be:	f7fe fadb 	bl	8002e78 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e27c      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d0:	4b42      	ldr	r3, [pc, #264]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f0      	bne.n	80048be <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8082 	beq.w	80049ee <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d05f      	beq.n	80049b2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80048f2:	4b3a      	ldr	r3, [pc, #232]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80048f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	429a      	cmp	r2, r3
 8004906:	d037      	beq.n	8004978 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d006      	beq.n	8004920 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e254      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01b      	beq.n	8004962 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800492a:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 800492c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004930:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800493a:	f7fe fa9d 	bl	8002e78 <HAL_GetTick>
 800493e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004942:	f7fe fa99 	bl	8002e78 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b11      	cmp	r3, #17
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e23a      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004954:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1ef      	bne.n	8004942 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004968:	f023 0210 	bic.w	r2, r3, #16
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	491a      	ldr	r1, [pc, #104]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004978:	4b18      	ldr	r3, [pc, #96]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 800497a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800497e:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7fe fa76 	bl	8002e78 <HAL_GetTick>
 800498c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004990:	f7fe fa72 	bl	8002e78 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b11      	cmp	r3, #17
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e213      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049a2:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80049a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0ef      	beq.n	8004990 <HAL_RCC_OscConfig+0x478>
 80049b0:	e01d      	b.n	80049ee <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80049b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b8:	4a08      	ldr	r2, [pc, #32]	; (80049dc <HAL_RCC_OscConfig+0x4c4>)
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fe fa59 	bl	8002e78 <HAL_GetTick>
 80049c6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ca:	f7fe fa55 	bl	8002e78 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b11      	cmp	r3, #17
 80049d6:	d903      	bls.n	80049e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e1f6      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
 80049dc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049e0:	4ba9      	ldr	r3, [pc, #676]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 80049e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ed      	bne.n	80049ca <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80bd 	beq.w	8004b76 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a02:	4ba1      	ldr	r3, [pc, #644]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10e      	bne.n	8004a2c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0e:	4b9e      	ldr	r3, [pc, #632]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a12:	4a9d      	ldr	r2, [pc, #628]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6593      	str	r3, [r2, #88]	; 0x58
 8004a1a:	4b9b      	ldr	r3, [pc, #620]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a2c:	4b97      	ldr	r3, [pc, #604]	; (8004c8c <HAL_RCC_OscConfig+0x774>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d118      	bne.n	8004a6a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a38:	4b94      	ldr	r3, [pc, #592]	; (8004c8c <HAL_RCC_OscConfig+0x774>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a93      	ldr	r2, [pc, #588]	; (8004c8c <HAL_RCC_OscConfig+0x774>)
 8004a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a44:	f7fe fa18 	bl	8002e78 <HAL_GetTick>
 8004a48:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4c:	f7fe fa14 	bl	8002e78 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e1b5      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a5e:	4b8b      	ldr	r3, [pc, #556]	; (8004c8c <HAL_RCC_OscConfig+0x774>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d02c      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004a76:	4b84      	ldr	r3, [pc, #528]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a88:	497f      	ldr	r1, [pc, #508]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d010      	beq.n	8004abe <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a9c:	4b7a      	ldr	r3, [pc, #488]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	4a79      	ldr	r2, [pc, #484]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004aa4:	f043 0304 	orr.w	r3, r3, #4
 8004aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004aac:	4b76      	ldr	r3, [pc, #472]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	4a75      	ldr	r2, [pc, #468]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004abc:	e018      	b.n	8004af0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004abe:	4b72      	ldr	r3, [pc, #456]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac4:	4a70      	ldr	r2, [pc, #448]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ace:	e00f      	b.n	8004af0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ad0:	4b6d      	ldr	r3, [pc, #436]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	4a6c      	ldr	r2, [pc, #432]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004ad8:	f023 0301 	bic.w	r3, r3, #1
 8004adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ae0:	4b69      	ldr	r3, [pc, #420]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae6:	4a68      	ldr	r2, [pc, #416]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004ae8:	f023 0304 	bic.w	r3, r3, #4
 8004aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d016      	beq.n	8004b26 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af8:	f7fe f9be 	bl	8002e78 <HAL_GetTick>
 8004afc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b00:	f7fe f9ba 	bl	8002e78 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e159      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b16:	4b5c      	ldr	r3, [pc, #368]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0ed      	beq.n	8004b00 <HAL_RCC_OscConfig+0x5e8>
 8004b24:	e01d      	b.n	8004b62 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b26:	f7fe f9a7 	bl	8002e78 <HAL_GetTick>
 8004b2a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fe f9a3 	bl	8002e78 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e142      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b44:	4b50      	ldr	r3, [pc, #320]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1ed      	bne.n	8004b2e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004b52:	4b4d      	ldr	r3, [pc, #308]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b58:	4a4b      	ldr	r2, [pc, #300]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d105      	bne.n	8004b76 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6a:	4b47      	ldr	r3, [pc, #284]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6e:	4a46      	ldr	r2, [pc, #280]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d03c      	beq.n	8004bfc <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01c      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b8a:	4b3f      	ldr	r3, [pc, #252]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b90:	4a3d      	ldr	r2, [pc, #244]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fe f96d 	bl	8002e78 <HAL_GetTick>
 8004b9e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba2:	f7fe f969 	bl	8002e78 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e10a      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bb4:	4b34      	ldr	r3, [pc, #208]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0ef      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x68a>
 8004bc2:	e01b      	b.n	8004bfc <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bc4:	4b30      	ldr	r3, [pc, #192]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bca:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fe f950 	bl	8002e78 <HAL_GetTick>
 8004bd8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bdc:	f7fe f94c 	bl	8002e78 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e0ed      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bee:	4b26      	ldr	r3, [pc, #152]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1ef      	bne.n	8004bdc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80e1 	beq.w	8004dc8 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	f040 80b5 	bne.w	8004d7a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c10:	4b1d      	ldr	r3, [pc, #116]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0203 	and.w	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d124      	bne.n	8004c6e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d11b      	bne.n	8004c6e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d113      	bne.n	8004c6e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	3b01      	subs	r3, #1
 8004c54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	3b01      	subs	r3, #1
 8004c68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d05f      	beq.n	8004d2e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	2b0c      	cmp	r3, #12
 8004c72:	d05a      	beq.n	8004d2a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a03      	ldr	r2, [pc, #12]	; (8004c88 <HAL_RCC_OscConfig+0x770>)
 8004c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c80:	f7fe f8fa 	bl	8002e78 <HAL_GetTick>
 8004c84:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c86:	e00c      	b.n	8004ca2 <HAL_RCC_OscConfig+0x78a>
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fe f8f2 	bl	8002e78 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e093      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca2:	4b4c      	ldr	r3, [pc, #304]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cae:	4b49      	ldr	r3, [pc, #292]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	4b49      	ldr	r3, [pc, #292]	; (8004dd8 <HAL_RCC_OscConfig+0x8c0>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cbe:	3a01      	subs	r2, #1
 8004cc0:	0112      	lsls	r2, r2, #4
 8004cc2:	4311      	orrs	r1, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cc8:	0212      	lsls	r2, r2, #8
 8004cca:	4311      	orrs	r1, r2
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cd0:	0852      	lsrs	r2, r2, #1
 8004cd2:	3a01      	subs	r2, #1
 8004cd4:	0552      	lsls	r2, r2, #21
 8004cd6:	4311      	orrs	r1, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cdc:	0852      	lsrs	r2, r2, #1
 8004cde:	3a01      	subs	r2, #1
 8004ce0:	0652      	lsls	r2, r2, #25
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	493b      	ldr	r1, [pc, #236]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cea:	4b3a      	ldr	r3, [pc, #232]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a39      	ldr	r2, [pc, #228]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf6:	4b37      	ldr	r3, [pc, #220]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	4a36      	ldr	r2, [pc, #216]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d00:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d02:	f7fe f8b9 	bl	8002e78 <HAL_GetTick>
 8004d06:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0a:	f7fe f8b5 	bl	8002e78 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e056      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1c:	4b2d      	ldr	r3, [pc, #180]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d28:	e04e      	b.n	8004dc8 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e04d      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2e:	4b29      	ldr	r3, [pc, #164]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d146      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d3a:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004d40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d44:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	4a22      	ldr	r2, [pc, #136]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d50:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d52:	f7fe f891 	bl	8002e78 <HAL_GetTick>
 8004d56:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5a:	f7fe f88d 	bl	8002e78 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e02e      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d6c:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x842>
 8004d78:	e026      	b.n	8004dc8 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	d021      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d80:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fe f874 	bl	8002e78 <HAL_GetTick>
 8004d90:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fe f870 	bl	8002e78 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e011      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	4a07      	ldr	r2, [pc, #28]	; (8004dd4 <HAL_RCC_OscConfig+0x8bc>)
 8004db8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004dbc:	f023 0303 	bic.w	r3, r3, #3
 8004dc0:	60d3      	str	r3, [r2, #12]
 8004dc2:	e001      	b.n	8004dc8 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3728      	adds	r7, #40	; 0x28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	f99f808c 	.word	0xf99f808c

08004ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0e7      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004df0:	4b75      	ldr	r3, [pc, #468]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d910      	bls.n	8004e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b72      	ldr	r3, [pc, #456]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 0207 	bic.w	r2, r3, #7
 8004e06:	4970      	ldr	r1, [pc, #448]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0e:	4b6e      	ldr	r3, [pc, #440]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0cf      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d010      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	4b66      	ldr	r3, [pc, #408]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d908      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e3c:	4b63      	ldr	r3, [pc, #396]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4960      	ldr	r1, [pc, #384]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d04c      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e62:	4b5a      	ldr	r3, [pc, #360]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d121      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e0a6      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e7a:	4b54      	ldr	r3, [pc, #336]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d115      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e09a      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e92:	4b4e      	ldr	r3, [pc, #312]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e08e      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea2:	4b4a      	ldr	r3, [pc, #296]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e086      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eb2:	4b46      	ldr	r3, [pc, #280]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f023 0203 	bic.w	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4943      	ldr	r1, [pc, #268]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fd ffd8 	bl	8002e78 <HAL_GetTick>
 8004ec8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ecc:	f7fd ffd4 	bl	8002e78 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e06e      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	4b3a      	ldr	r3, [pc, #232]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 020c 	and.w	r2, r3, #12
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d1eb      	bne.n	8004ecc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d208      	bcs.n	8004f22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f10:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	492b      	ldr	r1, [pc, #172]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f22:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d210      	bcs.n	8004f52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f30:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f023 0207 	bic.w	r2, r3, #7
 8004f38:	4923      	ldr	r1, [pc, #140]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f40:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d001      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e036      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d008      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	4918      	ldr	r1, [pc, #96]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f7c:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4910      	ldr	r1, [pc, #64]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f90:	f000 f824 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004f94:	4602      	mov	r2, r0
 8004f96:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <HAL_RCC_ClockConfig+0x1f0>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	490b      	ldr	r1, [pc, #44]	; (8004fd0 <HAL_RCC_ClockConfig+0x1f4>)
 8004fa2:	5ccb      	ldrb	r3, [r1, r3]
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fac:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_ClockConfig+0x1fc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fd ff0f 	bl	8002dd8 <HAL_InitTick>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	72fb      	strb	r3, [r7, #11]

  return status;
 8004fbe:	7afb      	ldrb	r3, [r7, #11]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40022000 	.word	0x40022000
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	0800975c 	.word	0x0800975c
 8004fd4:	20000000 	.word	0x20000000
 8004fd8:	20000004 	.word	0x20000004

08004fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b089      	sub	sp, #36	; 0x24
 8004fe0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fea:	4b3e      	ldr	r3, [pc, #248]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ff4:	4b3b      	ldr	r3, [pc, #236]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x34>
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d121      	bne.n	800504e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d11e      	bne.n	800504e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005010:	4b34      	ldr	r3, [pc, #208]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d107      	bne.n	800502c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800501c:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800501e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	e005      	b.n	8005038 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800502c:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	091b      	lsrs	r3, r3, #4
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005038:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005040:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10d      	bne.n	8005064 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800504c:	e00a      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b04      	cmp	r3, #4
 8005052:	d102      	bne.n	800505a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005056:	61bb      	str	r3, [r7, #24]
 8005058:	e004      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d101      	bne.n	8005064 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005060:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005062:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d134      	bne.n	80050d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800506a:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d003      	beq.n	8005082 <HAL_RCC_GetSysClockFreq+0xa6>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d003      	beq.n	8005088 <HAL_RCC_GetSysClockFreq+0xac>
 8005080:	e005      	b.n	800508e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005082:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005084:	617b      	str	r3, [r7, #20]
      break;
 8005086:	e005      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800508a:	617b      	str	r3, [r7, #20]
      break;
 800508c:	e002      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	617b      	str	r3, [r7, #20]
      break;
 8005092:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005094:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	3301      	adds	r3, #1
 80050a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	0a1b      	lsrs	r3, r3, #8
 80050a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	fb03 f202 	mul.w	r2, r3, r2
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ba:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	0e5b      	lsrs	r3, r3, #25
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	3301      	adds	r3, #1
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050d4:	69bb      	ldr	r3, [r7, #24]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3724      	adds	r7, #36	; 0x24
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000
 80050e8:	08009774 	.word	0x08009774
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	007a1200 	.word	0x007a1200

080050f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f8:	4b03      	ldr	r3, [pc, #12]	; (8005108 <HAL_RCC_GetHCLKFreq+0x14>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000000 	.word	0x20000000

0800510c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005110:	f7ff fff0 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	0a1b      	lsrs	r3, r3, #8
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4904      	ldr	r1, [pc, #16]	; (8005134 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40021000 	.word	0x40021000
 8005134:	0800976c 	.word	0x0800976c

08005138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800513c:	f7ff ffda 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005140:	4602      	mov	r2, r0
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	0adb      	lsrs	r3, r3, #11
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	4904      	ldr	r1, [pc, #16]	; (8005160 <HAL_RCC_GetPCLK2Freq+0x28>)
 800514e:	5ccb      	ldrb	r3, [r1, r3]
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005158:	4618      	mov	r0, r3
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40021000 	.word	0x40021000
 8005160:	0800976c 	.word	0x0800976c

08005164 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005170:	4b2a      	ldr	r3, [pc, #168]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800517c:	f7ff f968 	bl	8004450 <HAL_PWREx_GetVoltageRange>
 8005180:	6178      	str	r0, [r7, #20]
 8005182:	e014      	b.n	80051ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005188:	4a24      	ldr	r2, [pc, #144]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800518a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518e:	6593      	str	r3, [r2, #88]	; 0x58
 8005190:	4b22      	ldr	r3, [pc, #136]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800519c:	f7ff f958 	bl	8004450 <HAL_PWREx_GetVoltageRange>
 80051a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051a2:	4b1e      	ldr	r3, [pc, #120]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	4a1d      	ldr	r2, [pc, #116]	; (800521c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b4:	d10b      	bne.n	80051ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b80      	cmp	r3, #128	; 0x80
 80051ba:	d919      	bls.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2ba0      	cmp	r3, #160	; 0xa0
 80051c0:	d902      	bls.n	80051c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051c2:	2302      	movs	r3, #2
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	e013      	b.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051c8:	2301      	movs	r3, #1
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	e010      	b.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b80      	cmp	r3, #128	; 0x80
 80051d2:	d902      	bls.n	80051da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051d4:	2303      	movs	r3, #3
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	e00a      	b.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b80      	cmp	r3, #128	; 0x80
 80051de:	d102      	bne.n	80051e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051e0:	2302      	movs	r3, #2
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	e004      	b.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b70      	cmp	r3, #112	; 0x70
 80051ea:	d101      	bne.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051ec:	2301      	movs	r3, #1
 80051ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 0207 	bic.w	r2, r3, #7
 80051f8:	4909      	ldr	r1, [pc, #36]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005200:	4b07      	ldr	r3, [pc, #28]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	429a      	cmp	r2, r3
 800520c:	d001      	beq.n	8005212 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40021000 	.word	0x40021000
 8005220:	40022000 	.word	0x40022000

08005224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800522c:	2300      	movs	r3, #0
 800522e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005230:	2300      	movs	r3, #0
 8005232:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 809e 	beq.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005242:	2300      	movs	r3, #0
 8005244:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005246:	4b46      	ldr	r3, [pc, #280]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00d      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525c:	4b40      	ldr	r3, [pc, #256]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800525e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005260:	4a3f      	ldr	r2, [pc, #252]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005266:	6593      	str	r3, [r2, #88]	; 0x58
 8005268:	4b3d      	ldr	r3, [pc, #244]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800526a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005274:	2301      	movs	r3, #1
 8005276:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005278:	4b3a      	ldr	r3, [pc, #232]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a39      	ldr	r2, [pc, #228]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800527e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005282:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005284:	f7fd fdf8 	bl	8002e78 <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800528a:	e009      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528c:	f7fd fdf4 	bl	8002e78 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d902      	bls.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	74fb      	strb	r3, [r7, #19]
        break;
 800529e:	e005      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052a0:	4b30      	ldr	r3, [pc, #192]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ef      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d15a      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052b2:	4b2b      	ldr	r3, [pc, #172]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01e      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d019      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e0:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052ea:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052fa:	4a19      	ldr	r2, [pc, #100]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d016      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fd fdb4 	bl	8002e78 <HAL_GetTick>
 8005310:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005312:	e00b      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005314:	f7fd fdb0 	bl	8002e78 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d902      	bls.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	74fb      	strb	r3, [r7, #19]
            break;
 800532a:	e006      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532c:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ec      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800533a:	7cfb      	ldrb	r3, [r7, #19]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005346:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	4904      	ldr	r1, [pc, #16]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005356:	e009      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	74bb      	strb	r3, [r7, #18]
 800535c:	e006      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800536c:	7c7b      	ldrb	r3, [r7, #17]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d105      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005372:	4b6e      	ldr	r3, [pc, #440]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005376:	4a6d      	ldr	r2, [pc, #436]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800537c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800538a:	4b68      	ldr	r3, [pc, #416]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005390:	f023 0203 	bic.w	r2, r3, #3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4964      	ldr	r1, [pc, #400]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ac:	4b5f      	ldr	r3, [pc, #380]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f023 020c 	bic.w	r2, r3, #12
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	495c      	ldr	r1, [pc, #368]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053ce:	4b57      	ldr	r3, [pc, #348]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4953      	ldr	r1, [pc, #332]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053f0:	4b4e      	ldr	r3, [pc, #312]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	494b      	ldr	r1, [pc, #300]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005412:	4b46      	ldr	r3, [pc, #280]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005418:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	4942      	ldr	r1, [pc, #264]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005434:	4b3d      	ldr	r3, [pc, #244]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	493a      	ldr	r1, [pc, #232]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005456:	4b35      	ldr	r3, [pc, #212]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	4931      	ldr	r1, [pc, #196]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005478:	4b2c      	ldr	r3, [pc, #176]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	4929      	ldr	r1, [pc, #164]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800549a:	4b24      	ldr	r3, [pc, #144]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	4920      	ldr	r1, [pc, #128]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	4918      	ldr	r1, [pc, #96]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054da:	d105      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054dc:	4b13      	ldr	r3, [pc, #76]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a12      	ldr	r2, [pc, #72]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054f4:	4b0d      	ldr	r3, [pc, #52]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	490a      	ldr	r1, [pc, #40]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005512:	d105      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a04      	ldr	r2, [pc, #16]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800551a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800551e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005520:	7cbb      	ldrb	r3, [r7, #18]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40021000 	.word	0x40021000

08005530 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a04      	ldr	r2, [pc, #16]	; (800554c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800553a:	f043 0304 	orr.w	r3, r3, #4
 800553e:	6013      	str	r3, [r2, #0]
}
 8005540:	bf00      	nop
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000

08005550 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d073      	beq.n	800564a <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fd f93c 	bl	80027f4 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005582:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	22ca      	movs	r2, #202	; 0xca
 8005592:	625a      	str	r2, [r3, #36]	; 0x24
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2253      	movs	r2, #83	; 0x53
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f87f 	bl	80056a0 <RTC_EnterInitMode>
 80055a2:	4603      	mov	r3, r0
 80055a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d14e      	bne.n	800564a <HAL_RTC_Init+0xfa>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80055ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055be:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6912      	ldr	r2, [r2, #16]
 80055e6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6919      	ldr	r1, [r3, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	041a      	lsls	r2, r3, #16
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f885 	bl	800570c <RTC_ExitInitMode>
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d11e      	bne.n	800564a <HAL_RTC_Init+0xfa>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800561a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6999      	ldr	r1, [r3, #24]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	22ff      	movs	r2, #255	; 0xff
 8005640:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }
  }

  return status;
 800564a:	7bfb      	ldrb	r3, [r7, #15]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800566a:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800566c:	f7fd fc04 	bl	8002e78 <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005672:	e009      	b.n	8005688 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005674:	f7fd fc00 	bl	8002e78 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005682:	d901      	bls.n	8005688 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e007      	b.n	8005698 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0ee      	beq.n	8005674 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d123      	bne.n	8005702 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056c8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80056ca:	f7fd fbd5 	bl	8002e78 <HAL_GetTick>
 80056ce:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056d0:	e00d      	b.n	80056ee <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80056d2:	f7fd fbd1 	bl	8002e78 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056e0:	d905      	bls.n	80056ee <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2203      	movs	r2, #3
 80056ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <RTC_EnterInitMode+0x62>
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d1e7      	bne.n	80056d2 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005718:	4b1a      	ldr	r3, [pc, #104]	; (8005784 <RTC_ExitInitMode+0x78>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <RTC_ExitInitMode+0x78>)
 800571e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005722:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005724:	4b17      	ldr	r3, [pc, #92]	; (8005784 <RTC_ExitInitMode+0x78>)
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10c      	bne.n	800574a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff ff8f 	bl	8005654 <HAL_RTC_WaitForSynchro>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01e      	beq.n	800577a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2203      	movs	r2, #3
 8005740:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	73fb      	strb	r3, [r7, #15]
 8005748:	e017      	b.n	800577a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800574a:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <RTC_ExitInitMode+0x78>)
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	4a0d      	ldr	r2, [pc, #52]	; (8005784 <RTC_ExitInitMode+0x78>)
 8005750:	f023 0320 	bic.w	r3, r3, #32
 8005754:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff ff7c 	bl	8005654 <HAL_RTC_WaitForSynchro>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2203      	movs	r2, #3
 8005766:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <RTC_ExitInitMode+0x78>)
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	4a04      	ldr	r2, [pc, #16]	; (8005784 <RTC_ExitInitMode+0x78>)
 8005774:	f043 0320 	orr.w	r3, r3, #32
 8005778:	6193      	str	r3, [r2, #24]
  }

  return status;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40002800 	.word	0x40002800

08005788 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e087      	b.n	80058b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	22ca      	movs	r2, #202	; 0xca
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2253      	movs	r2, #83	; 0x53
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d2:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2204      	movs	r2, #4
 80057da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d120      	bne.n	800582c <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
#endif
  {
    tickstart = HAL_GetTick();
 80057ea:	f7fd fb45 	bl	8002e78 <HAL_GetTick>
 80057ee:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80057f0:	e015      	b.n	800581e <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057f2:	f7fd fb41 	bl	8002e78 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005800:	d90d      	bls.n	800581e <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	22ff      	movs	r2, #255	; 0xff
 8005808:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2203      	movs	r2, #3
 800580e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e04a      	b.n	80058b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0e2      	beq.n	80057f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x6a>
    }
  }

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	0419      	lsls	r1, r3, #16
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	430a      	orrs	r2, r1
 8005838:	615a      	str	r2, [r3, #20]
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	f023 0107 	bic.w	r1, r3, #7
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	430a      	orrs	r2, r1
 800584c:	619a      	str	r2, [r3, #24]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0u)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d006      	beq.n	8005862 <HAL_RTCEx_SetWakeUpTimer_IT+0xda>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8005854:	4b19      	ldr	r3, [pc, #100]	; (80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4a18      	ldr	r2, [pc, #96]	; (80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 800585a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800585e:	6053      	str	r3, [r2, #4]
 8005860:	e005      	b.n	800586e <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005862:	4b16      	ldr	r3, [pc, #88]	; (80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a15      	ldr	r2, [pc, #84]	; (80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8005868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800586c:	6013      	str	r3, [r2, #0]
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4a12      	ldr	r2, [pc, #72]	; (80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8005874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005878:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005888:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699a      	ldr	r2, [r3, #24]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005898:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	22ff      	movs	r2, #255	; 0xff
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40010400 	.word	0x40010400

080058c0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80058c8:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 80058ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058ce:	615a      	str	r2, [r3, #20]


#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->MISR & RTC_MISR_WUTMF) != 0u)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d006      	beq.n	80058ec <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2204      	movs	r2, #4
 80058e4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f80a 	bl	8005900 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40010400 	.word	0x40010400

08005900 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e049      	b.n	80059ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fc ff92 	bl	8002864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f000 fa9a 	bl	8005e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d001      	beq.n	80059dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e03b      	b.n	8005a54 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <HAL_TIM_Base_Start_IT+0x9c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d009      	beq.n	8005a12 <HAL_TIM_Base_Start_IT+0x4e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a06:	d004      	beq.n	8005a12 <HAL_TIM_Base_Start_IT+0x4e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <HAL_TIM_Base_Start_IT+0xa0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d115      	bne.n	8005a3e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <HAL_TIM_Base_Start_IT+0xa4>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b06      	cmp	r3, #6
 8005a22:	d015      	beq.n	8005a50 <HAL_TIM_Base_Start_IT+0x8c>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2a:	d011      	beq.n	8005a50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3c:	e008      	b.n	8005a50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	e000      	b.n	8005a52 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	40014000 	.word	0x40014000
 8005a68:	00010007 	.word	0x00010007

08005a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d122      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d11b      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0202 	mvn.w	r2, #2
 8005a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9ce 	bl	8005e50 <HAL_TIM_IC_CaptureCallback>
 8005ab4:	e005      	b.n	8005ac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f9c0 	bl	8005e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f9d1 	bl	8005e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d122      	bne.n	8005b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d11b      	bne.n	8005b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0204 	mvn.w	r2, #4
 8005aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f9a4 	bl	8005e50 <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f996 	bl	8005e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f9a7 	bl	8005e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d122      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d11b      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0208 	mvn.w	r2, #8
 8005b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2204      	movs	r2, #4
 8005b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f97a 	bl	8005e50 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f96c 	bl	8005e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f97d 	bl	8005e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b10      	cmp	r3, #16
 8005b7c:	d122      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0210 	mvn.w	r2, #16
 8005b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2208      	movs	r2, #8
 8005b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f950 	bl	8005e50 <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e005      	b.n	8005bbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f942 	bl	8005e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f953 	bl	8005e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0201 	mvn.w	r2, #1
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fb fecc 	bl	8001988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfa:	2b80      	cmp	r3, #128	; 0x80
 8005bfc:	d10e      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c08:	2b80      	cmp	r3, #128	; 0x80
 8005c0a:	d107      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 faa6 	bl	8006168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2a:	d10e      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	2b80      	cmp	r3, #128	; 0x80
 8005c38:	d107      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fa99 	bl	800617c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d10e      	bne.n	8005c76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d107      	bne.n	8005c76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f901 	bl	8005e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d10e      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d107      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f06f 0220 	mvn.w	r2, #32
 8005c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fa59 	bl	8006154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_TIM_ConfigClockSource+0x1c>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e0b6      	b.n	8005e34 <HAL_TIM_ConfigClockSource+0x18a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ce8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cf0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d02:	d03e      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0xd8>
 8005d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d08:	f200 8087 	bhi.w	8005e1a <HAL_TIM_ConfigClockSource+0x170>
 8005d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d10:	f000 8086 	beq.w	8005e20 <HAL_TIM_ConfigClockSource+0x176>
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d18:	d87f      	bhi.n	8005e1a <HAL_TIM_ConfigClockSource+0x170>
 8005d1a:	2b70      	cmp	r3, #112	; 0x70
 8005d1c:	d01a      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0xaa>
 8005d1e:	2b70      	cmp	r3, #112	; 0x70
 8005d20:	d87b      	bhi.n	8005e1a <HAL_TIM_ConfigClockSource+0x170>
 8005d22:	2b60      	cmp	r3, #96	; 0x60
 8005d24:	d050      	beq.n	8005dc8 <HAL_TIM_ConfigClockSource+0x11e>
 8005d26:	2b60      	cmp	r3, #96	; 0x60
 8005d28:	d877      	bhi.n	8005e1a <HAL_TIM_ConfigClockSource+0x170>
 8005d2a:	2b50      	cmp	r3, #80	; 0x50
 8005d2c:	d03c      	beq.n	8005da8 <HAL_TIM_ConfigClockSource+0xfe>
 8005d2e:	2b50      	cmp	r3, #80	; 0x50
 8005d30:	d873      	bhi.n	8005e1a <HAL_TIM_ConfigClockSource+0x170>
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d058      	beq.n	8005de8 <HAL_TIM_ConfigClockSource+0x13e>
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d86f      	bhi.n	8005e1a <HAL_TIM_ConfigClockSource+0x170>
 8005d3a:	2b30      	cmp	r3, #48	; 0x30
 8005d3c:	d064      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0x15e>
 8005d3e:	2b30      	cmp	r3, #48	; 0x30
 8005d40:	d86b      	bhi.n	8005e1a <HAL_TIM_ConfigClockSource+0x170>
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	d060      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0x15e>
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	d867      	bhi.n	8005e1a <HAL_TIM_ConfigClockSource+0x170>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d05c      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0x15e>
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d05a      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0x15e>
 8005d52:	e062      	b.n	8005e1a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6899      	ldr	r1, [r3, #8]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f000 f970 	bl	8006048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	609a      	str	r2, [r3, #8]
      break;
 8005d80:	e04f      	b.n	8005e22 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6899      	ldr	r1, [r3, #8]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f000 f959 	bl	8006048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005da4:	609a      	str	r2, [r3, #8]
      break;
 8005da6:	e03c      	b.n	8005e22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	6859      	ldr	r1, [r3, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	461a      	mov	r2, r3
 8005db6:	f000 f8cd 	bl	8005f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2150      	movs	r1, #80	; 0x50
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 f926 	bl	8006012 <TIM_ITRx_SetConfig>
      break;
 8005dc6:	e02c      	b.n	8005e22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	6859      	ldr	r1, [r3, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f000 f8ec 	bl	8005fb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2160      	movs	r1, #96	; 0x60
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 f916 	bl	8006012 <TIM_ITRx_SetConfig>
      break;
 8005de6:	e01c      	b.n	8005e22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	6859      	ldr	r1, [r3, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	461a      	mov	r2, r3
 8005df6:	f000 f8ad 	bl	8005f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2140      	movs	r1, #64	; 0x40
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 f906 	bl	8006012 <TIM_ITRx_SetConfig>
      break;
 8005e06:	e00c      	b.n	8005e22 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f000 f8fd 	bl	8006012 <TIM_ITRx_SetConfig>
      break;
 8005e18:	e003      	b.n	8005e22 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1e:	e000      	b.n	8005e22 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a2a      	ldr	r2, [pc, #168]	; (8005f48 <TIM_Base_SetConfig+0xbc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_Base_SetConfig+0x20>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eaa:	d108      	bne.n	8005ebe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a21      	ldr	r2, [pc, #132]	; (8005f48 <TIM_Base_SetConfig+0xbc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00b      	beq.n	8005ede <TIM_Base_SetConfig+0x52>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ecc:	d007      	beq.n	8005ede <TIM_Base_SetConfig+0x52>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1e      	ldr	r2, [pc, #120]	; (8005f4c <TIM_Base_SetConfig+0xc0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d003      	beq.n	8005ede <TIM_Base_SetConfig+0x52>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <TIM_Base_SetConfig+0xc4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d108      	bne.n	8005ef0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <TIM_Base_SetConfig+0xbc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d007      	beq.n	8005f2c <TIM_Base_SetConfig+0xa0>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a0b      	ldr	r2, [pc, #44]	; (8005f4c <TIM_Base_SetConfig+0xc0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_Base_SetConfig+0xa0>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <TIM_Base_SetConfig+0xc4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d103      	bne.n	8005f34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	615a      	str	r2, [r3, #20]
}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400

08005f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f023 0201 	bic.w	r2, r3, #1
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f023 030a 	bic.w	r3, r3, #10
 8005f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	621a      	str	r2, [r3, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b087      	sub	sp, #28
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f023 0210 	bic.w	r2, r3, #16
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	031b      	lsls	r3, r3, #12
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006012:	b480      	push	{r7}
 8006014:	b085      	sub	sp, #20
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	f043 0307 	orr.w	r3, r3, #7
 8006034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	609a      	str	r2, [r3, #8]
}
 800603c:	bf00      	nop
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	021a      	lsls	r2, r3, #8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	431a      	orrs	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4313      	orrs	r3, r2
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	609a      	str	r2, [r3, #8]
}
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800609c:	2302      	movs	r3, #2
 800609e:	e04f      	b.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a21      	ldr	r2, [pc, #132]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d108      	bne.n	80060dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a14      	ldr	r2, [pc, #80]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d009      	beq.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006108:	d004      	beq.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a10      	ldr	r2, [pc, #64]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d10c      	bne.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	4313      	orrs	r3, r2
 8006124:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	40012c00 	.word	0x40012c00
 8006150:	40014000 	.word	0x40014000

08006154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e040      	b.n	8006224 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fc fb96 	bl	80028e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2224      	movs	r2, #36	; 0x24
 80061bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fbe8 	bl	80069a4 <UART_SetConfig>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e022      	b.n	8006224 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fe36 	bl	8006e58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800620a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 febd 	bl	8006f9c <UART_CheckIdleState>
 8006222:	4603      	mov	r3, r0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800622c:	b480      	push	{r7}
 800622e:	b08b      	sub	sp, #44	; 0x2c
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800623e:	2b20      	cmp	r3, #32
 8006240:	d156      	bne.n	80062f0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <HAL_UART_Transmit_IT+0x22>
 8006248:	88fb      	ldrh	r3, [r7, #6]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e04f      	b.n	80062f2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_UART_Transmit_IT+0x34>
 800625c:	2302      	movs	r3, #2
 800625e:	e048      	b.n	80062f2 <HAL_UART_Transmit_IT+0xc6>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	88fa      	ldrh	r2, [r7, #6]
 8006272:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	88fa      	ldrh	r2, [r7, #6]
 800627a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2221      	movs	r2, #33	; 0x21
 8006290:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629a:	d107      	bne.n	80062ac <HAL_UART_Transmit_IT+0x80>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d103      	bne.n	80062ac <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4a16      	ldr	r2, [pc, #88]	; (8006300 <HAL_UART_Transmit_IT+0xd4>)
 80062a8:	669a      	str	r2, [r3, #104]	; 0x68
 80062aa:	e002      	b.n	80062b2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4a15      	ldr	r2, [pc, #84]	; (8006304 <HAL_UART_Transmit_IT+0xd8>)
 80062b0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	613b      	str	r3, [r7, #16]
   return(result);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	623b      	str	r3, [r7, #32]
 80062da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	69f9      	ldr	r1, [r7, #28]
 80062de:	6a3a      	ldr	r2, [r7, #32]
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e6      	bne.n	80062ba <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e000      	b.n	80062f2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80062f0:	2302      	movs	r3, #2
  }
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	372c      	adds	r7, #44	; 0x2c
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	080074f7 	.word	0x080074f7
 8006304:	0800743f 	.word	0x0800743f

08006308 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08a      	sub	sp, #40	; 0x28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	4613      	mov	r3, r2
 8006314:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800631a:	2b20      	cmp	r3, #32
 800631c:	d142      	bne.n	80063a4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <HAL_UART_Receive_IT+0x22>
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e03b      	b.n	80063a6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_UART_Receive_IT+0x34>
 8006338:	2302      	movs	r3, #2
 800633a:	e034      	b.n	80063a6 <HAL_UART_Receive_IT+0x9e>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <HAL_UART_Receive_IT+0xa8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d01f      	beq.n	8006394 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d018      	beq.n	8006394 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	613b      	str	r3, [r7, #16]
   return(result);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	623b      	str	r3, [r7, #32]
 8006382:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	69f9      	ldr	r1, [r7, #28]
 8006386:	6a3a      	ldr	r2, [r7, #32]
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	61bb      	str	r3, [r7, #24]
   return(result);
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e6      	bne.n	8006362 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	461a      	mov	r2, r3
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 ff0c 	bl	80071b8 <UART_Start_Receive_IT>
 80063a0:	4603      	mov	r3, r0
 80063a2:	e000      	b.n	80063a6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
  }
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3728      	adds	r7, #40	; 0x28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40008000 	.word	0x40008000

080063b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b0ba      	sub	sp, #232	; 0xe8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80063de:	f640 030f 	movw	r3, #2063	; 0x80f
 80063e2:	4013      	ands	r3, r2
 80063e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80063e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d115      	bne.n	800641c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00f      	beq.n	800641c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d009      	beq.n	800641c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 82a6 	beq.w	800695e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
      }
      return;
 800641a:	e2a0      	b.n	800695e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800641c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8117 	beq.w	8006654 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006432:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006436:	4b85      	ldr	r3, [pc, #532]	; (800664c <HAL_UART_IRQHandler+0x298>)
 8006438:	4013      	ands	r3, r2
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 810a 	beq.w	8006654 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d011      	beq.n	8006470 <HAL_UART_IRQHandler+0xbc>
 800644c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2201      	movs	r2, #1
 800645e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006466:	f043 0201 	orr.w	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d011      	beq.n	80064a0 <HAL_UART_IRQHandler+0xec>
 800647c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2202      	movs	r2, #2
 800648e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006496:	f043 0204 	orr.w	r2, r3, #4
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d011      	beq.n	80064d0 <HAL_UART_IRQHandler+0x11c>
 80064ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2204      	movs	r2, #4
 80064be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064c6:	f043 0202 	orr.w	r2, r3, #2
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d4:	f003 0308 	and.w	r3, r3, #8
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d017      	beq.n	800650c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2208      	movs	r2, #8
 80064fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006502:	f043 0208 	orr.w	r2, r3, #8
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800650c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006514:	2b00      	cmp	r3, #0
 8006516:	d012      	beq.n	800653e <HAL_UART_IRQHandler+0x18a>
 8006518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00c      	beq.n	800653e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800652c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006534:	f043 0220 	orr.w	r2, r3, #32
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 820c 	beq.w	8006962 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00d      	beq.n	8006572 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006578:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	d005      	beq.n	8006596 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800658a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800658e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006592:	2b00      	cmp	r3, #0
 8006594:	d04f      	beq.n	8006636 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fed8 	bl	800734c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a6:	2b40      	cmp	r3, #64	; 0x40
 80065a8:	d141      	bne.n	800662e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3308      	adds	r3, #8
 80065b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3308      	adds	r3, #8
 80065d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1d9      	bne.n	80065aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d013      	beq.n	8006626 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006602:	4a13      	ldr	r2, [pc, #76]	; (8006650 <HAL_UART_IRQHandler+0x29c>)
 8006604:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	4618      	mov	r0, r3
 800660c:	f7fd fd45 	bl	800409a <HAL_DMA_Abort_IT>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d017      	beq.n	8006646 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006620:	4610      	mov	r0, r2
 8006622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006624:	e00f      	b.n	8006646 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9a6 	bl	8006978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662c:	e00b      	b.n	8006646 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f9a2 	bl	8006978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006634:	e007      	b.n	8006646 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f99e 	bl	8006978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006644:	e18d      	b.n	8006962 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006646:	bf00      	nop
    return;
 8006648:	e18b      	b.n	8006962 <HAL_UART_IRQHandler+0x5ae>
 800664a:	bf00      	nop
 800664c:	04000120 	.word	0x04000120
 8006650:	08007413 	.word	0x08007413

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006658:	2b01      	cmp	r3, #1
 800665a:	f040 8146 	bne.w	80068ea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800665e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006662:	f003 0310 	and.w	r3, r3, #16
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 813f 	beq.w	80068ea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800666c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8138 	beq.w	80068ea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2210      	movs	r2, #16
 8006680:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	f040 80b4 	bne.w	80067fa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800669e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 815f 	beq.w	8006966 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066b2:	429a      	cmp	r2, r3
 80066b4:	f080 8157 	bcs.w	8006966 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 8085 	bne.w	80067de <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006702:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800670a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1da      	bne.n	80066d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800672e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006730:	f023 0301 	bic.w	r3, r3, #1
 8006734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006742:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006746:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800674a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e1      	bne.n	800671e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3308      	adds	r3, #8
 8006760:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800676a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800676c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3308      	adds	r3, #8
 800677a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800677e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006780:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006784:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800678c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e3      	bne.n	800675a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ae:	f023 0310 	bic.w	r3, r3, #16
 80067b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80067c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e4      	bne.n	800679e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fd fc20 	bl	800401e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f8ca 	bl	800698c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067f8:	e0b5      	b.n	8006966 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006806:	b29b      	uxth	r3, r3
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 80a7 	beq.w	800696a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800681c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80a2 	beq.w	800696a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006836:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800683a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006848:	647b      	str	r3, [r7, #68]	; 0x44
 800684a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800684e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e4      	bne.n	8006826 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3308      	adds	r3, #8
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	623b      	str	r3, [r7, #32]
   return(result);
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3308      	adds	r3, #8
 800687c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006880:	633a      	str	r2, [r7, #48]	; 0x30
 8006882:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e3      	bne.n	800685c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0310 	bic.w	r3, r3, #16
 80068ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068c8:	61fb      	str	r3, [r7, #28]
 80068ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	69b9      	ldr	r1, [r7, #24]
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	617b      	str	r3, [r7, #20]
   return(result);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e4      	bne.n	80068a6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f852 	bl	800698c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068e8:	e03f      	b.n	800696a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00e      	beq.n	8006914 <HAL_UART_IRQHandler+0x560>
 80068f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d008      	beq.n	8006914 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800690a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 ffdc 	bl	80078ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006912:	e02d      	b.n	8006970 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00e      	beq.n	800693e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01c      	beq.n	800696e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
    }
    return;
 800693c:	e017      	b.n	800696e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d012      	beq.n	8006970 <HAL_UART_IRQHandler+0x5bc>
 800694a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800694e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00c      	beq.n	8006970 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fe2d 	bl	80075b6 <UART_EndTransmit_IT>
    return;
 800695c:	e008      	b.n	8006970 <HAL_UART_IRQHandler+0x5bc>
      return;
 800695e:	bf00      	nop
 8006960:	e006      	b.n	8006970 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006962:	bf00      	nop
 8006964:	e004      	b.n	8006970 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006966:	bf00      	nop
 8006968:	e002      	b.n	8006970 <HAL_UART_IRQHandler+0x5bc>
      return;
 800696a:	bf00      	nop
 800696c:	e000      	b.n	8006970 <HAL_UART_IRQHandler+0x5bc>
    return;
 800696e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006970:	37e8      	adds	r7, #232	; 0xe8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop

08006978 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a8:	b08a      	sub	sp, #40	; 0x28
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	431a      	orrs	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b9e      	ldr	r3, [pc, #632]	; (8006c4c <UART_SetConfig+0x2a8>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069dc:	430b      	orrs	r3, r1
 80069de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a93      	ldr	r2, [pc, #588]	; (8006c50 <UART_SetConfig+0x2ac>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d004      	beq.n	8006a10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a20:	430a      	orrs	r2, r1
 8006a22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a8a      	ldr	r2, [pc, #552]	; (8006c54 <UART_SetConfig+0x2b0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d126      	bne.n	8006a7c <UART_SetConfig+0xd8>
 8006a2e:	4b8a      	ldr	r3, [pc, #552]	; (8006c58 <UART_SetConfig+0x2b4>)
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a34:	f003 0303 	and.w	r3, r3, #3
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d81b      	bhi.n	8006a74 <UART_SetConfig+0xd0>
 8006a3c:	a201      	add	r2, pc, #4	; (adr r2, 8006a44 <UART_SetConfig+0xa0>)
 8006a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a42:	bf00      	nop
 8006a44:	08006a55 	.word	0x08006a55
 8006a48:	08006a65 	.word	0x08006a65
 8006a4c:	08006a5d 	.word	0x08006a5d
 8006a50:	08006a6d 	.word	0x08006a6d
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5a:	e0ab      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a62:	e0a7      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006a64:	2304      	movs	r3, #4
 8006a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6a:	e0a3      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a72:	e09f      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006a74:	2310      	movs	r3, #16
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7a:	e09b      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a76      	ldr	r2, [pc, #472]	; (8006c5c <UART_SetConfig+0x2b8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d138      	bne.n	8006af8 <UART_SetConfig+0x154>
 8006a86:	4b74      	ldr	r3, [pc, #464]	; (8006c58 <UART_SetConfig+0x2b4>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8c:	f003 030c 	and.w	r3, r3, #12
 8006a90:	2b0c      	cmp	r3, #12
 8006a92:	d82d      	bhi.n	8006af0 <UART_SetConfig+0x14c>
 8006a94:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <UART_SetConfig+0xf8>)
 8006a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9a:	bf00      	nop
 8006a9c:	08006ad1 	.word	0x08006ad1
 8006aa0:	08006af1 	.word	0x08006af1
 8006aa4:	08006af1 	.word	0x08006af1
 8006aa8:	08006af1 	.word	0x08006af1
 8006aac:	08006ae1 	.word	0x08006ae1
 8006ab0:	08006af1 	.word	0x08006af1
 8006ab4:	08006af1 	.word	0x08006af1
 8006ab8:	08006af1 	.word	0x08006af1
 8006abc:	08006ad9 	.word	0x08006ad9
 8006ac0:	08006af1 	.word	0x08006af1
 8006ac4:	08006af1 	.word	0x08006af1
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad6:	e06d      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ade:	e069      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae6:	e065      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006ae8:	2308      	movs	r3, #8
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aee:	e061      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006af0:	2310      	movs	r3, #16
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af6:	e05d      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a58      	ldr	r2, [pc, #352]	; (8006c60 <UART_SetConfig+0x2bc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d125      	bne.n	8006b4e <UART_SetConfig+0x1aa>
 8006b02:	4b55      	ldr	r3, [pc, #340]	; (8006c58 <UART_SetConfig+0x2b4>)
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b0c:	2b30      	cmp	r3, #48	; 0x30
 8006b0e:	d016      	beq.n	8006b3e <UART_SetConfig+0x19a>
 8006b10:	2b30      	cmp	r3, #48	; 0x30
 8006b12:	d818      	bhi.n	8006b46 <UART_SetConfig+0x1a2>
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d00a      	beq.n	8006b2e <UART_SetConfig+0x18a>
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d814      	bhi.n	8006b46 <UART_SetConfig+0x1a2>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <UART_SetConfig+0x182>
 8006b20:	2b10      	cmp	r3, #16
 8006b22:	d008      	beq.n	8006b36 <UART_SetConfig+0x192>
 8006b24:	e00f      	b.n	8006b46 <UART_SetConfig+0x1a2>
 8006b26:	2300      	movs	r3, #0
 8006b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2c:	e042      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b34:	e03e      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006b36:	2304      	movs	r3, #4
 8006b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3c:	e03a      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006b3e:	2308      	movs	r3, #8
 8006b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b44:	e036      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006b46:	2310      	movs	r3, #16
 8006b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4c:	e032      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a3f      	ldr	r2, [pc, #252]	; (8006c50 <UART_SetConfig+0x2ac>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d12a      	bne.n	8006bae <UART_SetConfig+0x20a>
 8006b58:	4b3f      	ldr	r3, [pc, #252]	; (8006c58 <UART_SetConfig+0x2b4>)
 8006b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b66:	d01a      	beq.n	8006b9e <UART_SetConfig+0x1fa>
 8006b68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b6c:	d81b      	bhi.n	8006ba6 <UART_SetConfig+0x202>
 8006b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b72:	d00c      	beq.n	8006b8e <UART_SetConfig+0x1ea>
 8006b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b78:	d815      	bhi.n	8006ba6 <UART_SetConfig+0x202>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <UART_SetConfig+0x1e2>
 8006b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b82:	d008      	beq.n	8006b96 <UART_SetConfig+0x1f2>
 8006b84:	e00f      	b.n	8006ba6 <UART_SetConfig+0x202>
 8006b86:	2300      	movs	r3, #0
 8006b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8c:	e012      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b94:	e00e      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006b96:	2304      	movs	r3, #4
 8006b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9c:	e00a      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006b9e:	2308      	movs	r3, #8
 8006ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba4:	e006      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006ba6:	2310      	movs	r3, #16
 8006ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bac:	e002      	b.n	8006bb4 <UART_SetConfig+0x210>
 8006bae:	2310      	movs	r3, #16
 8006bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a25      	ldr	r2, [pc, #148]	; (8006c50 <UART_SetConfig+0x2ac>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	f040 808a 	bne.w	8006cd4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d824      	bhi.n	8006c12 <UART_SetConfig+0x26e>
 8006bc8:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <UART_SetConfig+0x22c>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006bf5 	.word	0x08006bf5
 8006bd4:	08006c13 	.word	0x08006c13
 8006bd8:	08006bfd 	.word	0x08006bfd
 8006bdc:	08006c13 	.word	0x08006c13
 8006be0:	08006c03 	.word	0x08006c03
 8006be4:	08006c13 	.word	0x08006c13
 8006be8:	08006c13 	.word	0x08006c13
 8006bec:	08006c13 	.word	0x08006c13
 8006bf0:	08006c0b 	.word	0x08006c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf4:	f7fe fa8a 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8006bf8:	61f8      	str	r0, [r7, #28]
        break;
 8006bfa:	e010      	b.n	8006c1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bfc:	4b19      	ldr	r3, [pc, #100]	; (8006c64 <UART_SetConfig+0x2c0>)
 8006bfe:	61fb      	str	r3, [r7, #28]
        break;
 8006c00:	e00d      	b.n	8006c1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c02:	f7fe f9eb 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8006c06:	61f8      	str	r0, [r7, #28]
        break;
 8006c08:	e009      	b.n	8006c1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c0e:	61fb      	str	r3, [r7, #28]
        break;
 8006c10:	e005      	b.n	8006c1e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8109 	beq.w	8006e38 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	4413      	add	r3, r2
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d305      	bcc.n	8006c42 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d912      	bls.n	8006c68 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c48:	e0f6      	b.n	8006e38 <UART_SetConfig+0x494>
 8006c4a:	bf00      	nop
 8006c4c:	efff69f3 	.word	0xefff69f3
 8006c50:	40008000 	.word	0x40008000
 8006c54:	40013800 	.word	0x40013800
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	40004400 	.word	0x40004400
 8006c60:	40004800 	.word	0x40004800
 8006c64:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	461c      	mov	r4, r3
 8006c6e:	4615      	mov	r5, r2
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	022b      	lsls	r3, r5, #8
 8006c7a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c7e:	0222      	lsls	r2, r4, #8
 8006c80:	68f9      	ldr	r1, [r7, #12]
 8006c82:	6849      	ldr	r1, [r1, #4]
 8006c84:	0849      	lsrs	r1, r1, #1
 8006c86:	2000      	movs	r0, #0
 8006c88:	4688      	mov	r8, r1
 8006c8a:	4681      	mov	r9, r0
 8006c8c:	eb12 0a08 	adds.w	sl, r2, r8
 8006c90:	eb43 0b09 	adc.w	fp, r3, r9
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	607a      	str	r2, [r7, #4]
 8006c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca2:	4650      	mov	r0, sl
 8006ca4:	4659      	mov	r1, fp
 8006ca6:	f7f9 faeb 	bl	8000280 <__aeabi_uldivmod>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4613      	mov	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb8:	d308      	bcc.n	8006ccc <UART_SetConfig+0x328>
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cc0:	d204      	bcs.n	8006ccc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	60da      	str	r2, [r3, #12]
 8006cca:	e0b5      	b.n	8006e38 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cd2:	e0b1      	b.n	8006e38 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cdc:	d15d      	bne.n	8006d9a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006cde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ce2:	2b08      	cmp	r3, #8
 8006ce4:	d827      	bhi.n	8006d36 <UART_SetConfig+0x392>
 8006ce6:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <UART_SetConfig+0x348>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006d11 	.word	0x08006d11
 8006cf0:	08006d19 	.word	0x08006d19
 8006cf4:	08006d21 	.word	0x08006d21
 8006cf8:	08006d37 	.word	0x08006d37
 8006cfc:	08006d27 	.word	0x08006d27
 8006d00:	08006d37 	.word	0x08006d37
 8006d04:	08006d37 	.word	0x08006d37
 8006d08:	08006d37 	.word	0x08006d37
 8006d0c:	08006d2f 	.word	0x08006d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d10:	f7fe f9fc 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8006d14:	61f8      	str	r0, [r7, #28]
        break;
 8006d16:	e014      	b.n	8006d42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d18:	f7fe fa0e 	bl	8005138 <HAL_RCC_GetPCLK2Freq>
 8006d1c:	61f8      	str	r0, [r7, #28]
        break;
 8006d1e:	e010      	b.n	8006d42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d20:	4b4c      	ldr	r3, [pc, #304]	; (8006e54 <UART_SetConfig+0x4b0>)
 8006d22:	61fb      	str	r3, [r7, #28]
        break;
 8006d24:	e00d      	b.n	8006d42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d26:	f7fe f959 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8006d2a:	61f8      	str	r0, [r7, #28]
        break;
 8006d2c:	e009      	b.n	8006d42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d32:	61fb      	str	r3, [r7, #28]
        break;
 8006d34:	e005      	b.n	8006d42 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d077      	beq.n	8006e38 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	005a      	lsls	r2, r3, #1
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	441a      	add	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b0f      	cmp	r3, #15
 8006d62:	d916      	bls.n	8006d92 <UART_SetConfig+0x3ee>
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6a:	d212      	bcs.n	8006d92 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f023 030f 	bic.w	r3, r3, #15
 8006d74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	8afb      	ldrh	r3, [r7, #22]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	8afa      	ldrh	r2, [r7, #22]
 8006d8e:	60da      	str	r2, [r3, #12]
 8006d90:	e052      	b.n	8006e38 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d98:	e04e      	b.n	8006e38 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d827      	bhi.n	8006df2 <UART_SetConfig+0x44e>
 8006da2:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x404>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006dcd 	.word	0x08006dcd
 8006dac:	08006dd5 	.word	0x08006dd5
 8006db0:	08006ddd 	.word	0x08006ddd
 8006db4:	08006df3 	.word	0x08006df3
 8006db8:	08006de3 	.word	0x08006de3
 8006dbc:	08006df3 	.word	0x08006df3
 8006dc0:	08006df3 	.word	0x08006df3
 8006dc4:	08006df3 	.word	0x08006df3
 8006dc8:	08006deb 	.word	0x08006deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dcc:	f7fe f99e 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8006dd0:	61f8      	str	r0, [r7, #28]
        break;
 8006dd2:	e014      	b.n	8006dfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd4:	f7fe f9b0 	bl	8005138 <HAL_RCC_GetPCLK2Freq>
 8006dd8:	61f8      	str	r0, [r7, #28]
        break;
 8006dda:	e010      	b.n	8006dfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ddc:	4b1d      	ldr	r3, [pc, #116]	; (8006e54 <UART_SetConfig+0x4b0>)
 8006dde:	61fb      	str	r3, [r7, #28]
        break;
 8006de0:	e00d      	b.n	8006dfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006de2:	f7fe f8fb 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8006de6:	61f8      	str	r0, [r7, #28]
        break;
 8006de8:	e009      	b.n	8006dfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dee:	61fb      	str	r3, [r7, #28]
        break;
 8006df0:	e005      	b.n	8006dfe <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dfc:	bf00      	nop
    }

    if (pclk != 0U)
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d019      	beq.n	8006e38 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	085a      	lsrs	r2, r3, #1
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	2b0f      	cmp	r3, #15
 8006e1c:	d909      	bls.n	8006e32 <UART_SetConfig+0x48e>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e24:	d205      	bcs.n	8006e32 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60da      	str	r2, [r3, #12]
 8006e30:	e002      	b.n	8006e38 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3728      	adds	r7, #40	; 0x28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e52:	bf00      	nop
 8006e54:	00f42400 	.word	0x00f42400

08006e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00a      	beq.n	8006ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01a      	beq.n	8006f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f56:	d10a      	bne.n	8006f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fac:	f7fb ff64 	bl	8002e78 <HAL_GetTick>
 8006fb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d10e      	bne.n	8006fde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f82d 	bl	800702e <UART_WaitOnFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e023      	b.n	8007026 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d10e      	bne.n	800700a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f817 	bl	800702e <UART_WaitOnFlagUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e00d      	b.n	8007026 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b09c      	sub	sp, #112	; 0x70
 8007032:	af00      	add	r7, sp, #0
 8007034:	60f8      	str	r0, [r7, #12]
 8007036:	60b9      	str	r1, [r7, #8]
 8007038:	603b      	str	r3, [r7, #0]
 800703a:	4613      	mov	r3, r2
 800703c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703e:	e0a5      	b.n	800718c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007046:	f000 80a1 	beq.w	800718c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704a:	f7fb ff15 	bl	8002e78 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007056:	429a      	cmp	r2, r3
 8007058:	d302      	bcc.n	8007060 <UART_WaitOnFlagUntilTimeout+0x32>
 800705a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800705c:	2b00      	cmp	r3, #0
 800705e:	d13e      	bne.n	80070de <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800706e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007070:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007074:	667b      	str	r3, [r7, #100]	; 0x64
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800707e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007080:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007084:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800708c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e6      	bne.n	8007060 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3308      	adds	r3, #8
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	f023 0301 	bic.w	r3, r3, #1
 80070a8:	663b      	str	r3, [r7, #96]	; 0x60
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3308      	adds	r3, #8
 80070b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80070b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e5      	bne.n	8007092 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2220      	movs	r2, #32
 80070ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e067      	b.n	80071ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d04f      	beq.n	800718c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070fa:	d147      	bne.n	800718c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007104:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800711a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
 8007126:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800712a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e6      	bne.n	8007106 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	613b      	str	r3, [r7, #16]
   return(result);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f023 0301 	bic.w	r3, r3, #1
 800714e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3308      	adds	r3, #8
 8007156:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007158:	623a      	str	r2, [r7, #32]
 800715a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	69f9      	ldr	r1, [r7, #28]
 800715e:	6a3a      	ldr	r2, [r7, #32]
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	61bb      	str	r3, [r7, #24]
   return(result);
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e5      	bne.n	8007138 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2220      	movs	r2, #32
 8007176:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e010      	b.n	80071ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69da      	ldr	r2, [r3, #28]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	4013      	ands	r3, r2
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	429a      	cmp	r2, r3
 800719a:	bf0c      	ite	eq
 800719c:	2301      	moveq	r3, #1
 800719e:	2300      	movne	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	461a      	mov	r2, r3
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	f43f af4a 	beq.w	8007040 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3770      	adds	r7, #112	; 0x70
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b097      	sub	sp, #92	; 0x5c
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	4613      	mov	r3, r2
 80071c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	88fa      	ldrh	r2, [r7, #6]
 80071d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	88fa      	ldrh	r2, [r7, #6]
 80071d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ea:	d10e      	bne.n	800720a <UART_Start_Receive_IT+0x52>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <UART_Start_Receive_IT+0x48>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071fe:	e02d      	b.n	800725c <UART_Start_Receive_IT+0xa4>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	22ff      	movs	r2, #255	; 0xff
 8007204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007208:	e028      	b.n	800725c <UART_Start_Receive_IT+0xa4>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10d      	bne.n	800722e <UART_Start_Receive_IT+0x76>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <UART_Start_Receive_IT+0x6c>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	22ff      	movs	r2, #255	; 0xff
 800721e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007222:	e01b      	b.n	800725c <UART_Start_Receive_IT+0xa4>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	227f      	movs	r2, #127	; 0x7f
 8007228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800722c:	e016      	b.n	800725c <UART_Start_Receive_IT+0xa4>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007236:	d10d      	bne.n	8007254 <UART_Start_Receive_IT+0x9c>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <UART_Start_Receive_IT+0x92>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	227f      	movs	r2, #127	; 0x7f
 8007244:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007248:	e008      	b.n	800725c <UART_Start_Receive_IT+0xa4>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	223f      	movs	r2, #63	; 0x3f
 800724e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007252:	e003      	b.n	800725c <UART_Start_Receive_IT+0xa4>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2222      	movs	r2, #34	; 0x22
 8007268:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727c:	f043 0301 	orr.w	r3, r3, #1
 8007280:	657b      	str	r3, [r7, #84]	; 0x54
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3308      	adds	r3, #8
 8007288:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800728a:	64ba      	str	r2, [r7, #72]	; 0x48
 800728c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e5      	bne.n	800726a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a6:	d107      	bne.n	80072b8 <UART_Start_Receive_IT+0x100>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d103      	bne.n	80072b8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4a24      	ldr	r2, [pc, #144]	; (8007344 <UART_Start_Receive_IT+0x18c>)
 80072b4:	665a      	str	r2, [r3, #100]	; 0x64
 80072b6:	e002      	b.n	80072be <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a23      	ldr	r2, [pc, #140]	; (8007348 <UART_Start_Receive_IT+0x190>)
 80072bc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d019      	beq.n	8007302 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80072e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ec:	637b      	str	r3, [r7, #52]	; 0x34
 80072ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e6      	bne.n	80072ce <UART_Start_Receive_IT+0x116>
 8007300:	e018      	b.n	8007334 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	613b      	str	r3, [r7, #16]
   return(result);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f043 0320 	orr.w	r3, r3, #32
 8007316:	653b      	str	r3, [r7, #80]	; 0x50
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007320:	623b      	str	r3, [r7, #32]
 8007322:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	69f9      	ldr	r1, [r7, #28]
 8007326:	6a3a      	ldr	r2, [r7, #32]
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	61bb      	str	r3, [r7, #24]
   return(result);
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e6      	bne.n	8007302 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	375c      	adds	r7, #92	; 0x5c
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	0800776b 	.word	0x0800776b
 8007348:	0800760b 	.word	0x0800760b

0800734c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800734c:	b480      	push	{r7}
 800734e:	b095      	sub	sp, #84	; 0x54
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007368:	64fb      	str	r3, [r7, #76]	; 0x4c
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007372:	643b      	str	r3, [r7, #64]	; 0x40
 8007374:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007378:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e6      	bne.n	8007354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3308      	adds	r3, #8
 800738c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	61fb      	str	r3, [r7, #28]
   return(result);
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	64bb      	str	r3, [r7, #72]	; 0x48
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3308      	adds	r3, #8
 80073a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e5      	bne.n	8007386 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d118      	bne.n	80073f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f023 0310 	bic.w	r3, r3, #16
 80073d6:	647b      	str	r3, [r7, #68]	; 0x44
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6979      	ldr	r1, [r7, #20]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	613b      	str	r3, [r7, #16]
   return(result);
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e6      	bne.n	80073c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007406:	bf00      	nop
 8007408:	3754      	adds	r7, #84	; 0x54
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7ff faa1 	bl	8006978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800743e:	b480      	push	{r7}
 8007440:	b08f      	sub	sp, #60	; 0x3c
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800744a:	2b21      	cmp	r3, #33	; 0x21
 800744c:	d14d      	bne.n	80074ea <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d132      	bne.n	80074c0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	61fb      	str	r3, [r7, #28]
   return(result);
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800746e:	637b      	str	r3, [r7, #52]	; 0x34
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800747a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800747e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e6      	bne.n	800745a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	60bb      	str	r3, [r7, #8]
   return(result);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a0:	633b      	str	r3, [r7, #48]	; 0x30
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6979      	ldr	r1, [r7, #20]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	613b      	str	r3, [r7, #16]
   return(result);
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e6      	bne.n	800748c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80074be:	e014      	b.n	80074ea <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c4:	781a      	ldrb	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	b292      	uxth	r2, r2
 80074cc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80074ea:	bf00      	nop
 80074ec:	373c      	adds	r7, #60	; 0x3c
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b091      	sub	sp, #68	; 0x44
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007502:	2b21      	cmp	r3, #33	; 0x21
 8007504:	d151      	bne.n	80075aa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d132      	bne.n	8007578 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	e853 3f00 	ldrex	r3, [r3]
 800751e:	623b      	str	r3, [r7, #32]
   return(result);
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007526:	63bb      	str	r3, [r7, #56]	; 0x38
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	633b      	str	r3, [r7, #48]	; 0x30
 8007532:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007538:	e841 2300 	strex	r3, r2, [r1]
 800753c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1e6      	bne.n	8007512 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	60fb      	str	r3, [r7, #12]
   return(result);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007558:	637b      	str	r3, [r7, #52]	; 0x34
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007562:	61fb      	str	r3, [r7, #28]
 8007564:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	69b9      	ldr	r1, [r7, #24]
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	617b      	str	r3, [r7, #20]
   return(result);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e6      	bne.n	8007544 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007576:	e018      	b.n	80075aa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800757e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007580:	881a      	ldrh	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800758a:	b292      	uxth	r2, r2
 800758c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007592:	1c9a      	adds	r2, r3, #2
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80075aa:	bf00      	nop
 80075ac:	3744      	adds	r7, #68	; 0x44
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b088      	sub	sp, #32
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d2:	61fb      	str	r3, [r7, #28]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	461a      	mov	r2, r3
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	61bb      	str	r3, [r7, #24]
 80075de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	6979      	ldr	r1, [r7, #20]
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	613b      	str	r3, [r7, #16]
   return(result);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e6      	bne.n	80075be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2220      	movs	r2, #32
 80075f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7fa f9e5 	bl	80019cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007602:	bf00      	nop
 8007604:	3720      	adds	r7, #32
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b096      	sub	sp, #88	; 0x58
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007618:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007620:	2b22      	cmp	r3, #34	; 0x22
 8007622:	f040 8094 	bne.w	800774e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800762c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007630:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007634:	b2d9      	uxtb	r1, r3
 8007636:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800763a:	b2da      	uxtb	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007640:	400a      	ands	r2, r1
 8007642:	b2d2      	uxtb	r2, r2
 8007644:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007656:	b29b      	uxth	r3, r3
 8007658:	3b01      	subs	r3, #1
 800765a:	b29a      	uxth	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d179      	bne.n	8007762 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800767c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007682:	653b      	str	r3, [r7, #80]	; 0x50
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800768c:	647b      	str	r3, [r7, #68]	; 0x44
 800768e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800769a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e6      	bne.n	800766e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3308      	adds	r3, #8
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	623b      	str	r3, [r7, #32]
   return(result);
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	f023 0301 	bic.w	r3, r3, #1
 80076b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3308      	adds	r3, #8
 80076be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076c0:	633a      	str	r2, [r7, #48]	; 0x30
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e5      	bne.n	80076a0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d12e      	bne.n	8007746 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0310 	bic.w	r3, r3, #16
 8007702:	64bb      	str	r3, [r7, #72]	; 0x48
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800770c:	61fb      	str	r3, [r7, #28]
 800770e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	69b9      	ldr	r1, [r7, #24]
 8007712:	69fa      	ldr	r2, [r7, #28]
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	617b      	str	r3, [r7, #20]
   return(result);
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e6      	bne.n	80076ee <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	2b10      	cmp	r3, #16
 800772c:	d103      	bne.n	8007736 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2210      	movs	r2, #16
 8007734:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff f924 	bl	800698c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007744:	e00d      	b.n	8007762 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7fa f970 	bl	8001a2c <HAL_UART_RxCpltCallback>
}
 800774c:	e009      	b.n	8007762 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	8b1b      	ldrh	r3, [r3, #24]
 8007754:	b29a      	uxth	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0208 	orr.w	r2, r2, #8
 800775e:	b292      	uxth	r2, r2
 8007760:	831a      	strh	r2, [r3, #24]
}
 8007762:	bf00      	nop
 8007764:	3758      	adds	r7, #88	; 0x58
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b096      	sub	sp, #88	; 0x58
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007778:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007780:	2b22      	cmp	r3, #34	; 0x22
 8007782:	f040 8094 	bne.w	80078ae <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800778c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007796:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800779a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800779e:	4013      	ands	r3, r2
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077aa:	1c9a      	adds	r2, r3, #2
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d179      	bne.n	80078c2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	e853 3f00 	ldrex	r3, [r3]
 80077da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	461a      	mov	r2, r3
 80077ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ec:	643b      	str	r3, [r7, #64]	; 0x40
 80077ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077f4:	e841 2300 	strex	r3, r2, [r1]
 80077f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e6      	bne.n	80077ce <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3308      	adds	r3, #8
 8007806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f023 0301 	bic.w	r3, r3, #1
 8007816:	64bb      	str	r3, [r7, #72]	; 0x48
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3308      	adds	r3, #8
 800781e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007820:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e5      	bne.n	8007800 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2220      	movs	r2, #32
 8007838:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007844:	2b01      	cmp	r3, #1
 8007846:	d12e      	bne.n	80078a6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	60bb      	str	r3, [r7, #8]
   return(result);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f023 0310 	bic.w	r3, r3, #16
 8007862:	647b      	str	r3, [r7, #68]	; 0x44
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800786c:	61bb      	str	r3, [r7, #24]
 800786e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6979      	ldr	r1, [r7, #20]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	613b      	str	r3, [r7, #16]
   return(result);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e6      	bne.n	800784e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b10      	cmp	r3, #16
 800788c:	d103      	bne.n	8007896 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2210      	movs	r2, #16
 8007894:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff f874 	bl	800698c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078a4:	e00d      	b.n	80078c2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fa f8c0 	bl	8001a2c <HAL_UART_RxCpltCallback>
}
 80078ac:	e009      	b.n	80078c2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	8b1b      	ldrh	r3, [r3, #24]
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0208 	orr.w	r2, r2, #8
 80078be:	b292      	uxth	r2, r2
 80078c0:	831a      	strh	r2, [r3, #24]
}
 80078c2:	bf00      	nop
 80078c4:	3758      	adds	r7, #88	; 0x58
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078d2:	bf00      	nop
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
	...

080078e0 <__assert_func>:
 80078e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078e2:	4614      	mov	r4, r2
 80078e4:	461a      	mov	r2, r3
 80078e6:	4b09      	ldr	r3, [pc, #36]	; (800790c <__assert_func+0x2c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4605      	mov	r5, r0
 80078ec:	68d8      	ldr	r0, [r3, #12]
 80078ee:	b14c      	cbz	r4, 8007904 <__assert_func+0x24>
 80078f0:	4b07      	ldr	r3, [pc, #28]	; (8007910 <__assert_func+0x30>)
 80078f2:	9100      	str	r1, [sp, #0]
 80078f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078f8:	4906      	ldr	r1, [pc, #24]	; (8007914 <__assert_func+0x34>)
 80078fa:	462b      	mov	r3, r5
 80078fc:	f000 f834 	bl	8007968 <fiprintf>
 8007900:	f000 ff1c 	bl	800873c <abort>
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <__assert_func+0x38>)
 8007906:	461c      	mov	r4, r3
 8007908:	e7f3      	b.n	80078f2 <__assert_func+0x12>
 800790a:	bf00      	nop
 800790c:	2000000c 	.word	0x2000000c
 8007910:	080097a4 	.word	0x080097a4
 8007914:	080097b1 	.word	0x080097b1
 8007918:	080097df 	.word	0x080097df

0800791c <atoi>:
 800791c:	220a      	movs	r2, #10
 800791e:	2100      	movs	r1, #0
 8007920:	f000 be08 	b.w	8008534 <strtol>

08007924 <calloc>:
 8007924:	4b02      	ldr	r3, [pc, #8]	; (8007930 <calloc+0xc>)
 8007926:	460a      	mov	r2, r1
 8007928:	4601      	mov	r1, r0
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	f000 b888 	b.w	8007a40 <_calloc_r>
 8007930:	2000000c 	.word	0x2000000c

08007934 <__errno>:
 8007934:	4b01      	ldr	r3, [pc, #4]	; (800793c <__errno+0x8>)
 8007936:	6818      	ldr	r0, [r3, #0]
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	2000000c 	.word	0x2000000c

08007940 <exit>:
 8007940:	b508      	push	{r3, lr}
 8007942:	4b07      	ldr	r3, [pc, #28]	; (8007960 <exit+0x20>)
 8007944:	4604      	mov	r4, r0
 8007946:	b113      	cbz	r3, 800794e <exit+0xe>
 8007948:	2100      	movs	r1, #0
 800794a:	f3af 8000 	nop.w
 800794e:	4b05      	ldr	r3, [pc, #20]	; (8007964 <exit+0x24>)
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007954:	b103      	cbz	r3, 8007958 <exit+0x18>
 8007956:	4798      	blx	r3
 8007958:	4620      	mov	r0, r4
 800795a:	f7fb f903 	bl	8002b64 <_exit>
 800795e:	bf00      	nop
 8007960:	00000000 	.word	0x00000000
 8007964:	080097e0 	.word	0x080097e0

08007968 <fiprintf>:
 8007968:	b40e      	push	{r1, r2, r3}
 800796a:	b503      	push	{r0, r1, lr}
 800796c:	4601      	mov	r1, r0
 800796e:	ab03      	add	r3, sp, #12
 8007970:	4805      	ldr	r0, [pc, #20]	; (8007988 <fiprintf+0x20>)
 8007972:	f853 2b04 	ldr.w	r2, [r3], #4
 8007976:	6800      	ldr	r0, [r0, #0]
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	f000 f981 	bl	8007c80 <_vfiprintf_r>
 800797e:	b002      	add	sp, #8
 8007980:	f85d eb04 	ldr.w	lr, [sp], #4
 8007984:	b003      	add	sp, #12
 8007986:	4770      	bx	lr
 8007988:	2000000c 	.word	0x2000000c

0800798c <__libc_init_array>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	4d0d      	ldr	r5, [pc, #52]	; (80079c4 <__libc_init_array+0x38>)
 8007990:	4c0d      	ldr	r4, [pc, #52]	; (80079c8 <__libc_init_array+0x3c>)
 8007992:	1b64      	subs	r4, r4, r5
 8007994:	10a4      	asrs	r4, r4, #2
 8007996:	2600      	movs	r6, #0
 8007998:	42a6      	cmp	r6, r4
 800799a:	d109      	bne.n	80079b0 <__libc_init_array+0x24>
 800799c:	4d0b      	ldr	r5, [pc, #44]	; (80079cc <__libc_init_array+0x40>)
 800799e:	4c0c      	ldr	r4, [pc, #48]	; (80079d0 <__libc_init_array+0x44>)
 80079a0:	f001 fbb6 	bl	8009110 <_init>
 80079a4:	1b64      	subs	r4, r4, r5
 80079a6:	10a4      	asrs	r4, r4, #2
 80079a8:	2600      	movs	r6, #0
 80079aa:	42a6      	cmp	r6, r4
 80079ac:	d105      	bne.n	80079ba <__libc_init_array+0x2e>
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b4:	4798      	blx	r3
 80079b6:	3601      	adds	r6, #1
 80079b8:	e7ee      	b.n	8007998 <__libc_init_array+0xc>
 80079ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80079be:	4798      	blx	r3
 80079c0:	3601      	adds	r6, #1
 80079c2:	e7f2      	b.n	80079aa <__libc_init_array+0x1e>
 80079c4:	080099f4 	.word	0x080099f4
 80079c8:	080099f4 	.word	0x080099f4
 80079cc:	080099f4 	.word	0x080099f4
 80079d0:	080099f8 	.word	0x080099f8

080079d4 <malloc>:
 80079d4:	4b02      	ldr	r3, [pc, #8]	; (80079e0 <malloc+0xc>)
 80079d6:	4601      	mov	r1, r0
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	f000 b8b3 	b.w	8007b44 <_malloc_r>
 80079de:	bf00      	nop
 80079e0:	2000000c 	.word	0x2000000c

080079e4 <free>:
 80079e4:	4b02      	ldr	r3, [pc, #8]	; (80079f0 <free+0xc>)
 80079e6:	4601      	mov	r1, r0
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	f000 b83f 	b.w	8007a6c <_free_r>
 80079ee:	bf00      	nop
 80079f0:	2000000c 	.word	0x2000000c

080079f4 <memcmp>:
 80079f4:	b510      	push	{r4, lr}
 80079f6:	3901      	subs	r1, #1
 80079f8:	4402      	add	r2, r0
 80079fa:	4290      	cmp	r0, r2
 80079fc:	d101      	bne.n	8007a02 <memcmp+0xe>
 80079fe:	2000      	movs	r0, #0
 8007a00:	e005      	b.n	8007a0e <memcmp+0x1a>
 8007a02:	7803      	ldrb	r3, [r0, #0]
 8007a04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	d001      	beq.n	8007a10 <memcmp+0x1c>
 8007a0c:	1b18      	subs	r0, r3, r4
 8007a0e:	bd10      	pop	{r4, pc}
 8007a10:	3001      	adds	r0, #1
 8007a12:	e7f2      	b.n	80079fa <memcmp+0x6>

08007a14 <memcpy>:
 8007a14:	440a      	add	r2, r1
 8007a16:	4291      	cmp	r1, r2
 8007a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a1c:	d100      	bne.n	8007a20 <memcpy+0xc>
 8007a1e:	4770      	bx	lr
 8007a20:	b510      	push	{r4, lr}
 8007a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a2a:	4291      	cmp	r1, r2
 8007a2c:	d1f9      	bne.n	8007a22 <memcpy+0xe>
 8007a2e:	bd10      	pop	{r4, pc}

08007a30 <memset>:
 8007a30:	4402      	add	r2, r0
 8007a32:	4603      	mov	r3, r0
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d100      	bne.n	8007a3a <memset+0xa>
 8007a38:	4770      	bx	lr
 8007a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a3e:	e7f9      	b.n	8007a34 <memset+0x4>

08007a40 <_calloc_r>:
 8007a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a42:	fba1 2402 	umull	r2, r4, r1, r2
 8007a46:	b94c      	cbnz	r4, 8007a5c <_calloc_r+0x1c>
 8007a48:	4611      	mov	r1, r2
 8007a4a:	9201      	str	r2, [sp, #4]
 8007a4c:	f000 f87a 	bl	8007b44 <_malloc_r>
 8007a50:	9a01      	ldr	r2, [sp, #4]
 8007a52:	4605      	mov	r5, r0
 8007a54:	b930      	cbnz	r0, 8007a64 <_calloc_r+0x24>
 8007a56:	4628      	mov	r0, r5
 8007a58:	b003      	add	sp, #12
 8007a5a:	bd30      	pop	{r4, r5, pc}
 8007a5c:	220c      	movs	r2, #12
 8007a5e:	6002      	str	r2, [r0, #0]
 8007a60:	2500      	movs	r5, #0
 8007a62:	e7f8      	b.n	8007a56 <_calloc_r+0x16>
 8007a64:	4621      	mov	r1, r4
 8007a66:	f7ff ffe3 	bl	8007a30 <memset>
 8007a6a:	e7f4      	b.n	8007a56 <_calloc_r+0x16>

08007a6c <_free_r>:
 8007a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a6e:	2900      	cmp	r1, #0
 8007a70:	d044      	beq.n	8007afc <_free_r+0x90>
 8007a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a76:	9001      	str	r0, [sp, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a7e:	bfb8      	it	lt
 8007a80:	18e4      	addlt	r4, r4, r3
 8007a82:	f001 f8af 	bl	8008be4 <__malloc_lock>
 8007a86:	4a1e      	ldr	r2, [pc, #120]	; (8007b00 <_free_r+0x94>)
 8007a88:	9801      	ldr	r0, [sp, #4]
 8007a8a:	6813      	ldr	r3, [r2, #0]
 8007a8c:	b933      	cbnz	r3, 8007a9c <_free_r+0x30>
 8007a8e:	6063      	str	r3, [r4, #4]
 8007a90:	6014      	str	r4, [r2, #0]
 8007a92:	b003      	add	sp, #12
 8007a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a98:	f001 b8aa 	b.w	8008bf0 <__malloc_unlock>
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	d908      	bls.n	8007ab2 <_free_r+0x46>
 8007aa0:	6825      	ldr	r5, [r4, #0]
 8007aa2:	1961      	adds	r1, r4, r5
 8007aa4:	428b      	cmp	r3, r1
 8007aa6:	bf01      	itttt	eq
 8007aa8:	6819      	ldreq	r1, [r3, #0]
 8007aaa:	685b      	ldreq	r3, [r3, #4]
 8007aac:	1949      	addeq	r1, r1, r5
 8007aae:	6021      	streq	r1, [r4, #0]
 8007ab0:	e7ed      	b.n	8007a8e <_free_r+0x22>
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	b10b      	cbz	r3, 8007abc <_free_r+0x50>
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	d9fa      	bls.n	8007ab2 <_free_r+0x46>
 8007abc:	6811      	ldr	r1, [r2, #0]
 8007abe:	1855      	adds	r5, r2, r1
 8007ac0:	42a5      	cmp	r5, r4
 8007ac2:	d10b      	bne.n	8007adc <_free_r+0x70>
 8007ac4:	6824      	ldr	r4, [r4, #0]
 8007ac6:	4421      	add	r1, r4
 8007ac8:	1854      	adds	r4, r2, r1
 8007aca:	42a3      	cmp	r3, r4
 8007acc:	6011      	str	r1, [r2, #0]
 8007ace:	d1e0      	bne.n	8007a92 <_free_r+0x26>
 8007ad0:	681c      	ldr	r4, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	6053      	str	r3, [r2, #4]
 8007ad6:	4421      	add	r1, r4
 8007ad8:	6011      	str	r1, [r2, #0]
 8007ada:	e7da      	b.n	8007a92 <_free_r+0x26>
 8007adc:	d902      	bls.n	8007ae4 <_free_r+0x78>
 8007ade:	230c      	movs	r3, #12
 8007ae0:	6003      	str	r3, [r0, #0]
 8007ae2:	e7d6      	b.n	8007a92 <_free_r+0x26>
 8007ae4:	6825      	ldr	r5, [r4, #0]
 8007ae6:	1961      	adds	r1, r4, r5
 8007ae8:	428b      	cmp	r3, r1
 8007aea:	bf04      	itt	eq
 8007aec:	6819      	ldreq	r1, [r3, #0]
 8007aee:	685b      	ldreq	r3, [r3, #4]
 8007af0:	6063      	str	r3, [r4, #4]
 8007af2:	bf04      	itt	eq
 8007af4:	1949      	addeq	r1, r1, r5
 8007af6:	6021      	streq	r1, [r4, #0]
 8007af8:	6054      	str	r4, [r2, #4]
 8007afa:	e7ca      	b.n	8007a92 <_free_r+0x26>
 8007afc:	b003      	add	sp, #12
 8007afe:	bd30      	pop	{r4, r5, pc}
 8007b00:	200004c0 	.word	0x200004c0

08007b04 <sbrk_aligned>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	4e0e      	ldr	r6, [pc, #56]	; (8007b40 <sbrk_aligned+0x3c>)
 8007b08:	460c      	mov	r4, r1
 8007b0a:	6831      	ldr	r1, [r6, #0]
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	b911      	cbnz	r1, 8007b16 <sbrk_aligned+0x12>
 8007b10:	f000 fc1e 	bl	8008350 <_sbrk_r>
 8007b14:	6030      	str	r0, [r6, #0]
 8007b16:	4621      	mov	r1, r4
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f000 fc19 	bl	8008350 <_sbrk_r>
 8007b1e:	1c43      	adds	r3, r0, #1
 8007b20:	d00a      	beq.n	8007b38 <sbrk_aligned+0x34>
 8007b22:	1cc4      	adds	r4, r0, #3
 8007b24:	f024 0403 	bic.w	r4, r4, #3
 8007b28:	42a0      	cmp	r0, r4
 8007b2a:	d007      	beq.n	8007b3c <sbrk_aligned+0x38>
 8007b2c:	1a21      	subs	r1, r4, r0
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 fc0e 	bl	8008350 <_sbrk_r>
 8007b34:	3001      	adds	r0, #1
 8007b36:	d101      	bne.n	8007b3c <sbrk_aligned+0x38>
 8007b38:	f04f 34ff 	mov.w	r4, #4294967295
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	200004c4 	.word	0x200004c4

08007b44 <_malloc_r>:
 8007b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b48:	1ccd      	adds	r5, r1, #3
 8007b4a:	f025 0503 	bic.w	r5, r5, #3
 8007b4e:	3508      	adds	r5, #8
 8007b50:	2d0c      	cmp	r5, #12
 8007b52:	bf38      	it	cc
 8007b54:	250c      	movcc	r5, #12
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	4607      	mov	r7, r0
 8007b5a:	db01      	blt.n	8007b60 <_malloc_r+0x1c>
 8007b5c:	42a9      	cmp	r1, r5
 8007b5e:	d905      	bls.n	8007b6c <_malloc_r+0x28>
 8007b60:	230c      	movs	r3, #12
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	2600      	movs	r6, #0
 8007b66:	4630      	mov	r0, r6
 8007b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b6c:	4e2e      	ldr	r6, [pc, #184]	; (8007c28 <_malloc_r+0xe4>)
 8007b6e:	f001 f839 	bl	8008be4 <__malloc_lock>
 8007b72:	6833      	ldr	r3, [r6, #0]
 8007b74:	461c      	mov	r4, r3
 8007b76:	bb34      	cbnz	r4, 8007bc6 <_malloc_r+0x82>
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	f7ff ffc2 	bl	8007b04 <sbrk_aligned>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	4604      	mov	r4, r0
 8007b84:	d14d      	bne.n	8007c22 <_malloc_r+0xde>
 8007b86:	6834      	ldr	r4, [r6, #0]
 8007b88:	4626      	mov	r6, r4
 8007b8a:	2e00      	cmp	r6, #0
 8007b8c:	d140      	bne.n	8007c10 <_malloc_r+0xcc>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	4631      	mov	r1, r6
 8007b92:	4638      	mov	r0, r7
 8007b94:	eb04 0803 	add.w	r8, r4, r3
 8007b98:	f000 fbda 	bl	8008350 <_sbrk_r>
 8007b9c:	4580      	cmp	r8, r0
 8007b9e:	d13a      	bne.n	8007c16 <_malloc_r+0xd2>
 8007ba0:	6821      	ldr	r1, [r4, #0]
 8007ba2:	3503      	adds	r5, #3
 8007ba4:	1a6d      	subs	r5, r5, r1
 8007ba6:	f025 0503 	bic.w	r5, r5, #3
 8007baa:	3508      	adds	r5, #8
 8007bac:	2d0c      	cmp	r5, #12
 8007bae:	bf38      	it	cc
 8007bb0:	250c      	movcc	r5, #12
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f7ff ffa5 	bl	8007b04 <sbrk_aligned>
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d02b      	beq.n	8007c16 <_malloc_r+0xd2>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	442b      	add	r3, r5
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	e00e      	b.n	8007be4 <_malloc_r+0xa0>
 8007bc6:	6822      	ldr	r2, [r4, #0]
 8007bc8:	1b52      	subs	r2, r2, r5
 8007bca:	d41e      	bmi.n	8007c0a <_malloc_r+0xc6>
 8007bcc:	2a0b      	cmp	r2, #11
 8007bce:	d916      	bls.n	8007bfe <_malloc_r+0xba>
 8007bd0:	1961      	adds	r1, r4, r5
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	6025      	str	r5, [r4, #0]
 8007bd6:	bf18      	it	ne
 8007bd8:	6059      	strne	r1, [r3, #4]
 8007bda:	6863      	ldr	r3, [r4, #4]
 8007bdc:	bf08      	it	eq
 8007bde:	6031      	streq	r1, [r6, #0]
 8007be0:	5162      	str	r2, [r4, r5]
 8007be2:	604b      	str	r3, [r1, #4]
 8007be4:	4638      	mov	r0, r7
 8007be6:	f104 060b 	add.w	r6, r4, #11
 8007bea:	f001 f801 	bl	8008bf0 <__malloc_unlock>
 8007bee:	f026 0607 	bic.w	r6, r6, #7
 8007bf2:	1d23      	adds	r3, r4, #4
 8007bf4:	1af2      	subs	r2, r6, r3
 8007bf6:	d0b6      	beq.n	8007b66 <_malloc_r+0x22>
 8007bf8:	1b9b      	subs	r3, r3, r6
 8007bfa:	50a3      	str	r3, [r4, r2]
 8007bfc:	e7b3      	b.n	8007b66 <_malloc_r+0x22>
 8007bfe:	6862      	ldr	r2, [r4, #4]
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	bf0c      	ite	eq
 8007c04:	6032      	streq	r2, [r6, #0]
 8007c06:	605a      	strne	r2, [r3, #4]
 8007c08:	e7ec      	b.n	8007be4 <_malloc_r+0xa0>
 8007c0a:	4623      	mov	r3, r4
 8007c0c:	6864      	ldr	r4, [r4, #4]
 8007c0e:	e7b2      	b.n	8007b76 <_malloc_r+0x32>
 8007c10:	4634      	mov	r4, r6
 8007c12:	6876      	ldr	r6, [r6, #4]
 8007c14:	e7b9      	b.n	8007b8a <_malloc_r+0x46>
 8007c16:	230c      	movs	r3, #12
 8007c18:	603b      	str	r3, [r7, #0]
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	f000 ffe8 	bl	8008bf0 <__malloc_unlock>
 8007c20:	e7a1      	b.n	8007b66 <_malloc_r+0x22>
 8007c22:	6025      	str	r5, [r4, #0]
 8007c24:	e7de      	b.n	8007be4 <_malloc_r+0xa0>
 8007c26:	bf00      	nop
 8007c28:	200004c0 	.word	0x200004c0

08007c2c <__sfputc_r>:
 8007c2c:	6893      	ldr	r3, [r2, #8]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	b410      	push	{r4}
 8007c34:	6093      	str	r3, [r2, #8]
 8007c36:	da08      	bge.n	8007c4a <__sfputc_r+0x1e>
 8007c38:	6994      	ldr	r4, [r2, #24]
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	db01      	blt.n	8007c42 <__sfputc_r+0x16>
 8007c3e:	290a      	cmp	r1, #10
 8007c40:	d103      	bne.n	8007c4a <__sfputc_r+0x1e>
 8007c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c46:	f000 bcb9 	b.w	80085bc <__swbuf_r>
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	1c58      	adds	r0, r3, #1
 8007c4e:	6010      	str	r0, [r2, #0]
 8007c50:	7019      	strb	r1, [r3, #0]
 8007c52:	4608      	mov	r0, r1
 8007c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <__sfputs_r>:
 8007c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	460f      	mov	r7, r1
 8007c60:	4614      	mov	r4, r2
 8007c62:	18d5      	adds	r5, r2, r3
 8007c64:	42ac      	cmp	r4, r5
 8007c66:	d101      	bne.n	8007c6c <__sfputs_r+0x12>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	e007      	b.n	8007c7c <__sfputs_r+0x22>
 8007c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c70:	463a      	mov	r2, r7
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7ff ffda 	bl	8007c2c <__sfputc_r>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d1f3      	bne.n	8007c64 <__sfputs_r+0xa>
 8007c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c80 <_vfiprintf_r>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	460d      	mov	r5, r1
 8007c86:	b09d      	sub	sp, #116	; 0x74
 8007c88:	4614      	mov	r4, r2
 8007c8a:	4698      	mov	r8, r3
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	b118      	cbz	r0, 8007c98 <_vfiprintf_r+0x18>
 8007c90:	6983      	ldr	r3, [r0, #24]
 8007c92:	b90b      	cbnz	r3, 8007c98 <_vfiprintf_r+0x18>
 8007c94:	f000 fe74 	bl	8008980 <__sinit>
 8007c98:	4b89      	ldr	r3, [pc, #548]	; (8007ec0 <_vfiprintf_r+0x240>)
 8007c9a:	429d      	cmp	r5, r3
 8007c9c:	d11b      	bne.n	8007cd6 <_vfiprintf_r+0x56>
 8007c9e:	6875      	ldr	r5, [r6, #4]
 8007ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ca2:	07d9      	lsls	r1, r3, #31
 8007ca4:	d405      	bmi.n	8007cb2 <_vfiprintf_r+0x32>
 8007ca6:	89ab      	ldrh	r3, [r5, #12]
 8007ca8:	059a      	lsls	r2, r3, #22
 8007caa:	d402      	bmi.n	8007cb2 <_vfiprintf_r+0x32>
 8007cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cae:	f000 ff18 	bl	8008ae2 <__retarget_lock_acquire_recursive>
 8007cb2:	89ab      	ldrh	r3, [r5, #12]
 8007cb4:	071b      	lsls	r3, r3, #28
 8007cb6:	d501      	bpl.n	8007cbc <_vfiprintf_r+0x3c>
 8007cb8:	692b      	ldr	r3, [r5, #16]
 8007cba:	b9eb      	cbnz	r3, 8007cf8 <_vfiprintf_r+0x78>
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f000 fcce 	bl	8008660 <__swsetup_r>
 8007cc4:	b1c0      	cbz	r0, 8007cf8 <_vfiprintf_r+0x78>
 8007cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cc8:	07dc      	lsls	r4, r3, #31
 8007cca:	d50e      	bpl.n	8007cea <_vfiprintf_r+0x6a>
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd0:	b01d      	add	sp, #116	; 0x74
 8007cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd6:	4b7b      	ldr	r3, [pc, #492]	; (8007ec4 <_vfiprintf_r+0x244>)
 8007cd8:	429d      	cmp	r5, r3
 8007cda:	d101      	bne.n	8007ce0 <_vfiprintf_r+0x60>
 8007cdc:	68b5      	ldr	r5, [r6, #8]
 8007cde:	e7df      	b.n	8007ca0 <_vfiprintf_r+0x20>
 8007ce0:	4b79      	ldr	r3, [pc, #484]	; (8007ec8 <_vfiprintf_r+0x248>)
 8007ce2:	429d      	cmp	r5, r3
 8007ce4:	bf08      	it	eq
 8007ce6:	68f5      	ldreq	r5, [r6, #12]
 8007ce8:	e7da      	b.n	8007ca0 <_vfiprintf_r+0x20>
 8007cea:	89ab      	ldrh	r3, [r5, #12]
 8007cec:	0598      	lsls	r0, r3, #22
 8007cee:	d4ed      	bmi.n	8007ccc <_vfiprintf_r+0x4c>
 8007cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cf2:	f000 fef7 	bl	8008ae4 <__retarget_lock_release_recursive>
 8007cf6:	e7e9      	b.n	8007ccc <_vfiprintf_r+0x4c>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007cfc:	2320      	movs	r3, #32
 8007cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d06:	2330      	movs	r3, #48	; 0x30
 8007d08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ecc <_vfiprintf_r+0x24c>
 8007d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d10:	f04f 0901 	mov.w	r9, #1
 8007d14:	4623      	mov	r3, r4
 8007d16:	469a      	mov	sl, r3
 8007d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d1c:	b10a      	cbz	r2, 8007d22 <_vfiprintf_r+0xa2>
 8007d1e:	2a25      	cmp	r2, #37	; 0x25
 8007d20:	d1f9      	bne.n	8007d16 <_vfiprintf_r+0x96>
 8007d22:	ebba 0b04 	subs.w	fp, sl, r4
 8007d26:	d00b      	beq.n	8007d40 <_vfiprintf_r+0xc0>
 8007d28:	465b      	mov	r3, fp
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f7ff ff93 	bl	8007c5a <__sfputs_r>
 8007d34:	3001      	adds	r0, #1
 8007d36:	f000 80aa 	beq.w	8007e8e <_vfiprintf_r+0x20e>
 8007d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d3c:	445a      	add	r2, fp
 8007d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d40:	f89a 3000 	ldrb.w	r3, [sl]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 80a2 	beq.w	8007e8e <_vfiprintf_r+0x20e>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d54:	f10a 0a01 	add.w	sl, sl, #1
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	9307      	str	r3, [sp, #28]
 8007d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d60:	931a      	str	r3, [sp, #104]	; 0x68
 8007d62:	4654      	mov	r4, sl
 8007d64:	2205      	movs	r2, #5
 8007d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6a:	4858      	ldr	r0, [pc, #352]	; (8007ecc <_vfiprintf_r+0x24c>)
 8007d6c:	f7f8 fa38 	bl	80001e0 <memchr>
 8007d70:	9a04      	ldr	r2, [sp, #16]
 8007d72:	b9d8      	cbnz	r0, 8007dac <_vfiprintf_r+0x12c>
 8007d74:	06d1      	lsls	r1, r2, #27
 8007d76:	bf44      	itt	mi
 8007d78:	2320      	movmi	r3, #32
 8007d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d7e:	0713      	lsls	r3, r2, #28
 8007d80:	bf44      	itt	mi
 8007d82:	232b      	movmi	r3, #43	; 0x2b
 8007d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d88:	f89a 3000 	ldrb.w	r3, [sl]
 8007d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d8e:	d015      	beq.n	8007dbc <_vfiprintf_r+0x13c>
 8007d90:	9a07      	ldr	r2, [sp, #28]
 8007d92:	4654      	mov	r4, sl
 8007d94:	2000      	movs	r0, #0
 8007d96:	f04f 0c0a 	mov.w	ip, #10
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007da0:	3b30      	subs	r3, #48	; 0x30
 8007da2:	2b09      	cmp	r3, #9
 8007da4:	d94e      	bls.n	8007e44 <_vfiprintf_r+0x1c4>
 8007da6:	b1b0      	cbz	r0, 8007dd6 <_vfiprintf_r+0x156>
 8007da8:	9207      	str	r2, [sp, #28]
 8007daa:	e014      	b.n	8007dd6 <_vfiprintf_r+0x156>
 8007dac:	eba0 0308 	sub.w	r3, r0, r8
 8007db0:	fa09 f303 	lsl.w	r3, r9, r3
 8007db4:	4313      	orrs	r3, r2
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	46a2      	mov	sl, r4
 8007dba:	e7d2      	b.n	8007d62 <_vfiprintf_r+0xe2>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	1d19      	adds	r1, r3, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	9103      	str	r1, [sp, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bfbb      	ittet	lt
 8007dc8:	425b      	neglt	r3, r3
 8007dca:	f042 0202 	orrlt.w	r2, r2, #2
 8007dce:	9307      	strge	r3, [sp, #28]
 8007dd0:	9307      	strlt	r3, [sp, #28]
 8007dd2:	bfb8      	it	lt
 8007dd4:	9204      	strlt	r2, [sp, #16]
 8007dd6:	7823      	ldrb	r3, [r4, #0]
 8007dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8007dda:	d10c      	bne.n	8007df6 <_vfiprintf_r+0x176>
 8007ddc:	7863      	ldrb	r3, [r4, #1]
 8007dde:	2b2a      	cmp	r3, #42	; 0x2a
 8007de0:	d135      	bne.n	8007e4e <_vfiprintf_r+0x1ce>
 8007de2:	9b03      	ldr	r3, [sp, #12]
 8007de4:	1d1a      	adds	r2, r3, #4
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	9203      	str	r2, [sp, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfb8      	it	lt
 8007dee:	f04f 33ff 	movlt.w	r3, #4294967295
 8007df2:	3402      	adds	r4, #2
 8007df4:	9305      	str	r3, [sp, #20]
 8007df6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007edc <_vfiprintf_r+0x25c>
 8007dfa:	7821      	ldrb	r1, [r4, #0]
 8007dfc:	2203      	movs	r2, #3
 8007dfe:	4650      	mov	r0, sl
 8007e00:	f7f8 f9ee 	bl	80001e0 <memchr>
 8007e04:	b140      	cbz	r0, 8007e18 <_vfiprintf_r+0x198>
 8007e06:	2340      	movs	r3, #64	; 0x40
 8007e08:	eba0 000a 	sub.w	r0, r0, sl
 8007e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8007e10:	9b04      	ldr	r3, [sp, #16]
 8007e12:	4303      	orrs	r3, r0
 8007e14:	3401      	adds	r4, #1
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1c:	482c      	ldr	r0, [pc, #176]	; (8007ed0 <_vfiprintf_r+0x250>)
 8007e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e22:	2206      	movs	r2, #6
 8007e24:	f7f8 f9dc 	bl	80001e0 <memchr>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d03f      	beq.n	8007eac <_vfiprintf_r+0x22c>
 8007e2c:	4b29      	ldr	r3, [pc, #164]	; (8007ed4 <_vfiprintf_r+0x254>)
 8007e2e:	bb1b      	cbnz	r3, 8007e78 <_vfiprintf_r+0x1f8>
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	3307      	adds	r3, #7
 8007e34:	f023 0307 	bic.w	r3, r3, #7
 8007e38:	3308      	adds	r3, #8
 8007e3a:	9303      	str	r3, [sp, #12]
 8007e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3e:	443b      	add	r3, r7
 8007e40:	9309      	str	r3, [sp, #36]	; 0x24
 8007e42:	e767      	b.n	8007d14 <_vfiprintf_r+0x94>
 8007e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e48:	460c      	mov	r4, r1
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	e7a5      	b.n	8007d9a <_vfiprintf_r+0x11a>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	3401      	adds	r4, #1
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	4619      	mov	r1, r3
 8007e56:	f04f 0c0a 	mov.w	ip, #10
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e60:	3a30      	subs	r2, #48	; 0x30
 8007e62:	2a09      	cmp	r2, #9
 8007e64:	d903      	bls.n	8007e6e <_vfiprintf_r+0x1ee>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0c5      	beq.n	8007df6 <_vfiprintf_r+0x176>
 8007e6a:	9105      	str	r1, [sp, #20]
 8007e6c:	e7c3      	b.n	8007df6 <_vfiprintf_r+0x176>
 8007e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e72:	4604      	mov	r4, r0
 8007e74:	2301      	movs	r3, #1
 8007e76:	e7f0      	b.n	8007e5a <_vfiprintf_r+0x1da>
 8007e78:	ab03      	add	r3, sp, #12
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	4b16      	ldr	r3, [pc, #88]	; (8007ed8 <_vfiprintf_r+0x258>)
 8007e80:	a904      	add	r1, sp, #16
 8007e82:	4630      	mov	r0, r6
 8007e84:	f3af 8000 	nop.w
 8007e88:	4607      	mov	r7, r0
 8007e8a:	1c78      	adds	r0, r7, #1
 8007e8c:	d1d6      	bne.n	8007e3c <_vfiprintf_r+0x1bc>
 8007e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e90:	07d9      	lsls	r1, r3, #31
 8007e92:	d405      	bmi.n	8007ea0 <_vfiprintf_r+0x220>
 8007e94:	89ab      	ldrh	r3, [r5, #12]
 8007e96:	059a      	lsls	r2, r3, #22
 8007e98:	d402      	bmi.n	8007ea0 <_vfiprintf_r+0x220>
 8007e9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e9c:	f000 fe22 	bl	8008ae4 <__retarget_lock_release_recursive>
 8007ea0:	89ab      	ldrh	r3, [r5, #12]
 8007ea2:	065b      	lsls	r3, r3, #25
 8007ea4:	f53f af12 	bmi.w	8007ccc <_vfiprintf_r+0x4c>
 8007ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eaa:	e711      	b.n	8007cd0 <_vfiprintf_r+0x50>
 8007eac:	ab03      	add	r3, sp, #12
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	462a      	mov	r2, r5
 8007eb2:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <_vfiprintf_r+0x258>)
 8007eb4:	a904      	add	r1, sp, #16
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f000 f880 	bl	8007fbc <_printf_i>
 8007ebc:	e7e4      	b.n	8007e88 <_vfiprintf_r+0x208>
 8007ebe:	bf00      	nop
 8007ec0:	080099ac 	.word	0x080099ac
 8007ec4:	080099cc 	.word	0x080099cc
 8007ec8:	0800998c 	.word	0x0800998c
 8007ecc:	080097e4 	.word	0x080097e4
 8007ed0:	080097ee 	.word	0x080097ee
 8007ed4:	00000000 	.word	0x00000000
 8007ed8:	08007c5b 	.word	0x08007c5b
 8007edc:	080097ea 	.word	0x080097ea

08007ee0 <_printf_common>:
 8007ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	4616      	mov	r6, r2
 8007ee6:	4699      	mov	r9, r3
 8007ee8:	688a      	ldr	r2, [r1, #8]
 8007eea:	690b      	ldr	r3, [r1, #16]
 8007eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	bfb8      	it	lt
 8007ef4:	4613      	movlt	r3, r2
 8007ef6:	6033      	str	r3, [r6, #0]
 8007ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007efc:	4607      	mov	r7, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	b10a      	cbz	r2, 8007f06 <_printf_common+0x26>
 8007f02:	3301      	adds	r3, #1
 8007f04:	6033      	str	r3, [r6, #0]
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	0699      	lsls	r1, r3, #26
 8007f0a:	bf42      	ittt	mi
 8007f0c:	6833      	ldrmi	r3, [r6, #0]
 8007f0e:	3302      	addmi	r3, #2
 8007f10:	6033      	strmi	r3, [r6, #0]
 8007f12:	6825      	ldr	r5, [r4, #0]
 8007f14:	f015 0506 	ands.w	r5, r5, #6
 8007f18:	d106      	bne.n	8007f28 <_printf_common+0x48>
 8007f1a:	f104 0a19 	add.w	sl, r4, #25
 8007f1e:	68e3      	ldr	r3, [r4, #12]
 8007f20:	6832      	ldr	r2, [r6, #0]
 8007f22:	1a9b      	subs	r3, r3, r2
 8007f24:	42ab      	cmp	r3, r5
 8007f26:	dc26      	bgt.n	8007f76 <_printf_common+0x96>
 8007f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f2c:	1e13      	subs	r3, r2, #0
 8007f2e:	6822      	ldr	r2, [r4, #0]
 8007f30:	bf18      	it	ne
 8007f32:	2301      	movne	r3, #1
 8007f34:	0692      	lsls	r2, r2, #26
 8007f36:	d42b      	bmi.n	8007f90 <_printf_common+0xb0>
 8007f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	4638      	mov	r0, r7
 8007f40:	47c0      	blx	r8
 8007f42:	3001      	adds	r0, #1
 8007f44:	d01e      	beq.n	8007f84 <_printf_common+0xa4>
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	68e5      	ldr	r5, [r4, #12]
 8007f4a:	6832      	ldr	r2, [r6, #0]
 8007f4c:	f003 0306 	and.w	r3, r3, #6
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	bf08      	it	eq
 8007f54:	1aad      	subeq	r5, r5, r2
 8007f56:	68a3      	ldr	r3, [r4, #8]
 8007f58:	6922      	ldr	r2, [r4, #16]
 8007f5a:	bf0c      	ite	eq
 8007f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f60:	2500      	movne	r5, #0
 8007f62:	4293      	cmp	r3, r2
 8007f64:	bfc4      	itt	gt
 8007f66:	1a9b      	subgt	r3, r3, r2
 8007f68:	18ed      	addgt	r5, r5, r3
 8007f6a:	2600      	movs	r6, #0
 8007f6c:	341a      	adds	r4, #26
 8007f6e:	42b5      	cmp	r5, r6
 8007f70:	d11a      	bne.n	8007fa8 <_printf_common+0xc8>
 8007f72:	2000      	movs	r0, #0
 8007f74:	e008      	b.n	8007f88 <_printf_common+0xa8>
 8007f76:	2301      	movs	r3, #1
 8007f78:	4652      	mov	r2, sl
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	47c0      	blx	r8
 8007f80:	3001      	adds	r0, #1
 8007f82:	d103      	bne.n	8007f8c <_printf_common+0xac>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8c:	3501      	adds	r5, #1
 8007f8e:	e7c6      	b.n	8007f1e <_printf_common+0x3e>
 8007f90:	18e1      	adds	r1, r4, r3
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	2030      	movs	r0, #48	; 0x30
 8007f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f9a:	4422      	add	r2, r4
 8007f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fa4:	3302      	adds	r3, #2
 8007fa6:	e7c7      	b.n	8007f38 <_printf_common+0x58>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4622      	mov	r2, r4
 8007fac:	4649      	mov	r1, r9
 8007fae:	4638      	mov	r0, r7
 8007fb0:	47c0      	blx	r8
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	d0e6      	beq.n	8007f84 <_printf_common+0xa4>
 8007fb6:	3601      	adds	r6, #1
 8007fb8:	e7d9      	b.n	8007f6e <_printf_common+0x8e>
	...

08007fbc <_printf_i>:
 8007fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc0:	7e0f      	ldrb	r7, [r1, #24]
 8007fc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fc4:	2f78      	cmp	r7, #120	; 0x78
 8007fc6:	4691      	mov	r9, r2
 8007fc8:	4680      	mov	r8, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	469a      	mov	sl, r3
 8007fce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fd2:	d807      	bhi.n	8007fe4 <_printf_i+0x28>
 8007fd4:	2f62      	cmp	r7, #98	; 0x62
 8007fd6:	d80a      	bhi.n	8007fee <_printf_i+0x32>
 8007fd8:	2f00      	cmp	r7, #0
 8007fda:	f000 80d8 	beq.w	800818e <_printf_i+0x1d2>
 8007fde:	2f58      	cmp	r7, #88	; 0x58
 8007fe0:	f000 80a3 	beq.w	800812a <_printf_i+0x16e>
 8007fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fec:	e03a      	b.n	8008064 <_printf_i+0xa8>
 8007fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ff2:	2b15      	cmp	r3, #21
 8007ff4:	d8f6      	bhi.n	8007fe4 <_printf_i+0x28>
 8007ff6:	a101      	add	r1, pc, #4	; (adr r1, 8007ffc <_printf_i+0x40>)
 8007ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ffc:	08008055 	.word	0x08008055
 8008000:	08008069 	.word	0x08008069
 8008004:	08007fe5 	.word	0x08007fe5
 8008008:	08007fe5 	.word	0x08007fe5
 800800c:	08007fe5 	.word	0x08007fe5
 8008010:	08007fe5 	.word	0x08007fe5
 8008014:	08008069 	.word	0x08008069
 8008018:	08007fe5 	.word	0x08007fe5
 800801c:	08007fe5 	.word	0x08007fe5
 8008020:	08007fe5 	.word	0x08007fe5
 8008024:	08007fe5 	.word	0x08007fe5
 8008028:	08008175 	.word	0x08008175
 800802c:	08008099 	.word	0x08008099
 8008030:	08008157 	.word	0x08008157
 8008034:	08007fe5 	.word	0x08007fe5
 8008038:	08007fe5 	.word	0x08007fe5
 800803c:	08008197 	.word	0x08008197
 8008040:	08007fe5 	.word	0x08007fe5
 8008044:	08008099 	.word	0x08008099
 8008048:	08007fe5 	.word	0x08007fe5
 800804c:	08007fe5 	.word	0x08007fe5
 8008050:	0800815f 	.word	0x0800815f
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	1d1a      	adds	r2, r3, #4
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	602a      	str	r2, [r5, #0]
 800805c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008064:	2301      	movs	r3, #1
 8008066:	e0a3      	b.n	80081b0 <_printf_i+0x1f4>
 8008068:	6820      	ldr	r0, [r4, #0]
 800806a:	6829      	ldr	r1, [r5, #0]
 800806c:	0606      	lsls	r6, r0, #24
 800806e:	f101 0304 	add.w	r3, r1, #4
 8008072:	d50a      	bpl.n	800808a <_printf_i+0xce>
 8008074:	680e      	ldr	r6, [r1, #0]
 8008076:	602b      	str	r3, [r5, #0]
 8008078:	2e00      	cmp	r6, #0
 800807a:	da03      	bge.n	8008084 <_printf_i+0xc8>
 800807c:	232d      	movs	r3, #45	; 0x2d
 800807e:	4276      	negs	r6, r6
 8008080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008084:	485e      	ldr	r0, [pc, #376]	; (8008200 <_printf_i+0x244>)
 8008086:	230a      	movs	r3, #10
 8008088:	e019      	b.n	80080be <_printf_i+0x102>
 800808a:	680e      	ldr	r6, [r1, #0]
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008092:	bf18      	it	ne
 8008094:	b236      	sxthne	r6, r6
 8008096:	e7ef      	b.n	8008078 <_printf_i+0xbc>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	6820      	ldr	r0, [r4, #0]
 800809c:	1d19      	adds	r1, r3, #4
 800809e:	6029      	str	r1, [r5, #0]
 80080a0:	0601      	lsls	r1, r0, #24
 80080a2:	d501      	bpl.n	80080a8 <_printf_i+0xec>
 80080a4:	681e      	ldr	r6, [r3, #0]
 80080a6:	e002      	b.n	80080ae <_printf_i+0xf2>
 80080a8:	0646      	lsls	r6, r0, #25
 80080aa:	d5fb      	bpl.n	80080a4 <_printf_i+0xe8>
 80080ac:	881e      	ldrh	r6, [r3, #0]
 80080ae:	4854      	ldr	r0, [pc, #336]	; (8008200 <_printf_i+0x244>)
 80080b0:	2f6f      	cmp	r7, #111	; 0x6f
 80080b2:	bf0c      	ite	eq
 80080b4:	2308      	moveq	r3, #8
 80080b6:	230a      	movne	r3, #10
 80080b8:	2100      	movs	r1, #0
 80080ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080be:	6865      	ldr	r5, [r4, #4]
 80080c0:	60a5      	str	r5, [r4, #8]
 80080c2:	2d00      	cmp	r5, #0
 80080c4:	bfa2      	ittt	ge
 80080c6:	6821      	ldrge	r1, [r4, #0]
 80080c8:	f021 0104 	bicge.w	r1, r1, #4
 80080cc:	6021      	strge	r1, [r4, #0]
 80080ce:	b90e      	cbnz	r6, 80080d4 <_printf_i+0x118>
 80080d0:	2d00      	cmp	r5, #0
 80080d2:	d04d      	beq.n	8008170 <_printf_i+0x1b4>
 80080d4:	4615      	mov	r5, r2
 80080d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80080da:	fb03 6711 	mls	r7, r3, r1, r6
 80080de:	5dc7      	ldrb	r7, [r0, r7]
 80080e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080e4:	4637      	mov	r7, r6
 80080e6:	42bb      	cmp	r3, r7
 80080e8:	460e      	mov	r6, r1
 80080ea:	d9f4      	bls.n	80080d6 <_printf_i+0x11a>
 80080ec:	2b08      	cmp	r3, #8
 80080ee:	d10b      	bne.n	8008108 <_printf_i+0x14c>
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	07de      	lsls	r6, r3, #31
 80080f4:	d508      	bpl.n	8008108 <_printf_i+0x14c>
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	6861      	ldr	r1, [r4, #4]
 80080fa:	4299      	cmp	r1, r3
 80080fc:	bfde      	ittt	le
 80080fe:	2330      	movle	r3, #48	; 0x30
 8008100:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008104:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008108:	1b52      	subs	r2, r2, r5
 800810a:	6122      	str	r2, [r4, #16]
 800810c:	f8cd a000 	str.w	sl, [sp]
 8008110:	464b      	mov	r3, r9
 8008112:	aa03      	add	r2, sp, #12
 8008114:	4621      	mov	r1, r4
 8008116:	4640      	mov	r0, r8
 8008118:	f7ff fee2 	bl	8007ee0 <_printf_common>
 800811c:	3001      	adds	r0, #1
 800811e:	d14c      	bne.n	80081ba <_printf_i+0x1fe>
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
 8008124:	b004      	add	sp, #16
 8008126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812a:	4835      	ldr	r0, [pc, #212]	; (8008200 <_printf_i+0x244>)
 800812c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008130:	6829      	ldr	r1, [r5, #0]
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	f851 6b04 	ldr.w	r6, [r1], #4
 8008138:	6029      	str	r1, [r5, #0]
 800813a:	061d      	lsls	r5, r3, #24
 800813c:	d514      	bpl.n	8008168 <_printf_i+0x1ac>
 800813e:	07df      	lsls	r7, r3, #31
 8008140:	bf44      	itt	mi
 8008142:	f043 0320 	orrmi.w	r3, r3, #32
 8008146:	6023      	strmi	r3, [r4, #0]
 8008148:	b91e      	cbnz	r6, 8008152 <_printf_i+0x196>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	f023 0320 	bic.w	r3, r3, #32
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	2310      	movs	r3, #16
 8008154:	e7b0      	b.n	80080b8 <_printf_i+0xfc>
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	f043 0320 	orr.w	r3, r3, #32
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	2378      	movs	r3, #120	; 0x78
 8008160:	4828      	ldr	r0, [pc, #160]	; (8008204 <_printf_i+0x248>)
 8008162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008166:	e7e3      	b.n	8008130 <_printf_i+0x174>
 8008168:	0659      	lsls	r1, r3, #25
 800816a:	bf48      	it	mi
 800816c:	b2b6      	uxthmi	r6, r6
 800816e:	e7e6      	b.n	800813e <_printf_i+0x182>
 8008170:	4615      	mov	r5, r2
 8008172:	e7bb      	b.n	80080ec <_printf_i+0x130>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	6826      	ldr	r6, [r4, #0]
 8008178:	6961      	ldr	r1, [r4, #20]
 800817a:	1d18      	adds	r0, r3, #4
 800817c:	6028      	str	r0, [r5, #0]
 800817e:	0635      	lsls	r5, r6, #24
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	d501      	bpl.n	8008188 <_printf_i+0x1cc>
 8008184:	6019      	str	r1, [r3, #0]
 8008186:	e002      	b.n	800818e <_printf_i+0x1d2>
 8008188:	0670      	lsls	r0, r6, #25
 800818a:	d5fb      	bpl.n	8008184 <_printf_i+0x1c8>
 800818c:	8019      	strh	r1, [r3, #0]
 800818e:	2300      	movs	r3, #0
 8008190:	6123      	str	r3, [r4, #16]
 8008192:	4615      	mov	r5, r2
 8008194:	e7ba      	b.n	800810c <_printf_i+0x150>
 8008196:	682b      	ldr	r3, [r5, #0]
 8008198:	1d1a      	adds	r2, r3, #4
 800819a:	602a      	str	r2, [r5, #0]
 800819c:	681d      	ldr	r5, [r3, #0]
 800819e:	6862      	ldr	r2, [r4, #4]
 80081a0:	2100      	movs	r1, #0
 80081a2:	4628      	mov	r0, r5
 80081a4:	f7f8 f81c 	bl	80001e0 <memchr>
 80081a8:	b108      	cbz	r0, 80081ae <_printf_i+0x1f2>
 80081aa:	1b40      	subs	r0, r0, r5
 80081ac:	6060      	str	r0, [r4, #4]
 80081ae:	6863      	ldr	r3, [r4, #4]
 80081b0:	6123      	str	r3, [r4, #16]
 80081b2:	2300      	movs	r3, #0
 80081b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081b8:	e7a8      	b.n	800810c <_printf_i+0x150>
 80081ba:	6923      	ldr	r3, [r4, #16]
 80081bc:	462a      	mov	r2, r5
 80081be:	4649      	mov	r1, r9
 80081c0:	4640      	mov	r0, r8
 80081c2:	47d0      	blx	sl
 80081c4:	3001      	adds	r0, #1
 80081c6:	d0ab      	beq.n	8008120 <_printf_i+0x164>
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	079b      	lsls	r3, r3, #30
 80081cc:	d413      	bmi.n	80081f6 <_printf_i+0x23a>
 80081ce:	68e0      	ldr	r0, [r4, #12]
 80081d0:	9b03      	ldr	r3, [sp, #12]
 80081d2:	4298      	cmp	r0, r3
 80081d4:	bfb8      	it	lt
 80081d6:	4618      	movlt	r0, r3
 80081d8:	e7a4      	b.n	8008124 <_printf_i+0x168>
 80081da:	2301      	movs	r3, #1
 80081dc:	4632      	mov	r2, r6
 80081de:	4649      	mov	r1, r9
 80081e0:	4640      	mov	r0, r8
 80081e2:	47d0      	blx	sl
 80081e4:	3001      	adds	r0, #1
 80081e6:	d09b      	beq.n	8008120 <_printf_i+0x164>
 80081e8:	3501      	adds	r5, #1
 80081ea:	68e3      	ldr	r3, [r4, #12]
 80081ec:	9903      	ldr	r1, [sp, #12]
 80081ee:	1a5b      	subs	r3, r3, r1
 80081f0:	42ab      	cmp	r3, r5
 80081f2:	dcf2      	bgt.n	80081da <_printf_i+0x21e>
 80081f4:	e7eb      	b.n	80081ce <_printf_i+0x212>
 80081f6:	2500      	movs	r5, #0
 80081f8:	f104 0619 	add.w	r6, r4, #25
 80081fc:	e7f5      	b.n	80081ea <_printf_i+0x22e>
 80081fe:	bf00      	nop
 8008200:	080097f5 	.word	0x080097f5
 8008204:	08009806 	.word	0x08009806

08008208 <_puts_r>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	460e      	mov	r6, r1
 800820c:	4605      	mov	r5, r0
 800820e:	b118      	cbz	r0, 8008218 <_puts_r+0x10>
 8008210:	6983      	ldr	r3, [r0, #24]
 8008212:	b90b      	cbnz	r3, 8008218 <_puts_r+0x10>
 8008214:	f000 fbb4 	bl	8008980 <__sinit>
 8008218:	69ab      	ldr	r3, [r5, #24]
 800821a:	68ac      	ldr	r4, [r5, #8]
 800821c:	b913      	cbnz	r3, 8008224 <_puts_r+0x1c>
 800821e:	4628      	mov	r0, r5
 8008220:	f000 fbae 	bl	8008980 <__sinit>
 8008224:	4b2c      	ldr	r3, [pc, #176]	; (80082d8 <_puts_r+0xd0>)
 8008226:	429c      	cmp	r4, r3
 8008228:	d120      	bne.n	800826c <_puts_r+0x64>
 800822a:	686c      	ldr	r4, [r5, #4]
 800822c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800822e:	07db      	lsls	r3, r3, #31
 8008230:	d405      	bmi.n	800823e <_puts_r+0x36>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	0598      	lsls	r0, r3, #22
 8008236:	d402      	bmi.n	800823e <_puts_r+0x36>
 8008238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800823a:	f000 fc52 	bl	8008ae2 <__retarget_lock_acquire_recursive>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	0719      	lsls	r1, r3, #28
 8008242:	d51d      	bpl.n	8008280 <_puts_r+0x78>
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	b1db      	cbz	r3, 8008280 <_puts_r+0x78>
 8008248:	3e01      	subs	r6, #1
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008250:	3b01      	subs	r3, #1
 8008252:	60a3      	str	r3, [r4, #8]
 8008254:	bb39      	cbnz	r1, 80082a6 <_puts_r+0x9e>
 8008256:	2b00      	cmp	r3, #0
 8008258:	da38      	bge.n	80082cc <_puts_r+0xc4>
 800825a:	4622      	mov	r2, r4
 800825c:	210a      	movs	r1, #10
 800825e:	4628      	mov	r0, r5
 8008260:	f000 f9ac 	bl	80085bc <__swbuf_r>
 8008264:	3001      	adds	r0, #1
 8008266:	d011      	beq.n	800828c <_puts_r+0x84>
 8008268:	250a      	movs	r5, #10
 800826a:	e011      	b.n	8008290 <_puts_r+0x88>
 800826c:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <_puts_r+0xd4>)
 800826e:	429c      	cmp	r4, r3
 8008270:	d101      	bne.n	8008276 <_puts_r+0x6e>
 8008272:	68ac      	ldr	r4, [r5, #8]
 8008274:	e7da      	b.n	800822c <_puts_r+0x24>
 8008276:	4b1a      	ldr	r3, [pc, #104]	; (80082e0 <_puts_r+0xd8>)
 8008278:	429c      	cmp	r4, r3
 800827a:	bf08      	it	eq
 800827c:	68ec      	ldreq	r4, [r5, #12]
 800827e:	e7d5      	b.n	800822c <_puts_r+0x24>
 8008280:	4621      	mov	r1, r4
 8008282:	4628      	mov	r0, r5
 8008284:	f000 f9ec 	bl	8008660 <__swsetup_r>
 8008288:	2800      	cmp	r0, #0
 800828a:	d0dd      	beq.n	8008248 <_puts_r+0x40>
 800828c:	f04f 35ff 	mov.w	r5, #4294967295
 8008290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008292:	07da      	lsls	r2, r3, #31
 8008294:	d405      	bmi.n	80082a2 <_puts_r+0x9a>
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	059b      	lsls	r3, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_puts_r+0x9a>
 800829c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829e:	f000 fc21 	bl	8008ae4 <__retarget_lock_release_recursive>
 80082a2:	4628      	mov	r0, r5
 80082a4:	bd70      	pop	{r4, r5, r6, pc}
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	da04      	bge.n	80082b4 <_puts_r+0xac>
 80082aa:	69a2      	ldr	r2, [r4, #24]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	dc06      	bgt.n	80082be <_puts_r+0xb6>
 80082b0:	290a      	cmp	r1, #10
 80082b2:	d004      	beq.n	80082be <_puts_r+0xb6>
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	6022      	str	r2, [r4, #0]
 80082ba:	7019      	strb	r1, [r3, #0]
 80082bc:	e7c5      	b.n	800824a <_puts_r+0x42>
 80082be:	4622      	mov	r2, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	f000 f97b 	bl	80085bc <__swbuf_r>
 80082c6:	3001      	adds	r0, #1
 80082c8:	d1bf      	bne.n	800824a <_puts_r+0x42>
 80082ca:	e7df      	b.n	800828c <_puts_r+0x84>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	250a      	movs	r5, #10
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	6022      	str	r2, [r4, #0]
 80082d4:	701d      	strb	r5, [r3, #0]
 80082d6:	e7db      	b.n	8008290 <_puts_r+0x88>
 80082d8:	080099ac 	.word	0x080099ac
 80082dc:	080099cc 	.word	0x080099cc
 80082e0:	0800998c 	.word	0x0800998c

080082e4 <puts>:
 80082e4:	4b02      	ldr	r3, [pc, #8]	; (80082f0 <puts+0xc>)
 80082e6:	4601      	mov	r1, r0
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	f7ff bf8d 	b.w	8008208 <_puts_r>
 80082ee:	bf00      	nop
 80082f0:	2000000c 	.word	0x2000000c

080082f4 <srand>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4b10      	ldr	r3, [pc, #64]	; (8008338 <srand+0x44>)
 80082f8:	681d      	ldr	r5, [r3, #0]
 80082fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80082fc:	4604      	mov	r4, r0
 80082fe:	b9b3      	cbnz	r3, 800832e <srand+0x3a>
 8008300:	2018      	movs	r0, #24
 8008302:	f7ff fb67 	bl	80079d4 <malloc>
 8008306:	4602      	mov	r2, r0
 8008308:	63a8      	str	r0, [r5, #56]	; 0x38
 800830a:	b920      	cbnz	r0, 8008316 <srand+0x22>
 800830c:	4b0b      	ldr	r3, [pc, #44]	; (800833c <srand+0x48>)
 800830e:	480c      	ldr	r0, [pc, #48]	; (8008340 <srand+0x4c>)
 8008310:	2142      	movs	r1, #66	; 0x42
 8008312:	f7ff fae5 	bl	80078e0 <__assert_func>
 8008316:	490b      	ldr	r1, [pc, #44]	; (8008344 <srand+0x50>)
 8008318:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <srand+0x54>)
 800831a:	e9c0 1300 	strd	r1, r3, [r0]
 800831e:	4b0b      	ldr	r3, [pc, #44]	; (800834c <srand+0x58>)
 8008320:	6083      	str	r3, [r0, #8]
 8008322:	230b      	movs	r3, #11
 8008324:	8183      	strh	r3, [r0, #12]
 8008326:	2100      	movs	r1, #0
 8008328:	2001      	movs	r0, #1
 800832a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800832e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008330:	2200      	movs	r2, #0
 8008332:	611c      	str	r4, [r3, #16]
 8008334:	615a      	str	r2, [r3, #20]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	2000000c 	.word	0x2000000c
 800833c:	08009817 	.word	0x08009817
 8008340:	0800982e 	.word	0x0800982e
 8008344:	abcd330e 	.word	0xabcd330e
 8008348:	e66d1234 	.word	0xe66d1234
 800834c:	0005deec 	.word	0x0005deec

08008350 <_sbrk_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4d06      	ldr	r5, [pc, #24]	; (800836c <_sbrk_r+0x1c>)
 8008354:	2300      	movs	r3, #0
 8008356:	4604      	mov	r4, r0
 8008358:	4608      	mov	r0, r1
 800835a:	602b      	str	r3, [r5, #0]
 800835c:	f7fa fc7a 	bl	8002c54 <_sbrk>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_sbrk_r+0x1a>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_sbrk_r+0x1a>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	200004cc 	.word	0x200004cc

08008370 <siprintf>:
 8008370:	b40e      	push	{r1, r2, r3}
 8008372:	b500      	push	{lr}
 8008374:	b09c      	sub	sp, #112	; 0x70
 8008376:	ab1d      	add	r3, sp, #116	; 0x74
 8008378:	9002      	str	r0, [sp, #8]
 800837a:	9006      	str	r0, [sp, #24]
 800837c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008380:	4809      	ldr	r0, [pc, #36]	; (80083a8 <siprintf+0x38>)
 8008382:	9107      	str	r1, [sp, #28]
 8008384:	9104      	str	r1, [sp, #16]
 8008386:	4909      	ldr	r1, [pc, #36]	; (80083ac <siprintf+0x3c>)
 8008388:	f853 2b04 	ldr.w	r2, [r3], #4
 800838c:	9105      	str	r1, [sp, #20]
 800838e:	6800      	ldr	r0, [r0, #0]
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	a902      	add	r1, sp, #8
 8008394:	f000 fcbc 	bl	8008d10 <_svfiprintf_r>
 8008398:	9b02      	ldr	r3, [sp, #8]
 800839a:	2200      	movs	r2, #0
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	b01c      	add	sp, #112	; 0x70
 80083a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083a4:	b003      	add	sp, #12
 80083a6:	4770      	bx	lr
 80083a8:	2000000c 	.word	0x2000000c
 80083ac:	ffff0208 	.word	0xffff0208

080083b0 <strncmp>:
 80083b0:	b510      	push	{r4, lr}
 80083b2:	b17a      	cbz	r2, 80083d4 <strncmp+0x24>
 80083b4:	4603      	mov	r3, r0
 80083b6:	3901      	subs	r1, #1
 80083b8:	1884      	adds	r4, r0, r2
 80083ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 80083be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80083c2:	4290      	cmp	r0, r2
 80083c4:	d101      	bne.n	80083ca <strncmp+0x1a>
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	d101      	bne.n	80083ce <strncmp+0x1e>
 80083ca:	1a80      	subs	r0, r0, r2
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d1f3      	bne.n	80083ba <strncmp+0xa>
 80083d2:	e7fa      	b.n	80083ca <strncmp+0x1a>
 80083d4:	4610      	mov	r0, r2
 80083d6:	e7f9      	b.n	80083cc <strncmp+0x1c>

080083d8 <__strtok_r>:
 80083d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083da:	b908      	cbnz	r0, 80083e0 <__strtok_r+0x8>
 80083dc:	6810      	ldr	r0, [r2, #0]
 80083de:	b188      	cbz	r0, 8008404 <__strtok_r+0x2c>
 80083e0:	4604      	mov	r4, r0
 80083e2:	4620      	mov	r0, r4
 80083e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80083e8:	460f      	mov	r7, r1
 80083ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 80083ee:	b91e      	cbnz	r6, 80083f8 <__strtok_r+0x20>
 80083f0:	b965      	cbnz	r5, 800840c <__strtok_r+0x34>
 80083f2:	6015      	str	r5, [r2, #0]
 80083f4:	4628      	mov	r0, r5
 80083f6:	e005      	b.n	8008404 <__strtok_r+0x2c>
 80083f8:	42b5      	cmp	r5, r6
 80083fa:	d1f6      	bne.n	80083ea <__strtok_r+0x12>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1f0      	bne.n	80083e2 <__strtok_r+0xa>
 8008400:	6014      	str	r4, [r2, #0]
 8008402:	7003      	strb	r3, [r0, #0]
 8008404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008406:	461c      	mov	r4, r3
 8008408:	e00c      	b.n	8008424 <__strtok_r+0x4c>
 800840a:	b915      	cbnz	r5, 8008412 <__strtok_r+0x3a>
 800840c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008410:	460e      	mov	r6, r1
 8008412:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008416:	42ab      	cmp	r3, r5
 8008418:	d1f7      	bne.n	800840a <__strtok_r+0x32>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d0f3      	beq.n	8008406 <__strtok_r+0x2e>
 800841e:	2300      	movs	r3, #0
 8008420:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008424:	6014      	str	r4, [r2, #0]
 8008426:	e7ed      	b.n	8008404 <__strtok_r+0x2c>

08008428 <strtok_r>:
 8008428:	2301      	movs	r3, #1
 800842a:	f7ff bfd5 	b.w	80083d8 <__strtok_r>
	...

08008430 <_strtol_l.constprop.0>:
 8008430:	2b01      	cmp	r3, #1
 8008432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008436:	d001      	beq.n	800843c <_strtol_l.constprop.0+0xc>
 8008438:	2b24      	cmp	r3, #36	; 0x24
 800843a:	d906      	bls.n	800844a <_strtol_l.constprop.0+0x1a>
 800843c:	f7ff fa7a 	bl	8007934 <__errno>
 8008440:	2316      	movs	r3, #22
 8008442:	6003      	str	r3, [r0, #0]
 8008444:	2000      	movs	r0, #0
 8008446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008530 <_strtol_l.constprop.0+0x100>
 800844e:	460d      	mov	r5, r1
 8008450:	462e      	mov	r6, r5
 8008452:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008456:	f814 700c 	ldrb.w	r7, [r4, ip]
 800845a:	f017 0708 	ands.w	r7, r7, #8
 800845e:	d1f7      	bne.n	8008450 <_strtol_l.constprop.0+0x20>
 8008460:	2c2d      	cmp	r4, #45	; 0x2d
 8008462:	d132      	bne.n	80084ca <_strtol_l.constprop.0+0x9a>
 8008464:	782c      	ldrb	r4, [r5, #0]
 8008466:	2701      	movs	r7, #1
 8008468:	1cb5      	adds	r5, r6, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d05b      	beq.n	8008526 <_strtol_l.constprop.0+0xf6>
 800846e:	2b10      	cmp	r3, #16
 8008470:	d109      	bne.n	8008486 <_strtol_l.constprop.0+0x56>
 8008472:	2c30      	cmp	r4, #48	; 0x30
 8008474:	d107      	bne.n	8008486 <_strtol_l.constprop.0+0x56>
 8008476:	782c      	ldrb	r4, [r5, #0]
 8008478:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800847c:	2c58      	cmp	r4, #88	; 0x58
 800847e:	d14d      	bne.n	800851c <_strtol_l.constprop.0+0xec>
 8008480:	786c      	ldrb	r4, [r5, #1]
 8008482:	2310      	movs	r3, #16
 8008484:	3502      	adds	r5, #2
 8008486:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800848a:	f108 38ff 	add.w	r8, r8, #4294967295
 800848e:	f04f 0c00 	mov.w	ip, #0
 8008492:	fbb8 f9f3 	udiv	r9, r8, r3
 8008496:	4666      	mov	r6, ip
 8008498:	fb03 8a19 	mls	sl, r3, r9, r8
 800849c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80084a0:	f1be 0f09 	cmp.w	lr, #9
 80084a4:	d816      	bhi.n	80084d4 <_strtol_l.constprop.0+0xa4>
 80084a6:	4674      	mov	r4, lr
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	dd24      	ble.n	80084f6 <_strtol_l.constprop.0+0xc6>
 80084ac:	f1bc 0f00 	cmp.w	ip, #0
 80084b0:	db1e      	blt.n	80084f0 <_strtol_l.constprop.0+0xc0>
 80084b2:	45b1      	cmp	r9, r6
 80084b4:	d31c      	bcc.n	80084f0 <_strtol_l.constprop.0+0xc0>
 80084b6:	d101      	bne.n	80084bc <_strtol_l.constprop.0+0x8c>
 80084b8:	45a2      	cmp	sl, r4
 80084ba:	db19      	blt.n	80084f0 <_strtol_l.constprop.0+0xc0>
 80084bc:	fb06 4603 	mla	r6, r6, r3, r4
 80084c0:	f04f 0c01 	mov.w	ip, #1
 80084c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084c8:	e7e8      	b.n	800849c <_strtol_l.constprop.0+0x6c>
 80084ca:	2c2b      	cmp	r4, #43	; 0x2b
 80084cc:	bf04      	itt	eq
 80084ce:	782c      	ldrbeq	r4, [r5, #0]
 80084d0:	1cb5      	addeq	r5, r6, #2
 80084d2:	e7ca      	b.n	800846a <_strtol_l.constprop.0+0x3a>
 80084d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80084d8:	f1be 0f19 	cmp.w	lr, #25
 80084dc:	d801      	bhi.n	80084e2 <_strtol_l.constprop.0+0xb2>
 80084de:	3c37      	subs	r4, #55	; 0x37
 80084e0:	e7e2      	b.n	80084a8 <_strtol_l.constprop.0+0x78>
 80084e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80084e6:	f1be 0f19 	cmp.w	lr, #25
 80084ea:	d804      	bhi.n	80084f6 <_strtol_l.constprop.0+0xc6>
 80084ec:	3c57      	subs	r4, #87	; 0x57
 80084ee:	e7db      	b.n	80084a8 <_strtol_l.constprop.0+0x78>
 80084f0:	f04f 3cff 	mov.w	ip, #4294967295
 80084f4:	e7e6      	b.n	80084c4 <_strtol_l.constprop.0+0x94>
 80084f6:	f1bc 0f00 	cmp.w	ip, #0
 80084fa:	da05      	bge.n	8008508 <_strtol_l.constprop.0+0xd8>
 80084fc:	2322      	movs	r3, #34	; 0x22
 80084fe:	6003      	str	r3, [r0, #0]
 8008500:	4646      	mov	r6, r8
 8008502:	b942      	cbnz	r2, 8008516 <_strtol_l.constprop.0+0xe6>
 8008504:	4630      	mov	r0, r6
 8008506:	e79e      	b.n	8008446 <_strtol_l.constprop.0+0x16>
 8008508:	b107      	cbz	r7, 800850c <_strtol_l.constprop.0+0xdc>
 800850a:	4276      	negs	r6, r6
 800850c:	2a00      	cmp	r2, #0
 800850e:	d0f9      	beq.n	8008504 <_strtol_l.constprop.0+0xd4>
 8008510:	f1bc 0f00 	cmp.w	ip, #0
 8008514:	d000      	beq.n	8008518 <_strtol_l.constprop.0+0xe8>
 8008516:	1e69      	subs	r1, r5, #1
 8008518:	6011      	str	r1, [r2, #0]
 800851a:	e7f3      	b.n	8008504 <_strtol_l.constprop.0+0xd4>
 800851c:	2430      	movs	r4, #48	; 0x30
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1b1      	bne.n	8008486 <_strtol_l.constprop.0+0x56>
 8008522:	2308      	movs	r3, #8
 8008524:	e7af      	b.n	8008486 <_strtol_l.constprop.0+0x56>
 8008526:	2c30      	cmp	r4, #48	; 0x30
 8008528:	d0a5      	beq.n	8008476 <_strtol_l.constprop.0+0x46>
 800852a:	230a      	movs	r3, #10
 800852c:	e7ab      	b.n	8008486 <_strtol_l.constprop.0+0x56>
 800852e:	bf00      	nop
 8008530:	0800988a 	.word	0x0800988a

08008534 <strtol>:
 8008534:	4613      	mov	r3, r2
 8008536:	460a      	mov	r2, r1
 8008538:	4601      	mov	r1, r0
 800853a:	4802      	ldr	r0, [pc, #8]	; (8008544 <strtol+0x10>)
 800853c:	6800      	ldr	r0, [r0, #0]
 800853e:	f7ff bf77 	b.w	8008430 <_strtol_l.constprop.0>
 8008542:	bf00      	nop
 8008544:	2000000c 	.word	0x2000000c

08008548 <time>:
 8008548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800854a:	4b0b      	ldr	r3, [pc, #44]	; (8008578 <time+0x30>)
 800854c:	2200      	movs	r2, #0
 800854e:	4669      	mov	r1, sp
 8008550:	4604      	mov	r4, r0
 8008552:	6818      	ldr	r0, [r3, #0]
 8008554:	f000 fab2 	bl	8008abc <_gettimeofday_r>
 8008558:	2800      	cmp	r0, #0
 800855a:	bfbe      	ittt	lt
 800855c:	f04f 32ff 	movlt.w	r2, #4294967295
 8008560:	f04f 33ff 	movlt.w	r3, #4294967295
 8008564:	e9cd 2300 	strdlt	r2, r3, [sp]
 8008568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800856c:	b10c      	cbz	r4, 8008572 <time+0x2a>
 800856e:	e9c4 0100 	strd	r0, r1, [r4]
 8008572:	b004      	add	sp, #16
 8008574:	bd10      	pop	{r4, pc}
 8008576:	bf00      	nop
 8008578:	2000000c 	.word	0x2000000c

0800857c <_vsiprintf_r>:
 800857c:	b500      	push	{lr}
 800857e:	b09b      	sub	sp, #108	; 0x6c
 8008580:	9100      	str	r1, [sp, #0]
 8008582:	9104      	str	r1, [sp, #16]
 8008584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008588:	9105      	str	r1, [sp, #20]
 800858a:	9102      	str	r1, [sp, #8]
 800858c:	4905      	ldr	r1, [pc, #20]	; (80085a4 <_vsiprintf_r+0x28>)
 800858e:	9103      	str	r1, [sp, #12]
 8008590:	4669      	mov	r1, sp
 8008592:	f000 fbbd 	bl	8008d10 <_svfiprintf_r>
 8008596:	9b00      	ldr	r3, [sp, #0]
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
 800859c:	b01b      	add	sp, #108	; 0x6c
 800859e:	f85d fb04 	ldr.w	pc, [sp], #4
 80085a2:	bf00      	nop
 80085a4:	ffff0208 	.word	0xffff0208

080085a8 <vsiprintf>:
 80085a8:	4613      	mov	r3, r2
 80085aa:	460a      	mov	r2, r1
 80085ac:	4601      	mov	r1, r0
 80085ae:	4802      	ldr	r0, [pc, #8]	; (80085b8 <vsiprintf+0x10>)
 80085b0:	6800      	ldr	r0, [r0, #0]
 80085b2:	f7ff bfe3 	b.w	800857c <_vsiprintf_r>
 80085b6:	bf00      	nop
 80085b8:	2000000c 	.word	0x2000000c

080085bc <__swbuf_r>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	460e      	mov	r6, r1
 80085c0:	4614      	mov	r4, r2
 80085c2:	4605      	mov	r5, r0
 80085c4:	b118      	cbz	r0, 80085ce <__swbuf_r+0x12>
 80085c6:	6983      	ldr	r3, [r0, #24]
 80085c8:	b90b      	cbnz	r3, 80085ce <__swbuf_r+0x12>
 80085ca:	f000 f9d9 	bl	8008980 <__sinit>
 80085ce:	4b21      	ldr	r3, [pc, #132]	; (8008654 <__swbuf_r+0x98>)
 80085d0:	429c      	cmp	r4, r3
 80085d2:	d12b      	bne.n	800862c <__swbuf_r+0x70>
 80085d4:	686c      	ldr	r4, [r5, #4]
 80085d6:	69a3      	ldr	r3, [r4, #24]
 80085d8:	60a3      	str	r3, [r4, #8]
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	071a      	lsls	r2, r3, #28
 80085de:	d52f      	bpl.n	8008640 <__swbuf_r+0x84>
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	b36b      	cbz	r3, 8008640 <__swbuf_r+0x84>
 80085e4:	6923      	ldr	r3, [r4, #16]
 80085e6:	6820      	ldr	r0, [r4, #0]
 80085e8:	1ac0      	subs	r0, r0, r3
 80085ea:	6963      	ldr	r3, [r4, #20]
 80085ec:	b2f6      	uxtb	r6, r6
 80085ee:	4283      	cmp	r3, r0
 80085f0:	4637      	mov	r7, r6
 80085f2:	dc04      	bgt.n	80085fe <__swbuf_r+0x42>
 80085f4:	4621      	mov	r1, r4
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 f92e 	bl	8008858 <_fflush_r>
 80085fc:	bb30      	cbnz	r0, 800864c <__swbuf_r+0x90>
 80085fe:	68a3      	ldr	r3, [r4, #8]
 8008600:	3b01      	subs	r3, #1
 8008602:	60a3      	str	r3, [r4, #8]
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	6022      	str	r2, [r4, #0]
 800860a:	701e      	strb	r6, [r3, #0]
 800860c:	6963      	ldr	r3, [r4, #20]
 800860e:	3001      	adds	r0, #1
 8008610:	4283      	cmp	r3, r0
 8008612:	d004      	beq.n	800861e <__swbuf_r+0x62>
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	07db      	lsls	r3, r3, #31
 8008618:	d506      	bpl.n	8008628 <__swbuf_r+0x6c>
 800861a:	2e0a      	cmp	r6, #10
 800861c:	d104      	bne.n	8008628 <__swbuf_r+0x6c>
 800861e:	4621      	mov	r1, r4
 8008620:	4628      	mov	r0, r5
 8008622:	f000 f919 	bl	8008858 <_fflush_r>
 8008626:	b988      	cbnz	r0, 800864c <__swbuf_r+0x90>
 8008628:	4638      	mov	r0, r7
 800862a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800862c:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <__swbuf_r+0x9c>)
 800862e:	429c      	cmp	r4, r3
 8008630:	d101      	bne.n	8008636 <__swbuf_r+0x7a>
 8008632:	68ac      	ldr	r4, [r5, #8]
 8008634:	e7cf      	b.n	80085d6 <__swbuf_r+0x1a>
 8008636:	4b09      	ldr	r3, [pc, #36]	; (800865c <__swbuf_r+0xa0>)
 8008638:	429c      	cmp	r4, r3
 800863a:	bf08      	it	eq
 800863c:	68ec      	ldreq	r4, [r5, #12]
 800863e:	e7ca      	b.n	80085d6 <__swbuf_r+0x1a>
 8008640:	4621      	mov	r1, r4
 8008642:	4628      	mov	r0, r5
 8008644:	f000 f80c 	bl	8008660 <__swsetup_r>
 8008648:	2800      	cmp	r0, #0
 800864a:	d0cb      	beq.n	80085e4 <__swbuf_r+0x28>
 800864c:	f04f 37ff 	mov.w	r7, #4294967295
 8008650:	e7ea      	b.n	8008628 <__swbuf_r+0x6c>
 8008652:	bf00      	nop
 8008654:	080099ac 	.word	0x080099ac
 8008658:	080099cc 	.word	0x080099cc
 800865c:	0800998c 	.word	0x0800998c

08008660 <__swsetup_r>:
 8008660:	4b32      	ldr	r3, [pc, #200]	; (800872c <__swsetup_r+0xcc>)
 8008662:	b570      	push	{r4, r5, r6, lr}
 8008664:	681d      	ldr	r5, [r3, #0]
 8008666:	4606      	mov	r6, r0
 8008668:	460c      	mov	r4, r1
 800866a:	b125      	cbz	r5, 8008676 <__swsetup_r+0x16>
 800866c:	69ab      	ldr	r3, [r5, #24]
 800866e:	b913      	cbnz	r3, 8008676 <__swsetup_r+0x16>
 8008670:	4628      	mov	r0, r5
 8008672:	f000 f985 	bl	8008980 <__sinit>
 8008676:	4b2e      	ldr	r3, [pc, #184]	; (8008730 <__swsetup_r+0xd0>)
 8008678:	429c      	cmp	r4, r3
 800867a:	d10f      	bne.n	800869c <__swsetup_r+0x3c>
 800867c:	686c      	ldr	r4, [r5, #4]
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008684:	0719      	lsls	r1, r3, #28
 8008686:	d42c      	bmi.n	80086e2 <__swsetup_r+0x82>
 8008688:	06dd      	lsls	r5, r3, #27
 800868a:	d411      	bmi.n	80086b0 <__swsetup_r+0x50>
 800868c:	2309      	movs	r3, #9
 800868e:	6033      	str	r3, [r6, #0]
 8008690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008694:	81a3      	strh	r3, [r4, #12]
 8008696:	f04f 30ff 	mov.w	r0, #4294967295
 800869a:	e03e      	b.n	800871a <__swsetup_r+0xba>
 800869c:	4b25      	ldr	r3, [pc, #148]	; (8008734 <__swsetup_r+0xd4>)
 800869e:	429c      	cmp	r4, r3
 80086a0:	d101      	bne.n	80086a6 <__swsetup_r+0x46>
 80086a2:	68ac      	ldr	r4, [r5, #8]
 80086a4:	e7eb      	b.n	800867e <__swsetup_r+0x1e>
 80086a6:	4b24      	ldr	r3, [pc, #144]	; (8008738 <__swsetup_r+0xd8>)
 80086a8:	429c      	cmp	r4, r3
 80086aa:	bf08      	it	eq
 80086ac:	68ec      	ldreq	r4, [r5, #12]
 80086ae:	e7e6      	b.n	800867e <__swsetup_r+0x1e>
 80086b0:	0758      	lsls	r0, r3, #29
 80086b2:	d512      	bpl.n	80086da <__swsetup_r+0x7a>
 80086b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086b6:	b141      	cbz	r1, 80086ca <__swsetup_r+0x6a>
 80086b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086bc:	4299      	cmp	r1, r3
 80086be:	d002      	beq.n	80086c6 <__swsetup_r+0x66>
 80086c0:	4630      	mov	r0, r6
 80086c2:	f7ff f9d3 	bl	8007a6c <_free_r>
 80086c6:	2300      	movs	r3, #0
 80086c8:	6363      	str	r3, [r4, #52]	; 0x34
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086d0:	81a3      	strh	r3, [r4, #12]
 80086d2:	2300      	movs	r3, #0
 80086d4:	6063      	str	r3, [r4, #4]
 80086d6:	6923      	ldr	r3, [r4, #16]
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	f043 0308 	orr.w	r3, r3, #8
 80086e0:	81a3      	strh	r3, [r4, #12]
 80086e2:	6923      	ldr	r3, [r4, #16]
 80086e4:	b94b      	cbnz	r3, 80086fa <__swsetup_r+0x9a>
 80086e6:	89a3      	ldrh	r3, [r4, #12]
 80086e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f0:	d003      	beq.n	80086fa <__swsetup_r+0x9a>
 80086f2:	4621      	mov	r1, r4
 80086f4:	4630      	mov	r0, r6
 80086f6:	f000 fa1b 	bl	8008b30 <__smakebuf_r>
 80086fa:	89a0      	ldrh	r0, [r4, #12]
 80086fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008700:	f010 0301 	ands.w	r3, r0, #1
 8008704:	d00a      	beq.n	800871c <__swsetup_r+0xbc>
 8008706:	2300      	movs	r3, #0
 8008708:	60a3      	str	r3, [r4, #8]
 800870a:	6963      	ldr	r3, [r4, #20]
 800870c:	425b      	negs	r3, r3
 800870e:	61a3      	str	r3, [r4, #24]
 8008710:	6923      	ldr	r3, [r4, #16]
 8008712:	b943      	cbnz	r3, 8008726 <__swsetup_r+0xc6>
 8008714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008718:	d1ba      	bne.n	8008690 <__swsetup_r+0x30>
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	0781      	lsls	r1, r0, #30
 800871e:	bf58      	it	pl
 8008720:	6963      	ldrpl	r3, [r4, #20]
 8008722:	60a3      	str	r3, [r4, #8]
 8008724:	e7f4      	b.n	8008710 <__swsetup_r+0xb0>
 8008726:	2000      	movs	r0, #0
 8008728:	e7f7      	b.n	800871a <__swsetup_r+0xba>
 800872a:	bf00      	nop
 800872c:	2000000c 	.word	0x2000000c
 8008730:	080099ac 	.word	0x080099ac
 8008734:	080099cc 	.word	0x080099cc
 8008738:	0800998c 	.word	0x0800998c

0800873c <abort>:
 800873c:	b508      	push	{r3, lr}
 800873e:	2006      	movs	r0, #6
 8008740:	f000 fc0e 	bl	8008f60 <raise>
 8008744:	2001      	movs	r0, #1
 8008746:	f7fa fa0d 	bl	8002b64 <_exit>
	...

0800874c <__sflush_r>:
 800874c:	898a      	ldrh	r2, [r1, #12]
 800874e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008752:	4605      	mov	r5, r0
 8008754:	0710      	lsls	r0, r2, #28
 8008756:	460c      	mov	r4, r1
 8008758:	d458      	bmi.n	800880c <__sflush_r+0xc0>
 800875a:	684b      	ldr	r3, [r1, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	dc05      	bgt.n	800876c <__sflush_r+0x20>
 8008760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	dc02      	bgt.n	800876c <__sflush_r+0x20>
 8008766:	2000      	movs	r0, #0
 8008768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800876c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800876e:	2e00      	cmp	r6, #0
 8008770:	d0f9      	beq.n	8008766 <__sflush_r+0x1a>
 8008772:	2300      	movs	r3, #0
 8008774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008778:	682f      	ldr	r7, [r5, #0]
 800877a:	602b      	str	r3, [r5, #0]
 800877c:	d032      	beq.n	80087e4 <__sflush_r+0x98>
 800877e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	075a      	lsls	r2, r3, #29
 8008784:	d505      	bpl.n	8008792 <__sflush_r+0x46>
 8008786:	6863      	ldr	r3, [r4, #4]
 8008788:	1ac0      	subs	r0, r0, r3
 800878a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800878c:	b10b      	cbz	r3, 8008792 <__sflush_r+0x46>
 800878e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008790:	1ac0      	subs	r0, r0, r3
 8008792:	2300      	movs	r3, #0
 8008794:	4602      	mov	r2, r0
 8008796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008798:	6a21      	ldr	r1, [r4, #32]
 800879a:	4628      	mov	r0, r5
 800879c:	47b0      	blx	r6
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	d106      	bne.n	80087b2 <__sflush_r+0x66>
 80087a4:	6829      	ldr	r1, [r5, #0]
 80087a6:	291d      	cmp	r1, #29
 80087a8:	d82c      	bhi.n	8008804 <__sflush_r+0xb8>
 80087aa:	4a2a      	ldr	r2, [pc, #168]	; (8008854 <__sflush_r+0x108>)
 80087ac:	40ca      	lsrs	r2, r1
 80087ae:	07d6      	lsls	r6, r2, #31
 80087b0:	d528      	bpl.n	8008804 <__sflush_r+0xb8>
 80087b2:	2200      	movs	r2, #0
 80087b4:	6062      	str	r2, [r4, #4]
 80087b6:	04d9      	lsls	r1, r3, #19
 80087b8:	6922      	ldr	r2, [r4, #16]
 80087ba:	6022      	str	r2, [r4, #0]
 80087bc:	d504      	bpl.n	80087c8 <__sflush_r+0x7c>
 80087be:	1c42      	adds	r2, r0, #1
 80087c0:	d101      	bne.n	80087c6 <__sflush_r+0x7a>
 80087c2:	682b      	ldr	r3, [r5, #0]
 80087c4:	b903      	cbnz	r3, 80087c8 <__sflush_r+0x7c>
 80087c6:	6560      	str	r0, [r4, #84]	; 0x54
 80087c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ca:	602f      	str	r7, [r5, #0]
 80087cc:	2900      	cmp	r1, #0
 80087ce:	d0ca      	beq.n	8008766 <__sflush_r+0x1a>
 80087d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087d4:	4299      	cmp	r1, r3
 80087d6:	d002      	beq.n	80087de <__sflush_r+0x92>
 80087d8:	4628      	mov	r0, r5
 80087da:	f7ff f947 	bl	8007a6c <_free_r>
 80087de:	2000      	movs	r0, #0
 80087e0:	6360      	str	r0, [r4, #52]	; 0x34
 80087e2:	e7c1      	b.n	8008768 <__sflush_r+0x1c>
 80087e4:	6a21      	ldr	r1, [r4, #32]
 80087e6:	2301      	movs	r3, #1
 80087e8:	4628      	mov	r0, r5
 80087ea:	47b0      	blx	r6
 80087ec:	1c41      	adds	r1, r0, #1
 80087ee:	d1c7      	bne.n	8008780 <__sflush_r+0x34>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0c4      	beq.n	8008780 <__sflush_r+0x34>
 80087f6:	2b1d      	cmp	r3, #29
 80087f8:	d001      	beq.n	80087fe <__sflush_r+0xb2>
 80087fa:	2b16      	cmp	r3, #22
 80087fc:	d101      	bne.n	8008802 <__sflush_r+0xb6>
 80087fe:	602f      	str	r7, [r5, #0]
 8008800:	e7b1      	b.n	8008766 <__sflush_r+0x1a>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	e7ad      	b.n	8008768 <__sflush_r+0x1c>
 800880c:	690f      	ldr	r7, [r1, #16]
 800880e:	2f00      	cmp	r7, #0
 8008810:	d0a9      	beq.n	8008766 <__sflush_r+0x1a>
 8008812:	0793      	lsls	r3, r2, #30
 8008814:	680e      	ldr	r6, [r1, #0]
 8008816:	bf08      	it	eq
 8008818:	694b      	ldreq	r3, [r1, #20]
 800881a:	600f      	str	r7, [r1, #0]
 800881c:	bf18      	it	ne
 800881e:	2300      	movne	r3, #0
 8008820:	eba6 0807 	sub.w	r8, r6, r7
 8008824:	608b      	str	r3, [r1, #8]
 8008826:	f1b8 0f00 	cmp.w	r8, #0
 800882a:	dd9c      	ble.n	8008766 <__sflush_r+0x1a>
 800882c:	6a21      	ldr	r1, [r4, #32]
 800882e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008830:	4643      	mov	r3, r8
 8008832:	463a      	mov	r2, r7
 8008834:	4628      	mov	r0, r5
 8008836:	47b0      	blx	r6
 8008838:	2800      	cmp	r0, #0
 800883a:	dc06      	bgt.n	800884a <__sflush_r+0xfe>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	f04f 30ff 	mov.w	r0, #4294967295
 8008848:	e78e      	b.n	8008768 <__sflush_r+0x1c>
 800884a:	4407      	add	r7, r0
 800884c:	eba8 0800 	sub.w	r8, r8, r0
 8008850:	e7e9      	b.n	8008826 <__sflush_r+0xda>
 8008852:	bf00      	nop
 8008854:	20400001 	.word	0x20400001

08008858 <_fflush_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	690b      	ldr	r3, [r1, #16]
 800885c:	4605      	mov	r5, r0
 800885e:	460c      	mov	r4, r1
 8008860:	b913      	cbnz	r3, 8008868 <_fflush_r+0x10>
 8008862:	2500      	movs	r5, #0
 8008864:	4628      	mov	r0, r5
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	b118      	cbz	r0, 8008872 <_fflush_r+0x1a>
 800886a:	6983      	ldr	r3, [r0, #24]
 800886c:	b90b      	cbnz	r3, 8008872 <_fflush_r+0x1a>
 800886e:	f000 f887 	bl	8008980 <__sinit>
 8008872:	4b14      	ldr	r3, [pc, #80]	; (80088c4 <_fflush_r+0x6c>)
 8008874:	429c      	cmp	r4, r3
 8008876:	d11b      	bne.n	80088b0 <_fflush_r+0x58>
 8008878:	686c      	ldr	r4, [r5, #4]
 800887a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0ef      	beq.n	8008862 <_fflush_r+0xa>
 8008882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008884:	07d0      	lsls	r0, r2, #31
 8008886:	d404      	bmi.n	8008892 <_fflush_r+0x3a>
 8008888:	0599      	lsls	r1, r3, #22
 800888a:	d402      	bmi.n	8008892 <_fflush_r+0x3a>
 800888c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800888e:	f000 f928 	bl	8008ae2 <__retarget_lock_acquire_recursive>
 8008892:	4628      	mov	r0, r5
 8008894:	4621      	mov	r1, r4
 8008896:	f7ff ff59 	bl	800874c <__sflush_r>
 800889a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800889c:	07da      	lsls	r2, r3, #31
 800889e:	4605      	mov	r5, r0
 80088a0:	d4e0      	bmi.n	8008864 <_fflush_r+0xc>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	059b      	lsls	r3, r3, #22
 80088a6:	d4dd      	bmi.n	8008864 <_fflush_r+0xc>
 80088a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088aa:	f000 f91b 	bl	8008ae4 <__retarget_lock_release_recursive>
 80088ae:	e7d9      	b.n	8008864 <_fflush_r+0xc>
 80088b0:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <_fflush_r+0x70>)
 80088b2:	429c      	cmp	r4, r3
 80088b4:	d101      	bne.n	80088ba <_fflush_r+0x62>
 80088b6:	68ac      	ldr	r4, [r5, #8]
 80088b8:	e7df      	b.n	800887a <_fflush_r+0x22>
 80088ba:	4b04      	ldr	r3, [pc, #16]	; (80088cc <_fflush_r+0x74>)
 80088bc:	429c      	cmp	r4, r3
 80088be:	bf08      	it	eq
 80088c0:	68ec      	ldreq	r4, [r5, #12]
 80088c2:	e7da      	b.n	800887a <_fflush_r+0x22>
 80088c4:	080099ac 	.word	0x080099ac
 80088c8:	080099cc 	.word	0x080099cc
 80088cc:	0800998c 	.word	0x0800998c

080088d0 <std>:
 80088d0:	2300      	movs	r3, #0
 80088d2:	b510      	push	{r4, lr}
 80088d4:	4604      	mov	r4, r0
 80088d6:	e9c0 3300 	strd	r3, r3, [r0]
 80088da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088de:	6083      	str	r3, [r0, #8]
 80088e0:	8181      	strh	r1, [r0, #12]
 80088e2:	6643      	str	r3, [r0, #100]	; 0x64
 80088e4:	81c2      	strh	r2, [r0, #14]
 80088e6:	6183      	str	r3, [r0, #24]
 80088e8:	4619      	mov	r1, r3
 80088ea:	2208      	movs	r2, #8
 80088ec:	305c      	adds	r0, #92	; 0x5c
 80088ee:	f7ff f89f 	bl	8007a30 <memset>
 80088f2:	4b05      	ldr	r3, [pc, #20]	; (8008908 <std+0x38>)
 80088f4:	6263      	str	r3, [r4, #36]	; 0x24
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <std+0x3c>)
 80088f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80088fa:	4b05      	ldr	r3, [pc, #20]	; (8008910 <std+0x40>)
 80088fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088fe:	4b05      	ldr	r3, [pc, #20]	; (8008914 <std+0x44>)
 8008900:	6224      	str	r4, [r4, #32]
 8008902:	6323      	str	r3, [r4, #48]	; 0x30
 8008904:	bd10      	pop	{r4, pc}
 8008906:	bf00      	nop
 8008908:	08008f99 	.word	0x08008f99
 800890c:	08008fbb 	.word	0x08008fbb
 8008910:	08008ff3 	.word	0x08008ff3
 8008914:	08009017 	.word	0x08009017

08008918 <_cleanup_r>:
 8008918:	4901      	ldr	r1, [pc, #4]	; (8008920 <_cleanup_r+0x8>)
 800891a:	f000 b8af 	b.w	8008a7c <_fwalk_reent>
 800891e:	bf00      	nop
 8008920:	08008859 	.word	0x08008859

08008924 <__sfmoreglue>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	2268      	movs	r2, #104	; 0x68
 8008928:	1e4d      	subs	r5, r1, #1
 800892a:	4355      	muls	r5, r2
 800892c:	460e      	mov	r6, r1
 800892e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008932:	f7ff f907 	bl	8007b44 <_malloc_r>
 8008936:	4604      	mov	r4, r0
 8008938:	b140      	cbz	r0, 800894c <__sfmoreglue+0x28>
 800893a:	2100      	movs	r1, #0
 800893c:	e9c0 1600 	strd	r1, r6, [r0]
 8008940:	300c      	adds	r0, #12
 8008942:	60a0      	str	r0, [r4, #8]
 8008944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008948:	f7ff f872 	bl	8007a30 <memset>
 800894c:	4620      	mov	r0, r4
 800894e:	bd70      	pop	{r4, r5, r6, pc}

08008950 <__sfp_lock_acquire>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__sfp_lock_acquire+0x8>)
 8008952:	f000 b8c6 	b.w	8008ae2 <__retarget_lock_acquire_recursive>
 8008956:	bf00      	nop
 8008958:	200004c9 	.word	0x200004c9

0800895c <__sfp_lock_release>:
 800895c:	4801      	ldr	r0, [pc, #4]	; (8008964 <__sfp_lock_release+0x8>)
 800895e:	f000 b8c1 	b.w	8008ae4 <__retarget_lock_release_recursive>
 8008962:	bf00      	nop
 8008964:	200004c9 	.word	0x200004c9

08008968 <__sinit_lock_acquire>:
 8008968:	4801      	ldr	r0, [pc, #4]	; (8008970 <__sinit_lock_acquire+0x8>)
 800896a:	f000 b8ba 	b.w	8008ae2 <__retarget_lock_acquire_recursive>
 800896e:	bf00      	nop
 8008970:	200004ca 	.word	0x200004ca

08008974 <__sinit_lock_release>:
 8008974:	4801      	ldr	r0, [pc, #4]	; (800897c <__sinit_lock_release+0x8>)
 8008976:	f000 b8b5 	b.w	8008ae4 <__retarget_lock_release_recursive>
 800897a:	bf00      	nop
 800897c:	200004ca 	.word	0x200004ca

08008980 <__sinit>:
 8008980:	b510      	push	{r4, lr}
 8008982:	4604      	mov	r4, r0
 8008984:	f7ff fff0 	bl	8008968 <__sinit_lock_acquire>
 8008988:	69a3      	ldr	r3, [r4, #24]
 800898a:	b11b      	cbz	r3, 8008994 <__sinit+0x14>
 800898c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008990:	f7ff bff0 	b.w	8008974 <__sinit_lock_release>
 8008994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008998:	6523      	str	r3, [r4, #80]	; 0x50
 800899a:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <__sinit+0x68>)
 800899c:	4a13      	ldr	r2, [pc, #76]	; (80089ec <__sinit+0x6c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	bf04      	itt	eq
 80089a6:	2301      	moveq	r3, #1
 80089a8:	61a3      	streq	r3, [r4, #24]
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 f820 	bl	80089f0 <__sfp>
 80089b0:	6060      	str	r0, [r4, #4]
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 f81c 	bl	80089f0 <__sfp>
 80089b8:	60a0      	str	r0, [r4, #8]
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 f818 	bl	80089f0 <__sfp>
 80089c0:	2200      	movs	r2, #0
 80089c2:	60e0      	str	r0, [r4, #12]
 80089c4:	2104      	movs	r1, #4
 80089c6:	6860      	ldr	r0, [r4, #4]
 80089c8:	f7ff ff82 	bl	80088d0 <std>
 80089cc:	68a0      	ldr	r0, [r4, #8]
 80089ce:	2201      	movs	r2, #1
 80089d0:	2109      	movs	r1, #9
 80089d2:	f7ff ff7d 	bl	80088d0 <std>
 80089d6:	68e0      	ldr	r0, [r4, #12]
 80089d8:	2202      	movs	r2, #2
 80089da:	2112      	movs	r1, #18
 80089dc:	f7ff ff78 	bl	80088d0 <std>
 80089e0:	2301      	movs	r3, #1
 80089e2:	61a3      	str	r3, [r4, #24]
 80089e4:	e7d2      	b.n	800898c <__sinit+0xc>
 80089e6:	bf00      	nop
 80089e8:	080097e0 	.word	0x080097e0
 80089ec:	08008919 	.word	0x08008919

080089f0 <__sfp>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	4607      	mov	r7, r0
 80089f4:	f7ff ffac 	bl	8008950 <__sfp_lock_acquire>
 80089f8:	4b1e      	ldr	r3, [pc, #120]	; (8008a74 <__sfp+0x84>)
 80089fa:	681e      	ldr	r6, [r3, #0]
 80089fc:	69b3      	ldr	r3, [r6, #24]
 80089fe:	b913      	cbnz	r3, 8008a06 <__sfp+0x16>
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff ffbd 	bl	8008980 <__sinit>
 8008a06:	3648      	adds	r6, #72	; 0x48
 8008a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	d503      	bpl.n	8008a18 <__sfp+0x28>
 8008a10:	6833      	ldr	r3, [r6, #0]
 8008a12:	b30b      	cbz	r3, 8008a58 <__sfp+0x68>
 8008a14:	6836      	ldr	r6, [r6, #0]
 8008a16:	e7f7      	b.n	8008a08 <__sfp+0x18>
 8008a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a1c:	b9d5      	cbnz	r5, 8008a54 <__sfp+0x64>
 8008a1e:	4b16      	ldr	r3, [pc, #88]	; (8008a78 <__sfp+0x88>)
 8008a20:	60e3      	str	r3, [r4, #12]
 8008a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a26:	6665      	str	r5, [r4, #100]	; 0x64
 8008a28:	f000 f85a 	bl	8008ae0 <__retarget_lock_init_recursive>
 8008a2c:	f7ff ff96 	bl	800895c <__sfp_lock_release>
 8008a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a38:	6025      	str	r5, [r4, #0]
 8008a3a:	61a5      	str	r5, [r4, #24]
 8008a3c:	2208      	movs	r2, #8
 8008a3e:	4629      	mov	r1, r5
 8008a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a44:	f7fe fff4 	bl	8007a30 <memset>
 8008a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a50:	4620      	mov	r0, r4
 8008a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a54:	3468      	adds	r4, #104	; 0x68
 8008a56:	e7d9      	b.n	8008a0c <__sfp+0x1c>
 8008a58:	2104      	movs	r1, #4
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	f7ff ff62 	bl	8008924 <__sfmoreglue>
 8008a60:	4604      	mov	r4, r0
 8008a62:	6030      	str	r0, [r6, #0]
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d1d5      	bne.n	8008a14 <__sfp+0x24>
 8008a68:	f7ff ff78 	bl	800895c <__sfp_lock_release>
 8008a6c:	230c      	movs	r3, #12
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	e7ee      	b.n	8008a50 <__sfp+0x60>
 8008a72:	bf00      	nop
 8008a74:	080097e0 	.word	0x080097e0
 8008a78:	ffff0001 	.word	0xffff0001

08008a7c <_fwalk_reent>:
 8008a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a80:	4606      	mov	r6, r0
 8008a82:	4688      	mov	r8, r1
 8008a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a88:	2700      	movs	r7, #0
 8008a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8008a92:	d505      	bpl.n	8008aa0 <_fwalk_reent+0x24>
 8008a94:	6824      	ldr	r4, [r4, #0]
 8008a96:	2c00      	cmp	r4, #0
 8008a98:	d1f7      	bne.n	8008a8a <_fwalk_reent+0xe>
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aa0:	89ab      	ldrh	r3, [r5, #12]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d907      	bls.n	8008ab6 <_fwalk_reent+0x3a>
 8008aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	d003      	beq.n	8008ab6 <_fwalk_reent+0x3a>
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	47c0      	blx	r8
 8008ab4:	4307      	orrs	r7, r0
 8008ab6:	3568      	adds	r5, #104	; 0x68
 8008ab8:	e7e9      	b.n	8008a8e <_fwalk_reent+0x12>
	...

08008abc <_gettimeofday_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	; (8008adc <_gettimeofday_r+0x20>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	602b      	str	r3, [r5, #0]
 8008aca:	f000 fb19 	bl	8009100 <_gettimeofday>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d102      	bne.n	8008ad8 <_gettimeofday_r+0x1c>
 8008ad2:	682b      	ldr	r3, [r5, #0]
 8008ad4:	b103      	cbz	r3, 8008ad8 <_gettimeofday_r+0x1c>
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	bd38      	pop	{r3, r4, r5, pc}
 8008ada:	bf00      	nop
 8008adc:	200004cc 	.word	0x200004cc

08008ae0 <__retarget_lock_init_recursive>:
 8008ae0:	4770      	bx	lr

08008ae2 <__retarget_lock_acquire_recursive>:
 8008ae2:	4770      	bx	lr

08008ae4 <__retarget_lock_release_recursive>:
 8008ae4:	4770      	bx	lr

08008ae6 <__swhatbuf_r>:
 8008ae6:	b570      	push	{r4, r5, r6, lr}
 8008ae8:	460e      	mov	r6, r1
 8008aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aee:	2900      	cmp	r1, #0
 8008af0:	b096      	sub	sp, #88	; 0x58
 8008af2:	4614      	mov	r4, r2
 8008af4:	461d      	mov	r5, r3
 8008af6:	da08      	bge.n	8008b0a <__swhatbuf_r+0x24>
 8008af8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	602a      	str	r2, [r5, #0]
 8008b00:	061a      	lsls	r2, r3, #24
 8008b02:	d410      	bmi.n	8008b26 <__swhatbuf_r+0x40>
 8008b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b08:	e00e      	b.n	8008b28 <__swhatbuf_r+0x42>
 8008b0a:	466a      	mov	r2, sp
 8008b0c:	f000 faaa 	bl	8009064 <_fstat_r>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	dbf1      	blt.n	8008af8 <__swhatbuf_r+0x12>
 8008b14:	9a01      	ldr	r2, [sp, #4]
 8008b16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b1e:	425a      	negs	r2, r3
 8008b20:	415a      	adcs	r2, r3
 8008b22:	602a      	str	r2, [r5, #0]
 8008b24:	e7ee      	b.n	8008b04 <__swhatbuf_r+0x1e>
 8008b26:	2340      	movs	r3, #64	; 0x40
 8008b28:	2000      	movs	r0, #0
 8008b2a:	6023      	str	r3, [r4, #0]
 8008b2c:	b016      	add	sp, #88	; 0x58
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}

08008b30 <__smakebuf_r>:
 8008b30:	898b      	ldrh	r3, [r1, #12]
 8008b32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b34:	079d      	lsls	r5, r3, #30
 8008b36:	4606      	mov	r6, r0
 8008b38:	460c      	mov	r4, r1
 8008b3a:	d507      	bpl.n	8008b4c <__smakebuf_r+0x1c>
 8008b3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	6123      	str	r3, [r4, #16]
 8008b44:	2301      	movs	r3, #1
 8008b46:	6163      	str	r3, [r4, #20]
 8008b48:	b002      	add	sp, #8
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
 8008b4c:	ab01      	add	r3, sp, #4
 8008b4e:	466a      	mov	r2, sp
 8008b50:	f7ff ffc9 	bl	8008ae6 <__swhatbuf_r>
 8008b54:	9900      	ldr	r1, [sp, #0]
 8008b56:	4605      	mov	r5, r0
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f7fe fff3 	bl	8007b44 <_malloc_r>
 8008b5e:	b948      	cbnz	r0, 8008b74 <__smakebuf_r+0x44>
 8008b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b64:	059a      	lsls	r2, r3, #22
 8008b66:	d4ef      	bmi.n	8008b48 <__smakebuf_r+0x18>
 8008b68:	f023 0303 	bic.w	r3, r3, #3
 8008b6c:	f043 0302 	orr.w	r3, r3, #2
 8008b70:	81a3      	strh	r3, [r4, #12]
 8008b72:	e7e3      	b.n	8008b3c <__smakebuf_r+0xc>
 8008b74:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <__smakebuf_r+0x7c>)
 8008b76:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	6020      	str	r0, [r4, #0]
 8008b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b80:	81a3      	strh	r3, [r4, #12]
 8008b82:	9b00      	ldr	r3, [sp, #0]
 8008b84:	6163      	str	r3, [r4, #20]
 8008b86:	9b01      	ldr	r3, [sp, #4]
 8008b88:	6120      	str	r0, [r4, #16]
 8008b8a:	b15b      	cbz	r3, 8008ba4 <__smakebuf_r+0x74>
 8008b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b90:	4630      	mov	r0, r6
 8008b92:	f000 fa79 	bl	8009088 <_isatty_r>
 8008b96:	b128      	cbz	r0, 8008ba4 <__smakebuf_r+0x74>
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	f023 0303 	bic.w	r3, r3, #3
 8008b9e:	f043 0301 	orr.w	r3, r3, #1
 8008ba2:	81a3      	strh	r3, [r4, #12]
 8008ba4:	89a0      	ldrh	r0, [r4, #12]
 8008ba6:	4305      	orrs	r5, r0
 8008ba8:	81a5      	strh	r5, [r4, #12]
 8008baa:	e7cd      	b.n	8008b48 <__smakebuf_r+0x18>
 8008bac:	08008919 	.word	0x08008919

08008bb0 <memmove>:
 8008bb0:	4288      	cmp	r0, r1
 8008bb2:	b510      	push	{r4, lr}
 8008bb4:	eb01 0402 	add.w	r4, r1, r2
 8008bb8:	d902      	bls.n	8008bc0 <memmove+0x10>
 8008bba:	4284      	cmp	r4, r0
 8008bbc:	4623      	mov	r3, r4
 8008bbe:	d807      	bhi.n	8008bd0 <memmove+0x20>
 8008bc0:	1e43      	subs	r3, r0, #1
 8008bc2:	42a1      	cmp	r1, r4
 8008bc4:	d008      	beq.n	8008bd8 <memmove+0x28>
 8008bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bce:	e7f8      	b.n	8008bc2 <memmove+0x12>
 8008bd0:	4402      	add	r2, r0
 8008bd2:	4601      	mov	r1, r0
 8008bd4:	428a      	cmp	r2, r1
 8008bd6:	d100      	bne.n	8008bda <memmove+0x2a>
 8008bd8:	bd10      	pop	{r4, pc}
 8008bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008be2:	e7f7      	b.n	8008bd4 <memmove+0x24>

08008be4 <__malloc_lock>:
 8008be4:	4801      	ldr	r0, [pc, #4]	; (8008bec <__malloc_lock+0x8>)
 8008be6:	f7ff bf7c 	b.w	8008ae2 <__retarget_lock_acquire_recursive>
 8008bea:	bf00      	nop
 8008bec:	200004c8 	.word	0x200004c8

08008bf0 <__malloc_unlock>:
 8008bf0:	4801      	ldr	r0, [pc, #4]	; (8008bf8 <__malloc_unlock+0x8>)
 8008bf2:	f7ff bf77 	b.w	8008ae4 <__retarget_lock_release_recursive>
 8008bf6:	bf00      	nop
 8008bf8:	200004c8 	.word	0x200004c8

08008bfc <_realloc_r>:
 8008bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c00:	4680      	mov	r8, r0
 8008c02:	4614      	mov	r4, r2
 8008c04:	460e      	mov	r6, r1
 8008c06:	b921      	cbnz	r1, 8008c12 <_realloc_r+0x16>
 8008c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	f7fe bf99 	b.w	8007b44 <_malloc_r>
 8008c12:	b92a      	cbnz	r2, 8008c20 <_realloc_r+0x24>
 8008c14:	f7fe ff2a 	bl	8007a6c <_free_r>
 8008c18:	4625      	mov	r5, r4
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c20:	f000 fa54 	bl	80090cc <_malloc_usable_size_r>
 8008c24:	4284      	cmp	r4, r0
 8008c26:	4607      	mov	r7, r0
 8008c28:	d802      	bhi.n	8008c30 <_realloc_r+0x34>
 8008c2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c2e:	d812      	bhi.n	8008c56 <_realloc_r+0x5a>
 8008c30:	4621      	mov	r1, r4
 8008c32:	4640      	mov	r0, r8
 8008c34:	f7fe ff86 	bl	8007b44 <_malloc_r>
 8008c38:	4605      	mov	r5, r0
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d0ed      	beq.n	8008c1a <_realloc_r+0x1e>
 8008c3e:	42bc      	cmp	r4, r7
 8008c40:	4622      	mov	r2, r4
 8008c42:	4631      	mov	r1, r6
 8008c44:	bf28      	it	cs
 8008c46:	463a      	movcs	r2, r7
 8008c48:	f7fe fee4 	bl	8007a14 <memcpy>
 8008c4c:	4631      	mov	r1, r6
 8008c4e:	4640      	mov	r0, r8
 8008c50:	f7fe ff0c 	bl	8007a6c <_free_r>
 8008c54:	e7e1      	b.n	8008c1a <_realloc_r+0x1e>
 8008c56:	4635      	mov	r5, r6
 8008c58:	e7df      	b.n	8008c1a <_realloc_r+0x1e>

08008c5a <__ssputs_r>:
 8008c5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c5e:	688e      	ldr	r6, [r1, #8]
 8008c60:	429e      	cmp	r6, r3
 8008c62:	4682      	mov	sl, r0
 8008c64:	460c      	mov	r4, r1
 8008c66:	4690      	mov	r8, r2
 8008c68:	461f      	mov	r7, r3
 8008c6a:	d838      	bhi.n	8008cde <__ssputs_r+0x84>
 8008c6c:	898a      	ldrh	r2, [r1, #12]
 8008c6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c72:	d032      	beq.n	8008cda <__ssputs_r+0x80>
 8008c74:	6825      	ldr	r5, [r4, #0]
 8008c76:	6909      	ldr	r1, [r1, #16]
 8008c78:	eba5 0901 	sub.w	r9, r5, r1
 8008c7c:	6965      	ldr	r5, [r4, #20]
 8008c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c86:	3301      	adds	r3, #1
 8008c88:	444b      	add	r3, r9
 8008c8a:	106d      	asrs	r5, r5, #1
 8008c8c:	429d      	cmp	r5, r3
 8008c8e:	bf38      	it	cc
 8008c90:	461d      	movcc	r5, r3
 8008c92:	0553      	lsls	r3, r2, #21
 8008c94:	d531      	bpl.n	8008cfa <__ssputs_r+0xa0>
 8008c96:	4629      	mov	r1, r5
 8008c98:	f7fe ff54 	bl	8007b44 <_malloc_r>
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	b950      	cbnz	r0, 8008cb6 <__ssputs_r+0x5c>
 8008ca0:	230c      	movs	r3, #12
 8008ca2:	f8ca 3000 	str.w	r3, [sl]
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb6:	6921      	ldr	r1, [r4, #16]
 8008cb8:	464a      	mov	r2, r9
 8008cba:	f7fe feab 	bl	8007a14 <memcpy>
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc8:	81a3      	strh	r3, [r4, #12]
 8008cca:	6126      	str	r6, [r4, #16]
 8008ccc:	6165      	str	r5, [r4, #20]
 8008cce:	444e      	add	r6, r9
 8008cd0:	eba5 0509 	sub.w	r5, r5, r9
 8008cd4:	6026      	str	r6, [r4, #0]
 8008cd6:	60a5      	str	r5, [r4, #8]
 8008cd8:	463e      	mov	r6, r7
 8008cda:	42be      	cmp	r6, r7
 8008cdc:	d900      	bls.n	8008ce0 <__ssputs_r+0x86>
 8008cde:	463e      	mov	r6, r7
 8008ce0:	6820      	ldr	r0, [r4, #0]
 8008ce2:	4632      	mov	r2, r6
 8008ce4:	4641      	mov	r1, r8
 8008ce6:	f7ff ff63 	bl	8008bb0 <memmove>
 8008cea:	68a3      	ldr	r3, [r4, #8]
 8008cec:	1b9b      	subs	r3, r3, r6
 8008cee:	60a3      	str	r3, [r4, #8]
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	4433      	add	r3, r6
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	e7db      	b.n	8008cb2 <__ssputs_r+0x58>
 8008cfa:	462a      	mov	r2, r5
 8008cfc:	f7ff ff7e 	bl	8008bfc <_realloc_r>
 8008d00:	4606      	mov	r6, r0
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d1e1      	bne.n	8008cca <__ssputs_r+0x70>
 8008d06:	6921      	ldr	r1, [r4, #16]
 8008d08:	4650      	mov	r0, sl
 8008d0a:	f7fe feaf 	bl	8007a6c <_free_r>
 8008d0e:	e7c7      	b.n	8008ca0 <__ssputs_r+0x46>

08008d10 <_svfiprintf_r>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	4698      	mov	r8, r3
 8008d16:	898b      	ldrh	r3, [r1, #12]
 8008d18:	061b      	lsls	r3, r3, #24
 8008d1a:	b09d      	sub	sp, #116	; 0x74
 8008d1c:	4607      	mov	r7, r0
 8008d1e:	460d      	mov	r5, r1
 8008d20:	4614      	mov	r4, r2
 8008d22:	d50e      	bpl.n	8008d42 <_svfiprintf_r+0x32>
 8008d24:	690b      	ldr	r3, [r1, #16]
 8008d26:	b963      	cbnz	r3, 8008d42 <_svfiprintf_r+0x32>
 8008d28:	2140      	movs	r1, #64	; 0x40
 8008d2a:	f7fe ff0b 	bl	8007b44 <_malloc_r>
 8008d2e:	6028      	str	r0, [r5, #0]
 8008d30:	6128      	str	r0, [r5, #16]
 8008d32:	b920      	cbnz	r0, 8008d3e <_svfiprintf_r+0x2e>
 8008d34:	230c      	movs	r3, #12
 8008d36:	603b      	str	r3, [r7, #0]
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3c:	e0d1      	b.n	8008ee2 <_svfiprintf_r+0x1d2>
 8008d3e:	2340      	movs	r3, #64	; 0x40
 8008d40:	616b      	str	r3, [r5, #20]
 8008d42:	2300      	movs	r3, #0
 8008d44:	9309      	str	r3, [sp, #36]	; 0x24
 8008d46:	2320      	movs	r3, #32
 8008d48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d50:	2330      	movs	r3, #48	; 0x30
 8008d52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008efc <_svfiprintf_r+0x1ec>
 8008d56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d5a:	f04f 0901 	mov.w	r9, #1
 8008d5e:	4623      	mov	r3, r4
 8008d60:	469a      	mov	sl, r3
 8008d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d66:	b10a      	cbz	r2, 8008d6c <_svfiprintf_r+0x5c>
 8008d68:	2a25      	cmp	r2, #37	; 0x25
 8008d6a:	d1f9      	bne.n	8008d60 <_svfiprintf_r+0x50>
 8008d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d70:	d00b      	beq.n	8008d8a <_svfiprintf_r+0x7a>
 8008d72:	465b      	mov	r3, fp
 8008d74:	4622      	mov	r2, r4
 8008d76:	4629      	mov	r1, r5
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7ff ff6e 	bl	8008c5a <__ssputs_r>
 8008d7e:	3001      	adds	r0, #1
 8008d80:	f000 80aa 	beq.w	8008ed8 <_svfiprintf_r+0x1c8>
 8008d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d86:	445a      	add	r2, fp
 8008d88:	9209      	str	r2, [sp, #36]	; 0x24
 8008d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 80a2 	beq.w	8008ed8 <_svfiprintf_r+0x1c8>
 8008d94:	2300      	movs	r3, #0
 8008d96:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d9e:	f10a 0a01 	add.w	sl, sl, #1
 8008da2:	9304      	str	r3, [sp, #16]
 8008da4:	9307      	str	r3, [sp, #28]
 8008da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008daa:	931a      	str	r3, [sp, #104]	; 0x68
 8008dac:	4654      	mov	r4, sl
 8008dae:	2205      	movs	r2, #5
 8008db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db4:	4851      	ldr	r0, [pc, #324]	; (8008efc <_svfiprintf_r+0x1ec>)
 8008db6:	f7f7 fa13 	bl	80001e0 <memchr>
 8008dba:	9a04      	ldr	r2, [sp, #16]
 8008dbc:	b9d8      	cbnz	r0, 8008df6 <_svfiprintf_r+0xe6>
 8008dbe:	06d0      	lsls	r0, r2, #27
 8008dc0:	bf44      	itt	mi
 8008dc2:	2320      	movmi	r3, #32
 8008dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc8:	0711      	lsls	r1, r2, #28
 8008dca:	bf44      	itt	mi
 8008dcc:	232b      	movmi	r3, #43	; 0x2b
 8008dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8008dd8:	d015      	beq.n	8008e06 <_svfiprintf_r+0xf6>
 8008dda:	9a07      	ldr	r2, [sp, #28]
 8008ddc:	4654      	mov	r4, sl
 8008dde:	2000      	movs	r0, #0
 8008de0:	f04f 0c0a 	mov.w	ip, #10
 8008de4:	4621      	mov	r1, r4
 8008de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dea:	3b30      	subs	r3, #48	; 0x30
 8008dec:	2b09      	cmp	r3, #9
 8008dee:	d94e      	bls.n	8008e8e <_svfiprintf_r+0x17e>
 8008df0:	b1b0      	cbz	r0, 8008e20 <_svfiprintf_r+0x110>
 8008df2:	9207      	str	r2, [sp, #28]
 8008df4:	e014      	b.n	8008e20 <_svfiprintf_r+0x110>
 8008df6:	eba0 0308 	sub.w	r3, r0, r8
 8008dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	46a2      	mov	sl, r4
 8008e04:	e7d2      	b.n	8008dac <_svfiprintf_r+0x9c>
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	1d19      	adds	r1, r3, #4
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	9103      	str	r1, [sp, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	bfbb      	ittet	lt
 8008e12:	425b      	neglt	r3, r3
 8008e14:	f042 0202 	orrlt.w	r2, r2, #2
 8008e18:	9307      	strge	r3, [sp, #28]
 8008e1a:	9307      	strlt	r3, [sp, #28]
 8008e1c:	bfb8      	it	lt
 8008e1e:	9204      	strlt	r2, [sp, #16]
 8008e20:	7823      	ldrb	r3, [r4, #0]
 8008e22:	2b2e      	cmp	r3, #46	; 0x2e
 8008e24:	d10c      	bne.n	8008e40 <_svfiprintf_r+0x130>
 8008e26:	7863      	ldrb	r3, [r4, #1]
 8008e28:	2b2a      	cmp	r3, #42	; 0x2a
 8008e2a:	d135      	bne.n	8008e98 <_svfiprintf_r+0x188>
 8008e2c:	9b03      	ldr	r3, [sp, #12]
 8008e2e:	1d1a      	adds	r2, r3, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	9203      	str	r2, [sp, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bfb8      	it	lt
 8008e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e3c:	3402      	adds	r4, #2
 8008e3e:	9305      	str	r3, [sp, #20]
 8008e40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f0c <_svfiprintf_r+0x1fc>
 8008e44:	7821      	ldrb	r1, [r4, #0]
 8008e46:	2203      	movs	r2, #3
 8008e48:	4650      	mov	r0, sl
 8008e4a:	f7f7 f9c9 	bl	80001e0 <memchr>
 8008e4e:	b140      	cbz	r0, 8008e62 <_svfiprintf_r+0x152>
 8008e50:	2340      	movs	r3, #64	; 0x40
 8008e52:	eba0 000a 	sub.w	r0, r0, sl
 8008e56:	fa03 f000 	lsl.w	r0, r3, r0
 8008e5a:	9b04      	ldr	r3, [sp, #16]
 8008e5c:	4303      	orrs	r3, r0
 8008e5e:	3401      	adds	r4, #1
 8008e60:	9304      	str	r3, [sp, #16]
 8008e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e66:	4826      	ldr	r0, [pc, #152]	; (8008f00 <_svfiprintf_r+0x1f0>)
 8008e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e6c:	2206      	movs	r2, #6
 8008e6e:	f7f7 f9b7 	bl	80001e0 <memchr>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d038      	beq.n	8008ee8 <_svfiprintf_r+0x1d8>
 8008e76:	4b23      	ldr	r3, [pc, #140]	; (8008f04 <_svfiprintf_r+0x1f4>)
 8008e78:	bb1b      	cbnz	r3, 8008ec2 <_svfiprintf_r+0x1b2>
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	3307      	adds	r3, #7
 8008e7e:	f023 0307 	bic.w	r3, r3, #7
 8008e82:	3308      	adds	r3, #8
 8008e84:	9303      	str	r3, [sp, #12]
 8008e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e88:	4433      	add	r3, r6
 8008e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8c:	e767      	b.n	8008d5e <_svfiprintf_r+0x4e>
 8008e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e92:	460c      	mov	r4, r1
 8008e94:	2001      	movs	r0, #1
 8008e96:	e7a5      	b.n	8008de4 <_svfiprintf_r+0xd4>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	3401      	adds	r4, #1
 8008e9c:	9305      	str	r3, [sp, #20]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	f04f 0c0a 	mov.w	ip, #10
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eaa:	3a30      	subs	r2, #48	; 0x30
 8008eac:	2a09      	cmp	r2, #9
 8008eae:	d903      	bls.n	8008eb8 <_svfiprintf_r+0x1a8>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d0c5      	beq.n	8008e40 <_svfiprintf_r+0x130>
 8008eb4:	9105      	str	r1, [sp, #20]
 8008eb6:	e7c3      	b.n	8008e40 <_svfiprintf_r+0x130>
 8008eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e7f0      	b.n	8008ea4 <_svfiprintf_r+0x194>
 8008ec2:	ab03      	add	r3, sp, #12
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	462a      	mov	r2, r5
 8008ec8:	4b0f      	ldr	r3, [pc, #60]	; (8008f08 <_svfiprintf_r+0x1f8>)
 8008eca:	a904      	add	r1, sp, #16
 8008ecc:	4638      	mov	r0, r7
 8008ece:	f3af 8000 	nop.w
 8008ed2:	1c42      	adds	r2, r0, #1
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	d1d6      	bne.n	8008e86 <_svfiprintf_r+0x176>
 8008ed8:	89ab      	ldrh	r3, [r5, #12]
 8008eda:	065b      	lsls	r3, r3, #25
 8008edc:	f53f af2c 	bmi.w	8008d38 <_svfiprintf_r+0x28>
 8008ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ee2:	b01d      	add	sp, #116	; 0x74
 8008ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee8:	ab03      	add	r3, sp, #12
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	462a      	mov	r2, r5
 8008eee:	4b06      	ldr	r3, [pc, #24]	; (8008f08 <_svfiprintf_r+0x1f8>)
 8008ef0:	a904      	add	r1, sp, #16
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f7ff f862 	bl	8007fbc <_printf_i>
 8008ef8:	e7eb      	b.n	8008ed2 <_svfiprintf_r+0x1c2>
 8008efa:	bf00      	nop
 8008efc:	080097e4 	.word	0x080097e4
 8008f00:	080097ee 	.word	0x080097ee
 8008f04:	00000000 	.word	0x00000000
 8008f08:	08008c5b 	.word	0x08008c5b
 8008f0c:	080097ea 	.word	0x080097ea

08008f10 <_raise_r>:
 8008f10:	291f      	cmp	r1, #31
 8008f12:	b538      	push	{r3, r4, r5, lr}
 8008f14:	4604      	mov	r4, r0
 8008f16:	460d      	mov	r5, r1
 8008f18:	d904      	bls.n	8008f24 <_raise_r+0x14>
 8008f1a:	2316      	movs	r3, #22
 8008f1c:	6003      	str	r3, [r0, #0]
 8008f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f26:	b112      	cbz	r2, 8008f2e <_raise_r+0x1e>
 8008f28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f2c:	b94b      	cbnz	r3, 8008f42 <_raise_r+0x32>
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f000 f830 	bl	8008f94 <_getpid_r>
 8008f34:	462a      	mov	r2, r5
 8008f36:	4601      	mov	r1, r0
 8008f38:	4620      	mov	r0, r4
 8008f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f3e:	f000 b817 	b.w	8008f70 <_kill_r>
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d00a      	beq.n	8008f5c <_raise_r+0x4c>
 8008f46:	1c59      	adds	r1, r3, #1
 8008f48:	d103      	bne.n	8008f52 <_raise_r+0x42>
 8008f4a:	2316      	movs	r3, #22
 8008f4c:	6003      	str	r3, [r0, #0]
 8008f4e:	2001      	movs	r0, #1
 8008f50:	e7e7      	b.n	8008f22 <_raise_r+0x12>
 8008f52:	2400      	movs	r4, #0
 8008f54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f58:	4628      	mov	r0, r5
 8008f5a:	4798      	blx	r3
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	e7e0      	b.n	8008f22 <_raise_r+0x12>

08008f60 <raise>:
 8008f60:	4b02      	ldr	r3, [pc, #8]	; (8008f6c <raise+0xc>)
 8008f62:	4601      	mov	r1, r0
 8008f64:	6818      	ldr	r0, [r3, #0]
 8008f66:	f7ff bfd3 	b.w	8008f10 <_raise_r>
 8008f6a:	bf00      	nop
 8008f6c:	2000000c 	.word	0x2000000c

08008f70 <_kill_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d07      	ldr	r5, [pc, #28]	; (8008f90 <_kill_r+0x20>)
 8008f74:	2300      	movs	r3, #0
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	f7f9 fde1 	bl	8002b44 <_kill>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	d102      	bne.n	8008f8c <_kill_r+0x1c>
 8008f86:	682b      	ldr	r3, [r5, #0]
 8008f88:	b103      	cbz	r3, 8008f8c <_kill_r+0x1c>
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	bd38      	pop	{r3, r4, r5, pc}
 8008f8e:	bf00      	nop
 8008f90:	200004cc 	.word	0x200004cc

08008f94 <_getpid_r>:
 8008f94:	f7f9 bdce 	b.w	8002b34 <_getpid>

08008f98 <__sread>:
 8008f98:	b510      	push	{r4, lr}
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa0:	f000 f89c 	bl	80090dc <_read_r>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	bfab      	itete	ge
 8008fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008faa:	89a3      	ldrhlt	r3, [r4, #12]
 8008fac:	181b      	addge	r3, r3, r0
 8008fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fb2:	bfac      	ite	ge
 8008fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fb6:	81a3      	strhlt	r3, [r4, #12]
 8008fb8:	bd10      	pop	{r4, pc}

08008fba <__swrite>:
 8008fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbe:	461f      	mov	r7, r3
 8008fc0:	898b      	ldrh	r3, [r1, #12]
 8008fc2:	05db      	lsls	r3, r3, #23
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	4616      	mov	r6, r2
 8008fca:	d505      	bpl.n	8008fd8 <__swrite+0x1e>
 8008fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f000 f868 	bl	80090a8 <_lseek_r>
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	463b      	mov	r3, r7
 8008fe8:	4628      	mov	r0, r5
 8008fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fee:	f000 b817 	b.w	8009020 <_write_r>

08008ff2 <__sseek>:
 8008ff2:	b510      	push	{r4, lr}
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ffa:	f000 f855 	bl	80090a8 <_lseek_r>
 8008ffe:	1c43      	adds	r3, r0, #1
 8009000:	89a3      	ldrh	r3, [r4, #12]
 8009002:	bf15      	itete	ne
 8009004:	6560      	strne	r0, [r4, #84]	; 0x54
 8009006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800900a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800900e:	81a3      	strheq	r3, [r4, #12]
 8009010:	bf18      	it	ne
 8009012:	81a3      	strhne	r3, [r4, #12]
 8009014:	bd10      	pop	{r4, pc}

08009016 <__sclose>:
 8009016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800901a:	f000 b813 	b.w	8009044 <_close_r>
	...

08009020 <_write_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	; (8009040 <_write_r+0x20>)
 8009024:	4604      	mov	r4, r0
 8009026:	4608      	mov	r0, r1
 8009028:	4611      	mov	r1, r2
 800902a:	2200      	movs	r2, #0
 800902c:	602a      	str	r2, [r5, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	f7f9 fdbf 	bl	8002bb2 <_write>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d102      	bne.n	800903e <_write_r+0x1e>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b103      	cbz	r3, 800903e <_write_r+0x1e>
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	200004cc 	.word	0x200004cc

08009044 <_close_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4d06      	ldr	r5, [pc, #24]	; (8009060 <_close_r+0x1c>)
 8009048:	2300      	movs	r3, #0
 800904a:	4604      	mov	r4, r0
 800904c:	4608      	mov	r0, r1
 800904e:	602b      	str	r3, [r5, #0]
 8009050:	f7f9 fdcb 	bl	8002bea <_close>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d102      	bne.n	800905e <_close_r+0x1a>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	b103      	cbz	r3, 800905e <_close_r+0x1a>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	200004cc 	.word	0x200004cc

08009064 <_fstat_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	4d07      	ldr	r5, [pc, #28]	; (8009084 <_fstat_r+0x20>)
 8009068:	2300      	movs	r3, #0
 800906a:	4604      	mov	r4, r0
 800906c:	4608      	mov	r0, r1
 800906e:	4611      	mov	r1, r2
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	f7f9 fdc6 	bl	8002c02 <_fstat>
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	d102      	bne.n	8009080 <_fstat_r+0x1c>
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	b103      	cbz	r3, 8009080 <_fstat_r+0x1c>
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	bd38      	pop	{r3, r4, r5, pc}
 8009082:	bf00      	nop
 8009084:	200004cc 	.word	0x200004cc

08009088 <_isatty_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4d06      	ldr	r5, [pc, #24]	; (80090a4 <_isatty_r+0x1c>)
 800908c:	2300      	movs	r3, #0
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	f7f9 fdc5 	bl	8002c22 <_isatty>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_isatty_r+0x1a>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_isatty_r+0x1a>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	200004cc 	.word	0x200004cc

080090a8 <_lseek_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d07      	ldr	r5, [pc, #28]	; (80090c8 <_lseek_r+0x20>)
 80090ac:	4604      	mov	r4, r0
 80090ae:	4608      	mov	r0, r1
 80090b0:	4611      	mov	r1, r2
 80090b2:	2200      	movs	r2, #0
 80090b4:	602a      	str	r2, [r5, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f7f9 fdbe 	bl	8002c38 <_lseek>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d102      	bne.n	80090c6 <_lseek_r+0x1e>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b103      	cbz	r3, 80090c6 <_lseek_r+0x1e>
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	200004cc 	.word	0x200004cc

080090cc <_malloc_usable_size_r>:
 80090cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d0:	1f18      	subs	r0, r3, #4
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	bfbc      	itt	lt
 80090d6:	580b      	ldrlt	r3, [r1, r0]
 80090d8:	18c0      	addlt	r0, r0, r3
 80090da:	4770      	bx	lr

080090dc <_read_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d07      	ldr	r5, [pc, #28]	; (80090fc <_read_r+0x20>)
 80090e0:	4604      	mov	r4, r0
 80090e2:	4608      	mov	r0, r1
 80090e4:	4611      	mov	r1, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	602a      	str	r2, [r5, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	f7f9 fd44 	bl	8002b78 <_read>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d102      	bne.n	80090fa <_read_r+0x1e>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	b103      	cbz	r3, 80090fa <_read_r+0x1e>
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	200004cc 	.word	0x200004cc

08009100 <_gettimeofday>:
 8009100:	4b02      	ldr	r3, [pc, #8]	; (800910c <_gettimeofday+0xc>)
 8009102:	2258      	movs	r2, #88	; 0x58
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	f04f 30ff 	mov.w	r0, #4294967295
 800910a:	4770      	bx	lr
 800910c:	200004cc 	.word	0x200004cc

08009110 <_init>:
 8009110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009112:	bf00      	nop
 8009114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009116:	bc08      	pop	{r3}
 8009118:	469e      	mov	lr, r3
 800911a:	4770      	bx	lr

0800911c <_fini>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	bf00      	nop
 8009120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009122:	bc08      	pop	{r3}
 8009124:	469e      	mov	lr, r3
 8009126:	4770      	bx	lr
